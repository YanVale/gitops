apiVersion: v1
items:
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      seccomp.security.alpha.kubernetes.io/pod: runtime/default
    creationTimestamp: "2023-01-05T21:23:27Z"
    generateName: cert-manager-cainjector-6b76846899-
    labels:
      app: cainjector
      app.kubernetes.io/component: cainjector
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: cainjector
      app.kubernetes.io/version: v1.10.1
      helm.sh/chart: cert-manager-v1.10.1
      pod-template-hash: 6b76846899
    name: cert-manager-cainjector-6b76846899-vrnrj
    namespace: components
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: cert-manager-cainjector-6b76846899
      uid: 166d5092-0421-4b06-97d4-82738cb4b350
    resourceVersion: "564967844"
    uid: 6ad6a560-d585-4729-8a04-09dc32b62cfa
  spec:
    containers:
    - args:
      - --v=2
      - --leader-election-namespace=qa
      env:
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: NEW_RELIC_METADATA_KUBERNETES_CLUSTER_NAME
        value: devqa
      - name: NEW_RELIC_METADATA_KUBERNETES_NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: NEW_RELIC_METADATA_KUBERNETES_NAMESPACE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: NEW_RELIC_METADATA_KUBERNETES_POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: NEW_RELIC_METADATA_KUBERNETES_CONTAINER_NAME
        value: cert-manager-cainjector
      - name: NEW_RELIC_METADATA_KUBERNETES_CONTAINER_IMAGE_NAME
        value: quay.io/jetstack/cert-manager-cainjector:v1.10.1
      - name: NEW_RELIC_METADATA_KUBERNETES_DEPLOYMENT_NAME
        value: cert-manager-cainjector
      image: quay.io/jetstack/cert-manager-cainjector:v1.10.1
      imagePullPolicy: IfNotPresent
      name: cert-manager-cainjector
      resources: {}
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-nwmhw
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-devqathird-41913477-vmss00000c
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      runAsNonRoot: true
      seccompProfile:
        type: RuntimeDefault
    serviceAccount: cert-manager-cainjector
    serviceAccountName: cert-manager-cainjector
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-nwmhw
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2023-01-05T21:23:27Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2023-02-04T21:15:09Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2023-02-04T21:15:09Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2023-01-05T21:23:27Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://009da3912d5b168aec22d5d2f26a0a39b69bdcfd97d02b41962bb5eab4c2e36c
      image: quay.io/jetstack/cert-manager-cainjector:v1.10.1
      imageID: quay.io/jetstack/cert-manager-cainjector@sha256:b5657161d2c2f74ab292da4cbaba3923bc74112525f70c3d884fb3c6ef83c303
      lastState:
        terminated:
          containerID: containerd://5d8a5c011d4217f8f03fbc54d61c1c0ef2386fde4794694aa71d45954d6fff26
          exitCode: 1
          finishedAt: "2023-02-04T21:15:08Z"
          reason: Error
          startedAt: "2023-01-22T01:48:21Z"
      name: cert-manager-cainjector
      ready: true
      restartCount: 3
      started: true
      state:
        running:
          startedAt: "2023-02-04T21:15:08Z"
    hostIP: 10.1.32.64
    phase: Running
    podIP: 10.1.32.77
    podIPs:
    - ip: 10.1.32.77
    qosClass: BestEffort
    startTime: "2023-01-05T21:23:27Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      prometheus.io/path: /metrics
      prometheus.io/port: "9402"
      prometheus.io/scrape: "true"
      seccomp.security.alpha.kubernetes.io/pod: runtime/default
    creationTimestamp: "2023-01-05T21:23:28Z"
    generateName: cert-manager-f54dd4d7b-
    labels:
      app: cert-manager
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: cert-manager
      app.kubernetes.io/version: v1.10.1
      helm.sh/chart: cert-manager-v1.10.1
      pod-template-hash: f54dd4d7b
    name: cert-manager-f54dd4d7b-qq9fr
    namespace: components
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: cert-manager-f54dd4d7b
      uid: 49033a36-b2c5-4afb-aa4a-26cceff87157
    resourceVersion: "564967841"
    uid: 9089498b-c4be-4bab-9863-81373eec50ea
  spec:
    containers:
    - args:
      - --v=2
      - --cluster-resource-namespace=$(POD_NAMESPACE)
      - --leader-election-namespace=qa
      - --dns01-recursive-nameservers-only
      - --dns01-recursive-nameservers=1.1.1.1:53
      env:
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: NEW_RELIC_METADATA_KUBERNETES_CLUSTER_NAME
        value: devqa
      - name: NEW_RELIC_METADATA_KUBERNETES_NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: NEW_RELIC_METADATA_KUBERNETES_NAMESPACE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: NEW_RELIC_METADATA_KUBERNETES_POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: NEW_RELIC_METADATA_KUBERNETES_CONTAINER_NAME
        value: cert-manager-controller
      - name: NEW_RELIC_METADATA_KUBERNETES_CONTAINER_IMAGE_NAME
        value: quay.io/jetstack/cert-manager-controller:v1.10.1
      - name: NEW_RELIC_METADATA_KUBERNETES_DEPLOYMENT_NAME
        value: cert-manager
      image: quay.io/jetstack/cert-manager-controller:v1.10.1
      imagePullPolicy: IfNotPresent
      name: cert-manager-controller
      ports:
      - containerPort: 9402
        name: http-metrics
        protocol: TCP
      resources: {}
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-vcldr
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-devqasecond-35848152-vmss00006f
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      runAsNonRoot: true
      seccompProfile:
        type: RuntimeDefault
    serviceAccount: cert-manager
    serviceAccountName: cert-manager
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-vcldr
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2023-01-05T21:23:28Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2023-02-04T21:15:03Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2023-02-04T21:15:03Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2023-01-05T21:23:28Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://5897a163426f576018232569455eefbd692ea8345ebdff28e8597828580a167b
      image: quay.io/jetstack/cert-manager-controller:v1.10.1
      imageID: quay.io/jetstack/cert-manager-controller@sha256:1143471c90db621faee43ed53f250d0fcec9c86303ca83661c787d59486d2ff4
      lastState:
        terminated:
          containerID: containerd://faac39b39a856b58e53f916b4992db1d9d6470aaba783e3f6b66be5125af7f78
          exitCode: 1
          finishedAt: "2023-02-04T21:15:01Z"
          reason: Error
          startedAt: "2023-01-22T01:48:16Z"
      name: cert-manager-controller
      ready: true
      restartCount: 4
      started: true
      state:
        running:
          startedAt: "2023-02-04T21:15:02Z"
    hostIP: 10.1.33.17
    phase: Running
    podIP: 10.1.33.42
    podIPs:
    - ip: 10.1.33.42
    qosClass: BestEffort
    startTime: "2023-01-05T21:23:28Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      prometheus.io/path: /metrics
      prometheus.io/port: "9402"
      prometheus.io/scrape: "true"
      seccomp.security.alpha.kubernetes.io/pod: runtime/default
    creationTimestamp: "2023-01-05T21:23:27Z"
    generateName: cert-manager-f54dd4d7b-
    labels:
      app: cert-manager
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: cert-manager
      app.kubernetes.io/version: v1.10.1
      helm.sh/chart: cert-manager-v1.10.1
      pod-template-hash: f54dd4d7b
    name: cert-manager-f54dd4d7b-smbpz
    namespace: components
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: cert-manager-f54dd4d7b
      uid: 49033a36-b2c5-4afb-aa4a-26cceff87157
    resourceVersion: "540225275"
    uid: 56744034-596d-4ad5-adbc-c0900527345d
  spec:
    containers:
    - args:
      - --v=2
      - --cluster-resource-namespace=$(POD_NAMESPACE)
      - --leader-election-namespace=qa
      - --dns01-recursive-nameservers-only
      - --dns01-recursive-nameservers=1.1.1.1:53
      env:
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: NEW_RELIC_METADATA_KUBERNETES_CLUSTER_NAME
        value: devqa
      - name: NEW_RELIC_METADATA_KUBERNETES_NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: NEW_RELIC_METADATA_KUBERNETES_NAMESPACE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: NEW_RELIC_METADATA_KUBERNETES_POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: NEW_RELIC_METADATA_KUBERNETES_CONTAINER_NAME
        value: cert-manager-controller
      - name: NEW_RELIC_METADATA_KUBERNETES_CONTAINER_IMAGE_NAME
        value: quay.io/jetstack/cert-manager-controller:v1.10.1
      - name: NEW_RELIC_METADATA_KUBERNETES_DEPLOYMENT_NAME
        value: cert-manager
      image: quay.io/jetstack/cert-manager-controller:v1.10.1
      imagePullPolicy: IfNotPresent
      name: cert-manager-controller
      ports:
      - containerPort: 9402
        name: http-metrics
        protocol: TCP
      resources: {}
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-87vnr
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-devqathird-41913477-vmss00000c
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      runAsNonRoot: true
      seccompProfile:
        type: RuntimeDefault
    serviceAccount: cert-manager
    serviceAccountName: cert-manager
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-87vnr
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2023-01-05T21:23:27Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2023-01-05T21:23:28Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2023-01-05T21:23:28Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2023-01-05T21:23:27Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://dab7466233d7599541934191d2cfbf563d77f72c6718968cd8498b5812c44fb9
      image: quay.io/jetstack/cert-manager-controller:v1.10.1
      imageID: quay.io/jetstack/cert-manager-controller@sha256:1143471c90db621faee43ed53f250d0fcec9c86303ca83661c787d59486d2ff4
      lastState: {}
      name: cert-manager-controller
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2023-01-05T21:23:28Z"
    hostIP: 10.1.32.64
    phase: Running
    podIP: 10.1.32.68
    podIPs:
    - ip: 10.1.32.68
    qosClass: BestEffort
    startTime: "2023-01-05T21:23:27Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      seccomp.security.alpha.kubernetes.io/pod: runtime/default
    creationTimestamp: "2023-01-12T15:27:21Z"
    generateName: cert-manager-webhook-d77bbf4cb-
    labels:
      app: webhook
      app.kubernetes.io/component: webhook
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: webhook
      app.kubernetes.io/version: v1.10.1
      helm.sh/chart: cert-manager-v1.10.1
      pod-template-hash: d77bbf4cb
    name: cert-manager-webhook-d77bbf4cb-kntpp
    namespace: components
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: cert-manager-webhook-d77bbf4cb
      uid: 52078721-5cd6-4593-a7a2-6b054c6e7a10
    resourceVersion: "531171546"
    uid: 82471f79-9f6e-45da-adfd-93a490519c94
  spec:
    containers:
    - args:
      - --v=2
      - --secure-port=10250
      - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
      - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
      - --dynamic-serving-dns-names=cert-manager-webhook
      - --dynamic-serving-dns-names=cert-manager-webhook.$(POD_NAMESPACE)
      - --dynamic-serving-dns-names=cert-manager-webhook.$(POD_NAMESPACE).svc
      env:
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: NEW_RELIC_METADATA_KUBERNETES_CLUSTER_NAME
        value: devqa
      - name: NEW_RELIC_METADATA_KUBERNETES_NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: NEW_RELIC_METADATA_KUBERNETES_NAMESPACE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: NEW_RELIC_METADATA_KUBERNETES_POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: NEW_RELIC_METADATA_KUBERNETES_CONTAINER_NAME
        value: cert-manager-webhook
      - name: NEW_RELIC_METADATA_KUBERNETES_CONTAINER_IMAGE_NAME
        value: quay.io/jetstack/cert-manager-webhook:v1.10.1
      - name: NEW_RELIC_METADATA_KUBERNETES_DEPLOYMENT_NAME
        value: cert-manager-webhook
      image: quay.io/jetstack/cert-manager-webhook:v1.10.1
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /livez
          port: 6080
          scheme: HTTP
        initialDelaySeconds: 60
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: cert-manager-webhook
      ports:
      - containerPort: 10250
        name: https
        protocol: TCP
      - containerPort: 6080
        name: healthcheck
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /healthz
          port: 6080
          scheme: HTTP
        initialDelaySeconds: 5
        periodSeconds: 5
        successThreshold: 1
        timeoutSeconds: 1
      resources: {}
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-dml5w
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-devqathird-41913477-vmss000008
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      runAsNonRoot: true
      seccompProfile:
        type: RuntimeDefault
    serviceAccount: cert-manager-webhook
    serviceAccountName: cert-manager-webhook
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-dml5w
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2023-01-12T15:27:22Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2023-01-12T15:27:42Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2023-01-12T15:27:42Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2023-01-12T15:27:22Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://7951a91ab4aa3b47408b593a9be5b44aebace394a3cd0fd6b0f56f9635695a16
      image: quay.io/jetstack/cert-manager-webhook:v1.10.1
      imageID: quay.io/jetstack/cert-manager-webhook@sha256:64121721c6659e6790d7de527e8bc115ffc28b6e73e1b9a7f9aa11a90286fe25
      lastState: {}
      name: cert-manager-webhook
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2023-01-12T15:27:34Z"
    hostIP: 10.1.32.33
    phase: Running
    podIP: 10.1.32.113
    podIPs:
    - ip: 10.1.32.113
    qosClass: BestEffort
    startTime: "2023-01-12T15:27:22Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      kubectl.kubernetes.io/restartedAt: "2022-08-01T16:19:05-03:00"
    creationTimestamp: "2023-01-05T18:46:55Z"
    generateName: dev-ingress-nginx-ingress-controller-6bffb6c68d-
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: dev-ingress
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: nginx-ingress-controller
      helm.sh/chart: nginx-ingress-controller-9.3.22
      pod-template-hash: 6bffb6c68d
    name: dev-ingress-nginx-ingress-controller-6bffb6c68d-2s29w
    namespace: components
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: dev-ingress-nginx-ingress-controller-6bffb6c68d
      uid: 20a1ea5e-c256-4d57-82e1-962d1867eae1
    resourceVersion: "544848857"
    uid: a7ebba9c-f891-4950-bf3d-89881d92f93c
  spec:
    affinity:
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
        - podAffinityTerm:
            labelSelector:
              matchLabels:
                app.kubernetes.io/component: controller
                app.kubernetes.io/instance: dev-ingress
                app.kubernetes.io/name: nginx-ingress-controller
            topologyKey: kubernetes.io/hostname
          weight: 1
    containers:
    - args:
      - /nginx-ingress-controller
      - --default-backend-service=components/dev-ingress-nginx-ingress-controller-default-backend
      - --election-id=ingress-controller-leader
      - --controller-class=k8s.io/ingress-nginx
      - --configmap=components/dev-ingress-nginx-ingress-controller
      - --tcp-services-configmap=components/dev-ingress-nginx-ingress-controller-tcp
      - --ingress-class=dev-ingress
      - --v=1
      env:
      - name: POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: NEW_RELIC_METADATA_KUBERNETES_CLUSTER_NAME
        value: devqa
      - name: NEW_RELIC_METADATA_KUBERNETES_NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: NEW_RELIC_METADATA_KUBERNETES_NAMESPACE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: NEW_RELIC_METADATA_KUBERNETES_POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: NEW_RELIC_METADATA_KUBERNETES_CONTAINER_NAME
        value: controller
      - name: NEW_RELIC_METADATA_KUBERNETES_CONTAINER_IMAGE_NAME
        value: docker.io/bitnami/nginx-ingress-controller:1.5.1-debian-11-r5
      - name: NEW_RELIC_METADATA_KUBERNETES_DEPLOYMENT_NAME
        value: dev-ingress-nginx-ingress-controller
      image: docker.io/bitnami/nginx-ingress-controller:1.5.1-debian-11-r5
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /healthz
          port: 10254
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: controller
      ports:
      - containerPort: 80
        name: http
        protocol: TCP
      - containerPort: 443
        name: https
        protocol: TCP
      - containerPort: 15672
        name: 15672-tcp
        protocol: TCP
      - containerPort: 1883
        name: 1883-tcp
        protocol: TCP
      - containerPort: 5671
        name: 5671-tcp
        protocol: TCP
      - containerPort: 5672
        name: 5672-tcp
        protocol: TCP
      - containerPort: 6379
        name: 6379-tcp
        protocol: TCP
      - containerPort: 8883
        name: 8883-tcp
        protocol: TCP
      - containerPort: 9000
        name: 9000-tcp
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /healthz
          port: 10254
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources: {}
      securityContext:
        allowPrivilegeEscalation: true
        capabilities:
          add:
          - NET_BIND_SERVICE
          drop:
          - ALL
        runAsNonRoot: true
        runAsUser: 1001
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-69rdt
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-devqasecond-35848152-vmss00006f
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 1001
    serviceAccount: dev-ingress-nginx-ingress-controller
    serviceAccountName: dev-ingress-nginx-ingress-controller
    terminationGracePeriodSeconds: 60
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-69rdt
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2023-01-05T18:46:55Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2023-01-05T18:47:15Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2023-01-05T18:47:15Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2023-01-05T18:46:55Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://b26230050d8c14d505f56369f89cdc8b48ad68fb21bc00f4eb20835d81bfdbf9
      image: docker.io/bitnami/nginx-ingress-controller:1.5.1-debian-11-r5
      imageID: docker.io/bitnami/nginx-ingress-controller@sha256:8a041dcafee6a83afbc3840395628d733a5135b845011d3d1a173f38819fa711
      lastState: {}
      name: controller
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2023-01-05T18:46:57Z"
    hostIP: 10.1.33.17
    phase: Running
    podIP: 10.1.33.27
    podIPs:
    - ip: 10.1.33.27
    qosClass: BestEffort
    startTime: "2023-01-05T18:46:55Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      kubectl.kubernetes.io/restartedAt: "2022-08-01T16:19:05-03:00"
    creationTimestamp: "2023-01-05T18:33:37Z"
    generateName: dev-ingress-nginx-ingress-controller-6bffb6c68d-
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: dev-ingress
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: nginx-ingress-controller
      helm.sh/chart: nginx-ingress-controller-9.3.22
      pod-template-hash: 6bffb6c68d
    name: dev-ingress-nginx-ingress-controller-6bffb6c68d-htmdx
    namespace: components
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: dev-ingress-nginx-ingress-controller-6bffb6c68d
      uid: 20a1ea5e-c256-4d57-82e1-962d1867eae1
    resourceVersion: "564971757"
    uid: 12a5ac31-b247-4983-9e7c-206022e25a88
  spec:
    affinity:
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
        - podAffinityTerm:
            labelSelector:
              matchLabels:
                app.kubernetes.io/component: controller
                app.kubernetes.io/instance: dev-ingress
                app.kubernetes.io/name: nginx-ingress-controller
            topologyKey: kubernetes.io/hostname
          weight: 1
    containers:
    - args:
      - /nginx-ingress-controller
      - --default-backend-service=components/dev-ingress-nginx-ingress-controller-default-backend
      - --election-id=ingress-controller-leader
      - --controller-class=k8s.io/ingress-nginx
      - --configmap=components/dev-ingress-nginx-ingress-controller
      - --tcp-services-configmap=components/dev-ingress-nginx-ingress-controller-tcp
      - --ingress-class=dev-ingress
      - --v=1
      env:
      - name: POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: NEW_RELIC_METADATA_KUBERNETES_CLUSTER_NAME
        value: devqa
      - name: NEW_RELIC_METADATA_KUBERNETES_NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: NEW_RELIC_METADATA_KUBERNETES_NAMESPACE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: NEW_RELIC_METADATA_KUBERNETES_POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: NEW_RELIC_METADATA_KUBERNETES_CONTAINER_NAME
        value: controller
      - name: NEW_RELIC_METADATA_KUBERNETES_CONTAINER_IMAGE_NAME
        value: docker.io/bitnami/nginx-ingress-controller:1.5.1-debian-11-r5
      - name: NEW_RELIC_METADATA_KUBERNETES_DEPLOYMENT_NAME
        value: dev-ingress-nginx-ingress-controller
      image: docker.io/bitnami/nginx-ingress-controller:1.5.1-debian-11-r5
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /healthz
          port: 10254
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: controller
      ports:
      - containerPort: 80
        name: http
        protocol: TCP
      - containerPort: 443
        name: https
        protocol: TCP
      - containerPort: 15672
        name: 15672-tcp
        protocol: TCP
      - containerPort: 1883
        name: 1883-tcp
        protocol: TCP
      - containerPort: 5671
        name: 5671-tcp
        protocol: TCP
      - containerPort: 5672
        name: 5672-tcp
        protocol: TCP
      - containerPort: 6379
        name: 6379-tcp
        protocol: TCP
      - containerPort: 8883
        name: 8883-tcp
        protocol: TCP
      - containerPort: 9000
        name: 9000-tcp
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /healthz
          port: 10254
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources: {}
      securityContext:
        allowPrivilegeEscalation: true
        capabilities:
          add:
          - NET_BIND_SERVICE
          drop:
          - ALL
        runAsNonRoot: true
        runAsUser: 1001
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-kh2wn
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-devqathird-41913477-vmss000004
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 1001
    serviceAccount: dev-ingress-nginx-ingress-controller
    serviceAccountName: dev-ingress-nginx-ingress-controller
    terminationGracePeriodSeconds: 60
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-kh2wn
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2023-01-05T18:33:37Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2023-01-05T18:33:48Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2023-01-05T18:33:48Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2023-01-05T18:33:37Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://bc079102116fe9c28b49d6150381bddebe5298a82af12d2b1660c4dad3badbfe
      image: docker.io/bitnami/nginx-ingress-controller:1.5.1-debian-11-r5
      imageID: docker.io/bitnami/nginx-ingress-controller@sha256:8a041dcafee6a83afbc3840395628d733a5135b845011d3d1a173f38819fa711
      lastState: {}
      name: controller
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2023-01-05T18:33:38Z"
    hostIP: 10.1.32.35
    phase: Running
    podIP: 10.1.32.58
    podIPs:
    - ip: 10.1.32.58
    qosClass: BestEffort
    startTime: "2023-01-05T18:33:37Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      kubectl.kubernetes.io/restartedAt: "2022-01-31T15:52:04-03:00"
    creationTimestamp: "2023-01-05T18:46:57Z"
    generateName: dev-ingress-nginx-ingress-controller-default-backend-594ffb64c-
    labels:
      app.kubernetes.io/component: default-backend
      app.kubernetes.io/instance: dev-ingress
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: nginx-ingress-controller
      helm.sh/chart: nginx-ingress-controller-9.3.22
      pod-template-hash: 594ffb64c
    name: dev-ingress-nginx-ingress-controller-default-backend-594ffqssgd
    namespace: components
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: dev-ingress-nginx-ingress-controller-default-backend-594ffb64c
      uid: 49c0f07b-f5b3-4b87-bffb-8097b616df7e
    resourceVersion: "544849073"
    uid: aad0a6cb-7154-4b1f-bc94-4f0099fe0bef
  spec:
    affinity:
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
        - podAffinityTerm:
            labelSelector:
              matchLabels:
                app.kubernetes.io/component: default-backend
                app.kubernetes.io/instance: dev-ingress
                app.kubernetes.io/name: nginx-ingress-controller
            topologyKey: kubernetes.io/hostname
          weight: 1
    containers:
    - env:
      - name: NEW_RELIC_METADATA_KUBERNETES_CLUSTER_NAME
        value: devqa
      - name: NEW_RELIC_METADATA_KUBERNETES_NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: NEW_RELIC_METADATA_KUBERNETES_NAMESPACE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: NEW_RELIC_METADATA_KUBERNETES_POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: NEW_RELIC_METADATA_KUBERNETES_CONTAINER_NAME
        value: default-backend
      - name: NEW_RELIC_METADATA_KUBERNETES_CONTAINER_IMAGE_NAME
        value: docker.io/bitnami/nginx:1.22.1-debian-11-r7
      - name: NEW_RELIC_METADATA_KUBERNETES_DEPLOYMENT_NAME
        value: dev-ingress-nginx-ingress-controller-default-backend
      image: docker.io/bitnami/nginx:1.22.1-debian-11-r7
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /healthz
          port: http
          scheme: HTTP
        initialDelaySeconds: 30
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      name: default-backend
      ports:
      - containerPort: 8080
        name: http
        protocol: TCP
      readinessProbe:
        failureThreshold: 6
        httpGet:
          path: /healthz
          port: http
          scheme: HTTP
        periodSeconds: 5
        successThreshold: 1
        timeoutSeconds: 5
      resources: {}
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /opt/bitnami/nginx/conf/bitnami/
        name: nginx-config-volume
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-zzl2b
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-devqasecond-35848152-vmss00006f
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 1001
    serviceAccount: dev-ingress-nginx-ingress-controller
    serviceAccountName: dev-ingress-nginx-ingress-controller
    terminationGracePeriodSeconds: 60
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - configMap:
        defaultMode: 420
        items:
        - key: defaultBackend.conf
          path: defaultBackend.conf
        name: dev-ingress-nginx-ingress-controller-default-backend
      name: nginx-config-volume
    - name: kube-api-access-zzl2b
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2023-01-05T18:46:57Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2023-01-05T18:47:11Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2023-01-05T18:47:11Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2023-01-05T18:46:57Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://328f404fd9b496d21a62c49a08de098aa04fdf74fee447d8dacef6c90c7ea063
      image: docker.io/bitnami/nginx:1.22.1-debian-11-r7
      imageID: docker.io/bitnami/nginx@sha256:d3a55724c7f2d6dcf7f014f6a0703da2dd9db9f0b48c47631b9f949ddc2cbf7b
      lastState: {}
      name: default-backend
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2023-01-05T18:47:10Z"
    hostIP: 10.1.33.17
    phase: Running
    podIP: 10.1.33.26
    podIPs:
    - ip: 10.1.33.26
    qosClass: BestEffort
    startTime: "2023-01-05T18:46:57Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      kubectl.kubernetes.io/restartedAt: "2021-09-21T12:40:34-03:00"
    creationTimestamp: "2023-01-12T15:27:22Z"
    generateName: external-ingress-nginx-ingress-controller-6d46d646f6-
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: external-ingress
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: nginx-ingress-controller
      helm.sh/chart: nginx-ingress-controller-9.3.22
      pod-template-hash: 6d46d646f6
    name: external-ingress-nginx-ingress-controller-6d46d646f6-9ct8j
    namespace: components
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: external-ingress-nginx-ingress-controller-6d46d646f6
      uid: 2bf84fe5-eaa2-4385-9256-35f83433f751
    resourceVersion: "531171687"
    uid: 1f2a03ca-078b-4e11-bef7-3b52f664e0e8
  spec:
    affinity:
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
        - podAffinityTerm:
            labelSelector:
              matchLabels:
                app.kubernetes.io/component: controller
                app.kubernetes.io/instance: external-ingress
                app.kubernetes.io/name: nginx-ingress-controller
            topologyKey: kubernetes.io/hostname
          weight: 1
    containers:
    - args:
      - /nginx-ingress-controller
      - --default-backend-service=components/external-ingress-nginx-ingress-controller-default-backend
      - --election-id=ingress-controller-leader
      - --controller-class=k8s.io/ingress-nginx
      - --configmap=components/external-ingress-nginx-ingress-controller
      - --tcp-services-configmap=components/external-ingress-nginx-ingress-controller-tcp
      - --ingress-class=external-ingress
      env:
      - name: POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: NEW_RELIC_METADATA_KUBERNETES_CLUSTER_NAME
        value: devqa
      - name: NEW_RELIC_METADATA_KUBERNETES_NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: NEW_RELIC_METADATA_KUBERNETES_NAMESPACE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: NEW_RELIC_METADATA_KUBERNETES_POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: NEW_RELIC_METADATA_KUBERNETES_CONTAINER_NAME
        value: controller
      - name: NEW_RELIC_METADATA_KUBERNETES_CONTAINER_IMAGE_NAME
        value: docker.io/bitnami/nginx-ingress-controller:1.5.1-debian-11-r5
      - name: NEW_RELIC_METADATA_KUBERNETES_DEPLOYMENT_NAME
        value: external-ingress-nginx-ingress-controller
      image: docker.io/bitnami/nginx-ingress-controller:1.5.1-debian-11-r5
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /healthz
          port: 10254
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: controller
      ports:
      - containerPort: 80
        name: http
        protocol: TCP
      - containerPort: 443
        name: https
        protocol: TCP
      - containerPort: 1883
        name: 1883-tcp
        protocol: TCP
      - containerPort: 8883
        name: 8883-tcp
        protocol: TCP
      - containerPort: 9000
        name: 9000-tcp
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /healthz
          port: 10254
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources: {}
      securityContext:
        allowPrivilegeEscalation: true
        capabilities:
          add:
          - NET_BIND_SERVICE
          drop:
          - ALL
        runAsNonRoot: true
        runAsUser: 1001
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-4j47c
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-devqathird-41913477-vmss000008
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 1001
    serviceAccount: external-ingress-nginx-ingress-controller
    serviceAccountName: external-ingress-nginx-ingress-controller
    terminationGracePeriodSeconds: 60
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-4j47c
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2023-01-12T15:27:22Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2023-01-12T15:27:53Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2023-01-12T15:27:53Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2023-01-12T15:27:22Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://c9a09e13125932c30d5d6136e6b038a54fa4c661c6b03378d5e5c768408eff6d
      image: docker.io/bitnami/nginx-ingress-controller:1.5.1-debian-11-r5
      imageID: docker.io/bitnami/nginx-ingress-controller@sha256:8a041dcafee6a83afbc3840395628d733a5135b845011d3d1a173f38819fa711
      lastState: {}
      name: controller
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2023-01-12T15:27:36Z"
    hostIP: 10.1.32.33
    phase: Running
    podIP: 10.1.32.97
    podIPs:
    - ip: 10.1.32.97
    qosClass: BestEffort
    startTime: "2023-01-12T15:27:22Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      kubectl.kubernetes.io/restartedAt: "2021-09-21T12:40:34-03:00"
    creationTimestamp: "2022-12-03T19:44:09Z"
    generateName: external-ingress-nginx-ingress-controller-6d46d646f6-
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: external-ingress
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: nginx-ingress-controller
      helm.sh/chart: nginx-ingress-controller-9.3.22
      pod-template-hash: 6d46d646f6
    name: external-ingress-nginx-ingress-controller-6d46d646f6-tnhgl
    namespace: components
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: external-ingress-nginx-ingress-controller-6d46d646f6
      uid: 2bf84fe5-eaa2-4385-9256-35f83433f751
    resourceVersion: "564973509"
    uid: b60b856a-f7a1-4d23-a812-5d91b83064a9
  spec:
    affinity:
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
        - podAffinityTerm:
            labelSelector:
              matchLabels:
                app.kubernetes.io/component: controller
                app.kubernetes.io/instance: external-ingress
                app.kubernetes.io/name: nginx-ingress-controller
            topologyKey: kubernetes.io/hostname
          weight: 1
    containers:
    - args:
      - /nginx-ingress-controller
      - --default-backend-service=components/external-ingress-nginx-ingress-controller-default-backend
      - --election-id=ingress-controller-leader
      - --controller-class=k8s.io/ingress-nginx
      - --configmap=components/external-ingress-nginx-ingress-controller
      - --tcp-services-configmap=components/external-ingress-nginx-ingress-controller-tcp
      - --ingress-class=external-ingress
      env:
      - name: POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: NEW_RELIC_METADATA_KUBERNETES_CLUSTER_NAME
        value: devqa
      - name: NEW_RELIC_METADATA_KUBERNETES_NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: NEW_RELIC_METADATA_KUBERNETES_NAMESPACE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: NEW_RELIC_METADATA_KUBERNETES_POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: NEW_RELIC_METADATA_KUBERNETES_CONTAINER_NAME
        value: controller
      - name: NEW_RELIC_METADATA_KUBERNETES_CONTAINER_IMAGE_NAME
        value: docker.io/bitnami/nginx-ingress-controller:1.5.1-debian-11-r5
      - name: NEW_RELIC_METADATA_KUBERNETES_DEPLOYMENT_NAME
        value: external-ingress-nginx-ingress-controller
      image: docker.io/bitnami/nginx-ingress-controller:1.5.1-debian-11-r5
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /healthz
          port: 10254
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: controller
      ports:
      - containerPort: 80
        name: http
        protocol: TCP
      - containerPort: 443
        name: https
        protocol: TCP
      - containerPort: 1883
        name: 1883-tcp
        protocol: TCP
      - containerPort: 8883
        name: 8883-tcp
        protocol: TCP
      - containerPort: 9000
        name: 9000-tcp
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /healthz
          port: 10254
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources: {}
      securityContext:
        allowPrivilegeEscalation: true
        capabilities:
          add:
          - NET_BIND_SERVICE
          drop:
          - ALL
        runAsNonRoot: true
        runAsUser: 1001
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-cplsb
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-devqathird-41913477-vmss000004
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 1001
    serviceAccount: external-ingress-nginx-ingress-controller
    serviceAccountName: external-ingress-nginx-ingress-controller
    terminationGracePeriodSeconds: 60
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-cplsb
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2022-12-03T19:44:09Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2023-01-03T16:58:25Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2023-01-03T16:58:25Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2022-12-03T19:44:09Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://794db42c52b47fd1aa9055ac24d4d0e84511f04a4de0e5c6bc51e99844d72947
      image: docker.io/bitnami/nginx-ingress-controller:1.5.1-debian-11-r5
      imageID: docker.io/bitnami/nginx-ingress-controller@sha256:8a041dcafee6a83afbc3840395628d733a5135b845011d3d1a173f38819fa711
      lastState:
        terminated:
          containerID: containerd://ddced7a1553060e8dbb02a8c3228a1acb5aa66dd4f0c988bcd520d8b664c7726
          exitCode: 255
          finishedAt: "2023-01-03T16:57:26Z"
          reason: Unknown
          startedAt: "2022-12-03T19:44:10Z"
      name: controller
      ready: true
      restartCount: 1
      started: true
      state:
        running:
          startedAt: "2023-01-03T16:57:46Z"
    hostIP: 10.1.32.35
    phase: Running
    podIP: 10.1.32.48
    podIPs:
    - ip: 10.1.32.48
    qosClass: BestEffort
    startTime: "2022-12-03T19:44:09Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      kubectl.kubernetes.io/restartedAt: "2021-09-21T12:09:44-03:00"
    creationTimestamp: "2022-12-03T19:43:49Z"
    generateName: external-ingress-nginx-ingress-controller-default-backend-6694489fdd-
    labels:
      app.kubernetes.io/component: default-backend
      app.kubernetes.io/instance: external-ingress
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: nginx-ingress-controller
      helm.sh/chart: nginx-ingress-controller-9.3.22
      pod-template-hash: 6694489fdd
    name: external-ingress-nginx-ingress-controller-default-backend-hss7f
    namespace: components
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: external-ingress-nginx-ingress-controller-default-backend-6694489fdd
      uid: dc745d27-24ca-43ae-81d7-67b4a7751f5a
    resourceVersion: "564970523"
    uid: 5baaaff0-1932-48b4-9b09-1d308145dde9
  spec:
    affinity:
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
        - podAffinityTerm:
            labelSelector:
              matchLabels:
                app.kubernetes.io/component: default-backend
                app.kubernetes.io/instance: external-ingress
                app.kubernetes.io/name: nginx-ingress-controller
            topologyKey: kubernetes.io/hostname
          weight: 1
    containers:
    - env:
      - name: NEW_RELIC_METADATA_KUBERNETES_CLUSTER_NAME
        value: devqa
      - name: NEW_RELIC_METADATA_KUBERNETES_NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: NEW_RELIC_METADATA_KUBERNETES_NAMESPACE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: NEW_RELIC_METADATA_KUBERNETES_POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: NEW_RELIC_METADATA_KUBERNETES_CONTAINER_NAME
        value: default-backend
      - name: NEW_RELIC_METADATA_KUBERNETES_CONTAINER_IMAGE_NAME
        value: docker.io/bitnami/nginx:1.22.1-debian-11-r7
      - name: NEW_RELIC_METADATA_KUBERNETES_DEPLOYMENT_NAME
        value: external-ingress-nginx-ingress-controller-default-backend
      image: docker.io/bitnami/nginx:1.22.1-debian-11-r7
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /healthz
          port: http
          scheme: HTTP
        initialDelaySeconds: 30
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      name: default-backend
      ports:
      - containerPort: 8080
        name: http
        protocol: TCP
      readinessProbe:
        failureThreshold: 6
        httpGet:
          path: /healthz
          port: http
          scheme: HTTP
        periodSeconds: 5
        successThreshold: 1
        timeoutSeconds: 5
      resources: {}
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /opt/bitnami/nginx/conf/bitnami/
        name: nginx-config-volume
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-ncqnh
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-devqathird-41913477-vmss000004
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 1001
    serviceAccount: external-ingress-nginx-ingress-controller
    serviceAccountName: external-ingress-nginx-ingress-controller
    terminationGracePeriodSeconds: 60
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - configMap:
        defaultMode: 420
        items:
        - key: defaultBackend.conf
          path: defaultBackend.conf
        name: external-ingress-nginx-ingress-controller-default-backend
      name: nginx-config-volume
    - name: kube-api-access-ncqnh
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2022-12-03T19:43:49Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2023-01-03T16:57:56Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2023-01-03T16:57:56Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2022-12-03T19:43:49Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://dcb4e02740f8ebb974129fed8594bd0ae0fa8f7c383f27e346821409cb972551
      image: docker.io/bitnami/nginx:1.22.1-debian-11-r7
      imageID: docker.io/bitnami/nginx@sha256:d3a55724c7f2d6dcf7f014f6a0703da2dd9db9f0b48c47631b9f949ddc2cbf7b
      lastState:
        terminated:
          containerID: containerd://4de0361cb97bd43aa9c24e90ec5d45cd0c5af3e4e1d5c3608ea4aa3c32abd037
          exitCode: 255
          finishedAt: "2023-01-03T16:57:25Z"
          reason: Unknown
          startedAt: "2022-12-03T19:43:51Z"
      name: default-backend
      ready: true
      restartCount: 1
      started: true
      state:
        running:
          startedAt: "2023-01-03T16:57:54Z"
    hostIP: 10.1.32.35
    phase: Running
    podIP: 10.1.32.56
    podIPs:
    - ip: 10.1.32.56
    qosClass: BestEffort
    startTime: "2022-12-03T19:43:49Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      kubectl.kubernetes.io/restartedAt: "2022-09-29T16:35:50-03:00"
    creationTimestamp: "2023-01-05T12:40:23Z"
    generateName: lab-devops-ingress-nginx-ingress-controller-7d468477-
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: lab-devops-ingress
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: nginx-ingress-controller
      helm.sh/chart: nginx-ingress-controller-9.3.22
      pod-template-hash: 7d468477
    name: lab-devops-ingress-nginx-ingress-controller-7d468477-qs7fq
    namespace: components
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: lab-devops-ingress-nginx-ingress-controller-7d468477
      uid: c008108c-1d91-45cf-9e92-45b785e34c22
    resourceVersion: "544849129"
    uid: 274bc225-2c6c-4b2d-8bbd-626aded5b7b3
  spec:
    affinity:
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
        - podAffinityTerm:
            labelSelector:
              matchLabels:
                app.kubernetes.io/component: controller
                app.kubernetes.io/instance: lab-devops-ingress
                app.kubernetes.io/name: nginx-ingress-controller
            topologyKey: kubernetes.io/hostname
          weight: 1
    containers:
    - args:
      - /nginx-ingress-controller
      - --default-backend-service=components/lab-devops-ingress-nginx-ingress-controller-default-backend
      - --election-id=ingress-controller-leader
      - --controller-class=k8s.io/ingress-nginx
      - --configmap=components/lab-devops-ingress-nginx-ingress-controller
      - --tcp-services-configmap=components/lab-devops-ingress-nginx-ingress-controller-tcp
      - --ingress-class=lab-devops-ingress
      env:
      - name: POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: NEW_RELIC_METADATA_KUBERNETES_CLUSTER_NAME
        value: devqa
      - name: NEW_RELIC_METADATA_KUBERNETES_NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: NEW_RELIC_METADATA_KUBERNETES_NAMESPACE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: NEW_RELIC_METADATA_KUBERNETES_POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: NEW_RELIC_METADATA_KUBERNETES_CONTAINER_NAME
        value: controller
      - name: NEW_RELIC_METADATA_KUBERNETES_CONTAINER_IMAGE_NAME
        value: docker.io/bitnami/nginx-ingress-controller:1.5.1-debian-11-r5
      - name: NEW_RELIC_METADATA_KUBERNETES_DEPLOYMENT_NAME
        value: lab-devops-ingress-nginx-ingress-controller
      image: docker.io/bitnami/nginx-ingress-controller:1.5.1-debian-11-r5
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /healthz
          port: 10254
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: controller
      ports:
      - containerPort: 80
        name: http
        protocol: TCP
      - containerPort: 443
        name: https
        protocol: TCP
      - containerPort: 15672
        name: 15672-tcp
        protocol: TCP
      - containerPort: 1883
        name: 1883-tcp
        protocol: TCP
      - containerPort: 5671
        name: 5671-tcp
        protocol: TCP
      - containerPort: 5672
        name: 5672-tcp
        protocol: TCP
      - containerPort: 6379
        name: 6379-tcp
        protocol: TCP
      - containerPort: 8883
        name: 8883-tcp
        protocol: TCP
      - containerPort: 9000
        name: 9000-tcp
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /healthz
          port: 10254
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources: {}
      securityContext:
        allowPrivilegeEscalation: true
        capabilities:
          add:
          - NET_BIND_SERVICE
          drop:
          - ALL
        runAsNonRoot: true
        runAsUser: 1001
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-xnrmj
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-devqasecond-35848152-vmss00006f
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 1001
    serviceAccount: lab-devops-ingress-nginx-ingress-controller
    serviceAccountName: lab-devops-ingress-nginx-ingress-controller
    terminationGracePeriodSeconds: 60
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-xnrmj
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2023-01-05T12:40:23Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2023-01-05T12:40:44Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2023-01-05T12:40:44Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2023-01-05T12:40:23Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://06c81cd69f88ce4be050235b2ef551624b81972e6c962d3a53ecda53ed75db8e
      image: docker.io/bitnami/nginx-ingress-controller:1.5.1-debian-11-r5
      imageID: docker.io/bitnami/nginx-ingress-controller@sha256:8a041dcafee6a83afbc3840395628d733a5135b845011d3d1a173f38819fa711
      lastState: {}
      name: controller
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2023-01-05T12:40:28Z"
    hostIP: 10.1.33.17
    phase: Running
    podIP: 10.1.33.25
    podIPs:
    - ip: 10.1.33.25
    qosClass: BestEffort
    startTime: "2023-01-05T12:40:23Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      kubectl.kubernetes.io/restartedAt: "2022-09-29T16:35:50-03:00"
    creationTimestamp: "2023-01-05T18:12:26Z"
    generateName: lab-devops-ingress-nginx-ingress-controller-7d468477-
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: lab-devops-ingress
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: nginx-ingress-controller
      helm.sh/chart: nginx-ingress-controller-9.3.22
      pod-template-hash: 7d468477
    name: lab-devops-ingress-nginx-ingress-controller-7d468477-rsp7k
    namespace: components
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: lab-devops-ingress-nginx-ingress-controller-7d468477
      uid: c008108c-1d91-45cf-9e92-45b785e34c22
    resourceVersion: "540225454"
    uid: af6f2a9c-4aa5-4f63-9e99-ca15103c604d
  spec:
    affinity:
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
        - podAffinityTerm:
            labelSelector:
              matchLabels:
                app.kubernetes.io/component: controller
                app.kubernetes.io/instance: lab-devops-ingress
                app.kubernetes.io/name: nginx-ingress-controller
            topologyKey: kubernetes.io/hostname
          weight: 1
    containers:
    - args:
      - /nginx-ingress-controller
      - --default-backend-service=components/lab-devops-ingress-nginx-ingress-controller-default-backend
      - --election-id=ingress-controller-leader
      - --controller-class=k8s.io/ingress-nginx
      - --configmap=components/lab-devops-ingress-nginx-ingress-controller
      - --tcp-services-configmap=components/lab-devops-ingress-nginx-ingress-controller-tcp
      - --ingress-class=lab-devops-ingress
      env:
      - name: POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: NEW_RELIC_METADATA_KUBERNETES_CLUSTER_NAME
        value: devqa
      - name: NEW_RELIC_METADATA_KUBERNETES_NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: NEW_RELIC_METADATA_KUBERNETES_NAMESPACE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: NEW_RELIC_METADATA_KUBERNETES_POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: NEW_RELIC_METADATA_KUBERNETES_CONTAINER_NAME
        value: controller
      - name: NEW_RELIC_METADATA_KUBERNETES_CONTAINER_IMAGE_NAME
        value: docker.io/bitnami/nginx-ingress-controller:1.5.1-debian-11-r5
      - name: NEW_RELIC_METADATA_KUBERNETES_DEPLOYMENT_NAME
        value: lab-devops-ingress-nginx-ingress-controller
      image: docker.io/bitnami/nginx-ingress-controller:1.5.1-debian-11-r5
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /healthz
          port: 10254
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: controller
      ports:
      - containerPort: 80
        name: http
        protocol: TCP
      - containerPort: 443
        name: https
        protocol: TCP
      - containerPort: 15672
        name: 15672-tcp
        protocol: TCP
      - containerPort: 1883
        name: 1883-tcp
        protocol: TCP
      - containerPort: 5671
        name: 5671-tcp
        protocol: TCP
      - containerPort: 5672
        name: 5672-tcp
        protocol: TCP
      - containerPort: 6379
        name: 6379-tcp
        protocol: TCP
      - containerPort: 8883
        name: 8883-tcp
        protocol: TCP
      - containerPort: 9000
        name: 9000-tcp
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /healthz
          port: 10254
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources: {}
      securityContext:
        allowPrivilegeEscalation: true
        capabilities:
          add:
          - NET_BIND_SERVICE
          drop:
          - ALL
        runAsNonRoot: true
        runAsUser: 1001
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-t7dzd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-devqathird-41913477-vmss00000c
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 1001
    serviceAccount: lab-devops-ingress-nginx-ingress-controller
    serviceAccountName: lab-devops-ingress-nginx-ingress-controller
    terminationGracePeriodSeconds: 60
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-t7dzd
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2023-01-05T18:12:27Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2023-01-11T18:55:38Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2023-01-11T18:55:38Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2023-01-05T18:12:26Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://e8797b5207dc621941a459925c83e4e11635b5a78870842e132dcaad510b45fe
      image: docker.io/bitnami/nginx-ingress-controller:1.5.1-debian-11-r5
      imageID: docker.io/bitnami/nginx-ingress-controller@sha256:8a041dcafee6a83afbc3840395628d733a5135b845011d3d1a173f38819fa711
      lastState:
        terminated:
          containerID: containerd://add2c8ce247f4c23dd6722de2611c75818f9fa778fddd43dbb66649992ff8068
          exitCode: 137
          finishedAt: "2023-01-11T18:55:24Z"
          reason: Error
          startedAt: "2023-01-11T18:48:33Z"
      name: controller
      ready: true
      restartCount: 37
      started: true
      state:
        running:
          startedAt: "2023-01-11T18:55:26Z"
    hostIP: 10.1.32.64
    phase: Running
    podIP: 10.1.32.83
    podIPs:
    - ip: 10.1.32.83
    qosClass: BestEffort
    startTime: "2023-01-05T18:12:27Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2023-01-05T18:12:26Z"
    generateName: lab-devops-ingress-nginx-ingress-controller-default-backend-5dd64f8d8b-
    labels:
      app.kubernetes.io/component: default-backend
      app.kubernetes.io/instance: lab-devops-ingress
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: nginx-ingress-controller
      helm.sh/chart: nginx-ingress-controller-9.3.22
      pod-template-hash: 5dd64f8d8b
    name: lab-devops-ingress-nginx-ingress-controller-default-backenqdnzd
    namespace: components
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: lab-devops-ingress-nginx-ingress-controller-default-backend-5dd64f8d8b
      uid: e44b6537-691b-41b7-a470-7e389182e40d
    resourceVersion: "540225215"
    uid: 6c73f757-a828-43f6-ac61-959073dc94bb
  spec:
    affinity:
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
        - podAffinityTerm:
            labelSelector:
              matchLabels:
                app.kubernetes.io/component: default-backend
                app.kubernetes.io/instance: lab-devops-ingress
                app.kubernetes.io/name: nginx-ingress-controller
            topologyKey: kubernetes.io/hostname
          weight: 1
    containers:
    - env:
      - name: NEW_RELIC_METADATA_KUBERNETES_CLUSTER_NAME
        value: devqa
      - name: NEW_RELIC_METADATA_KUBERNETES_NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: NEW_RELIC_METADATA_KUBERNETES_NAMESPACE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: NEW_RELIC_METADATA_KUBERNETES_POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: NEW_RELIC_METADATA_KUBERNETES_CONTAINER_NAME
        value: default-backend
      - name: NEW_RELIC_METADATA_KUBERNETES_CONTAINER_IMAGE_NAME
        value: docker.io/bitnami/nginx:1.22.1-debian-11-r7
      - name: NEW_RELIC_METADATA_KUBERNETES_DEPLOYMENT_NAME
        value: lab-devops-ingress-nginx-ingress-controller-default-backend
      image: docker.io/bitnami/nginx:1.22.1-debian-11-r7
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /healthz
          port: http
          scheme: HTTP
        initialDelaySeconds: 30
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      name: default-backend
      ports:
      - containerPort: 8080
        name: http
        protocol: TCP
      readinessProbe:
        failureThreshold: 6
        httpGet:
          path: /healthz
          port: http
          scheme: HTTP
        periodSeconds: 5
        successThreshold: 1
        timeoutSeconds: 5
      resources: {}
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /opt/bitnami/nginx/conf/bitnami/
        name: nginx-config-volume
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-shr7f
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-devqathird-41913477-vmss00000c
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 1001
    serviceAccount: lab-devops-ingress-nginx-ingress-controller
    serviceAccountName: lab-devops-ingress-nginx-ingress-controller
    terminationGracePeriodSeconds: 60
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - configMap:
        defaultMode: 420
        items:
        - key: defaultBackend.conf
          path: defaultBackend.conf
        name: lab-devops-ingress-nginx-ingress-controller-default-backend
      name: nginx-config-volume
    - name: kube-api-access-shr7f
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2023-01-05T18:12:26Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2023-01-05T18:13:00Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2023-01-05T18:13:00Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2023-01-05T18:12:26Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://66751846f2d2a67e23c201e3a4ce48a0a85bbbd7dd4c6920255349594d95c89f
      image: docker.io/bitnami/nginx:1.22.1-debian-11-r7
      imageID: docker.io/bitnami/nginx@sha256:d3a55724c7f2d6dcf7f014f6a0703da2dd9db9f0b48c47631b9f949ddc2cbf7b
      lastState: {}
      name: default-backend
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2023-01-05T18:12:58Z"
    hostIP: 10.1.32.64
    phase: Running
    podIP: 10.1.32.81
    podIPs:
    - ip: 10.1.32.81
    qosClass: BestEffort
    startTime: "2023-01-05T18:12:26Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2022-12-05T19:16:16Z"
    generateName: main-ingress-nginx-ingress-controller-5fff9db787-
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: main-ingress
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: nginx-ingress-controller
      helm.sh/chart: nginx-ingress-controller-8.0.11
      pod-template-hash: 5fff9db787
    name: main-ingress-nginx-ingress-controller-5fff9db787-ptvsj
    namespace: components
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: main-ingress-nginx-ingress-controller-5fff9db787
      uid: 5b34fe87-8a98-438f-9ebc-6ba451e2e7ec
    resourceVersion: "564973521"
    uid: 7f5fb43a-2513-4d8f-839f-71570151c3ff
  spec:
    affinity:
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
        - podAffinityTerm:
            labelSelector:
              matchLabels:
                app.kubernetes.io/component: controller
                app.kubernetes.io/instance: main-ingress
                app.kubernetes.io/name: nginx-ingress-controller
            namespaces:
            - components
            topologyKey: kubernetes.io/hostname
          weight: 1
    containers:
    - args:
      - /nginx-ingress-controller
      - --default-backend-service=components/main-ingress-nginx-ingress-controller-default-backend
      - --election-id=ingress-controller-leader
      - --configmap=components/main-ingress-nginx-ingress-controller
      - --ingress-class=main-ingress
      env:
      - name: POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: NEW_RELIC_METADATA_KUBERNETES_CLUSTER_NAME
        value: devqa
      - name: NEW_RELIC_METADATA_KUBERNETES_NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: NEW_RELIC_METADATA_KUBERNETES_NAMESPACE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: NEW_RELIC_METADATA_KUBERNETES_POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: NEW_RELIC_METADATA_KUBERNETES_CONTAINER_NAME
        value: controller
      - name: NEW_RELIC_METADATA_KUBERNETES_CONTAINER_IMAGE_NAME
        value: docker.io/bitnami/nginx-ingress-controller:1.0.4-debian-10-r4
      - name: NEW_RELIC_METADATA_KUBERNETES_DEPLOYMENT_NAME
        value: main-ingress-nginx-ingress-controller
      image: docker.io/bitnami/nginx-ingress-controller:1.0.4-debian-10-r4
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /healthz
          port: 10254
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: controller
      ports:
      - containerPort: 80
        name: http
        protocol: TCP
      - containerPort: 443
        name: https
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /healthz
          port: 10254
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources: {}
      securityContext:
        allowPrivilegeEscalation: true
        capabilities:
          add:
          - NET_BIND_SERVICE
          drop:
          - ALL
        runAsUser: 1001
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-b58rk
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-devqathird-41913477-vmss000004
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 1001
    serviceAccount: main-ingress-nginx-ingress-controller
    serviceAccountName: main-ingress-nginx-ingress-controller
    terminationGracePeriodSeconds: 60
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-b58rk
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2022-12-05T19:16:16Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2023-01-03T16:58:29Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2023-01-03T16:58:29Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2022-12-05T19:16:16Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://e914dfbecede2747db654fbf0d128e37240beb19bb9389b8508e65d2114ce900
      image: docker.io/bitnami/nginx-ingress-controller:1.0.4-debian-10-r4
      imageID: docker.io/bitnami/nginx-ingress-controller@sha256:ccd251f72519ab8f86ddfcea0213706325a160f77ea3902818ff0bcd0aeefd02
      lastState:
        terminated:
          containerID: containerd://674985b9f5dd21933f98e623174c495f934a7e6f7144e7a5737d60b3d05869a6
          exitCode: 255
          finishedAt: "2023-01-03T16:57:25Z"
          reason: Unknown
          startedAt: "2022-12-05T19:16:22Z"
      name: controller
      ready: true
      restartCount: 1
      started: true
      state:
        running:
          startedAt: "2023-01-03T16:57:50Z"
    hostIP: 10.1.32.35
    phase: Running
    podIP: 10.1.32.37
    podIPs:
    - ip: 10.1.32.37
    qosClass: BestEffort
    startTime: "2022-12-05T19:16:16Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2023-01-05T18:12:28Z"
    generateName: main-ingress-nginx-ingress-controller-5fff9db787-
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: main-ingress
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: nginx-ingress-controller
      helm.sh/chart: nginx-ingress-controller-8.0.11
      pod-template-hash: 5fff9db787
    name: main-ingress-nginx-ingress-controller-5fff9db787-stpsr
    namespace: components
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: main-ingress-nginx-ingress-controller-5fff9db787
      uid: 5b34fe87-8a98-438f-9ebc-6ba451e2e7ec
    resourceVersion: "540225434"
    uid: 614887d4-5f1c-4636-b26f-2818ec84b2da
  spec:
    affinity:
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
        - podAffinityTerm:
            labelSelector:
              matchLabels:
                app.kubernetes.io/component: controller
                app.kubernetes.io/instance: main-ingress
                app.kubernetes.io/name: nginx-ingress-controller
            namespaces:
            - components
            topologyKey: kubernetes.io/hostname
          weight: 1
    containers:
    - args:
      - /nginx-ingress-controller
      - --default-backend-service=components/main-ingress-nginx-ingress-controller-default-backend
      - --election-id=ingress-controller-leader
      - --configmap=components/main-ingress-nginx-ingress-controller
      - --ingress-class=main-ingress
      env:
      - name: POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: NEW_RELIC_METADATA_KUBERNETES_CLUSTER_NAME
        value: devqa
      - name: NEW_RELIC_METADATA_KUBERNETES_NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: NEW_RELIC_METADATA_KUBERNETES_NAMESPACE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: NEW_RELIC_METADATA_KUBERNETES_POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: NEW_RELIC_METADATA_KUBERNETES_CONTAINER_NAME
        value: controller
      - name: NEW_RELIC_METADATA_KUBERNETES_CONTAINER_IMAGE_NAME
        value: docker.io/bitnami/nginx-ingress-controller:1.0.4-debian-10-r4
      - name: NEW_RELIC_METADATA_KUBERNETES_DEPLOYMENT_NAME
        value: main-ingress-nginx-ingress-controller
      image: docker.io/bitnami/nginx-ingress-controller:1.0.4-debian-10-r4
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /healthz
          port: 10254
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: controller
      ports:
      - containerPort: 80
        name: http
        protocol: TCP
      - containerPort: 443
        name: https
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /healthz
          port: 10254
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources: {}
      securityContext:
        allowPrivilegeEscalation: true
        capabilities:
          add:
          - NET_BIND_SERVICE
          drop:
          - ALL
        runAsUser: 1001
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-jxd98
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-devqathird-41913477-vmss00000c
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 1001
    serviceAccount: main-ingress-nginx-ingress-controller
    serviceAccountName: main-ingress-nginx-ingress-controller
    terminationGracePeriodSeconds: 60
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-jxd98
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2023-01-05T18:12:28Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2023-01-11T18:55:39Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2023-01-11T18:55:39Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2023-01-05T18:12:28Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://ad0edb93ce50e0bb8cbda9edc7d4a4dc004bd88179a5954e98565ca49e61f3a9
      image: docker.io/bitnami/nginx-ingress-controller:1.0.4-debian-10-r4
      imageID: docker.io/bitnami/nginx-ingress-controller@sha256:ccd251f72519ab8f86ddfcea0213706325a160f77ea3902818ff0bcd0aeefd02
      lastState:
        terminated:
          containerID: containerd://aad1865a7f8e3389c25b597061eda4d19352ca469b4b880c65f41ee92ab88139
          exitCode: 137
          finishedAt: "2023-01-11T18:55:23Z"
          reason: Error
          startedAt: "2023-01-11T12:44:52Z"
      name: controller
      ready: true
      restartCount: 22
      started: true
      state:
        running:
          startedAt: "2023-01-11T18:55:25Z"
    hostIP: 10.1.32.64
    phase: Running
    podIP: 10.1.32.76
    podIPs:
    - ip: 10.1.32.76
    qosClass: BestEffort
    startTime: "2023-01-05T18:12:28Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2023-01-05T12:40:24Z"
    generateName: main-ingress-nginx-ingress-controller-default-backend-699d94dd57-
    labels:
      app.kubernetes.io/component: default-backend
      app.kubernetes.io/instance: main-ingress
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: nginx-ingress-controller
      helm.sh/chart: nginx-ingress-controller-8.0.11
      pod-template-hash: 699d94dd57
    name: main-ingress-nginx-ingress-controller-default-backend-699d5k6bc
    namespace: components
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: main-ingress-nginx-ingress-controller-default-backend-699d94dd57
      uid: f1e7554f-84c7-4f10-a966-f3a6cab4efd3
    resourceVersion: "544848877"
    uid: b4b3c758-55e1-4da4-bef5-07a7b1667e79
  spec:
    affinity:
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
        - podAffinityTerm:
            labelSelector:
              matchLabels:
                app.kubernetes.io/component: default-backend
                app.kubernetes.io/instance: main-ingress
                app.kubernetes.io/name: nginx-ingress-controller
            namespaces:
            - components
            topologyKey: kubernetes.io/hostname
          weight: 1
    containers:
    - image: docker.io/bitnami/nginx:1.21.3-debian-10-r37
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /healthz
          port: http
          scheme: HTTP
        initialDelaySeconds: 30
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      name: default-backend
      ports:
      - containerPort: 8080
        name: http
        protocol: TCP
      readinessProbe:
        failureThreshold: 6
        httpGet:
          path: /healthz
          port: http
          scheme: HTTP
        periodSeconds: 5
        successThreshold: 1
        timeoutSeconds: 5
      resources: {}
      securityContext:
        runAsUser: 1001
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /opt/bitnami/nginx/conf/bitnami/
        name: nginx-config-volume
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-thtjq
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-devqasecond-35848152-vmss00006f
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 1001
    serviceAccount: main-ingress-nginx-ingress-controller
    serviceAccountName: main-ingress-nginx-ingress-controller
    terminationGracePeriodSeconds: 60
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - configMap:
        defaultMode: 420
        items:
        - key: defaultBackend.conf
          path: defaultBackend.conf
        name: main-ingress-nginx-ingress-controller-default-backend
      name: nginx-config-volume
    - name: kube-api-access-thtjq
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2023-01-05T12:40:24Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2023-01-05T12:40:31Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2023-01-05T12:40:31Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2023-01-05T12:40:24Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://1ac28326f8b8d23e3d0d9989cc970c4a7c49124168fb8e4193e3c6acf89eea84
      image: docker.io/bitnami/nginx:1.21.3-debian-10-r37
      imageID: docker.io/bitnami/nginx@sha256:1bb106219a72603646f9ddf86c221845237115423aa6e1802169a0d483613233
      lastState: {}
      name: default-backend
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2023-01-05T12:40:30Z"
    hostIP: 10.1.33.17
    phase: Running
    podIP: 10.1.33.35
    podIPs:
    - ip: 10.1.33.35
    qosClass: BestEffort
    startTime: "2023-01-05T12:40:24Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      kubectl.kubernetes.io/restartedAt: "2022-12-02T10:57:39-03:00"
    creationTimestamp: "2022-12-15T19:55:24Z"
    generateName: qa-ingress-nginx-ingress-controller-69fbc65977-
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: qa-ingress
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: nginx-ingress-controller
      helm.sh/chart: nginx-ingress-controller-9.3.22
      pod-template-hash: 69fbc65977
    name: qa-ingress-nginx-ingress-controller-69fbc65977-bw7gn
    namespace: components
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: qa-ingress-nginx-ingress-controller-69fbc65977
      uid: 67c24132-bcee-43a2-b7a9-a3080a84123a
    resourceVersion: "564971756"
    uid: 7515f748-9951-4c3b-a6dd-085337becc82
  spec:
    affinity:
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
        - podAffinityTerm:
            labelSelector:
              matchLabels:
                app.kubernetes.io/component: controller
                app.kubernetes.io/instance: qa-ingress
                app.kubernetes.io/name: nginx-ingress-controller
            topologyKey: kubernetes.io/hostname
          weight: 1
    containers:
    - args:
      - /nginx-ingress-controller
      - --default-backend-service=components/qa-ingress-nginx-ingress-controller-default-backend
      - --election-id=ingress-controller-leader
      - --controller-class=k8s.io/ingress-nginx
      - --configmap=components/qa-ingress-nginx-ingress-controller
      - --tcp-services-configmap=components/qa-ingress-nginx-ingress-controller-tcp
      - --ingress-class=qa-ingress
      - --v=1
      env:
      - name: POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: NEW_RELIC_METADATA_KUBERNETES_CLUSTER_NAME
        value: devqa
      - name: NEW_RELIC_METADATA_KUBERNETES_NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: NEW_RELIC_METADATA_KUBERNETES_NAMESPACE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: NEW_RELIC_METADATA_KUBERNETES_POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: NEW_RELIC_METADATA_KUBERNETES_CONTAINER_NAME
        value: controller
      - name: NEW_RELIC_METADATA_KUBERNETES_CONTAINER_IMAGE_NAME
        value: docker.io/bitnami/nginx-ingress-controller:1.5.1-debian-11-r5
      - name: NEW_RELIC_METADATA_KUBERNETES_DEPLOYMENT_NAME
        value: qa-ingress-nginx-ingress-controller
      image: docker.io/bitnami/nginx-ingress-controller:1.5.1-debian-11-r5
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /healthz
          port: 10254
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: controller
      ports:
      - containerPort: 80
        name: http
        protocol: TCP
      - containerPort: 443
        name: https
        protocol: TCP
      - containerPort: 15672
        name: 15672-tcp
        protocol: TCP
      - containerPort: 1883
        name: 1883-tcp
        protocol: TCP
      - containerPort: 5671
        name: 5671-tcp
        protocol: TCP
      - containerPort: 5672
        name: 5672-tcp
        protocol: TCP
      - containerPort: 6379
        name: 6379-tcp
        protocol: TCP
      - containerPort: 8883
        name: 8883-tcp
        protocol: TCP
      - containerPort: 9000
        name: 9000-tcp
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /healthz
          port: 10254
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources: {}
      securityContext:
        allowPrivilegeEscalation: true
        capabilities:
          add:
          - NET_BIND_SERVICE
          drop:
          - ALL
        runAsNonRoot: true
        runAsUser: 1001
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-wj4cn
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-devqathird-41913477-vmss000004
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 1001
    serviceAccount: qa-ingress-nginx-ingress-controller
    serviceAccountName: qa-ingress-nginx-ingress-controller
    terminationGracePeriodSeconds: 60
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-wj4cn
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2022-12-15T19:55:24Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2023-01-12T14:26:51Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2023-01-12T14:26:51Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2022-12-15T19:55:24Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://4c18aeb59982b5d80cf85b582157cef30af9e1b8bb8091f5934958a0c8bbef64
      image: docker.io/bitnami/nginx-ingress-controller:1.5.1-debian-11-r5
      imageID: docker.io/bitnami/nginx-ingress-controller@sha256:8a041dcafee6a83afbc3840395628d733a5135b845011d3d1a173f38819fa711
      lastState:
        terminated:
          containerID: containerd://b268bd19e25da5f5f1bc5612954125ff21c1809a79149e7eb7ba816ac7e58cd1
          exitCode: 0
          finishedAt: "2023-01-12T14:26:40Z"
          reason: Completed
          startedAt: "2023-01-03T16:57:52Z"
      name: controller
      ready: true
      restartCount: 2
      started: true
      state:
        running:
          startedAt: "2023-01-12T14:26:41Z"
    hostIP: 10.1.32.35
    phase: Running
    podIP: 10.1.32.62
    podIPs:
    - ip: 10.1.32.62
    qosClass: BestEffort
    startTime: "2022-12-15T19:55:24Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      kubectl.kubernetes.io/restartedAt: "2022-12-02T10:57:39-03:00"
    creationTimestamp: "2023-01-05T18:23:02Z"
    generateName: qa-ingress-nginx-ingress-controller-69fbc65977-
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: qa-ingress
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: nginx-ingress-controller
      helm.sh/chart: nginx-ingress-controller-9.3.22
      pod-template-hash: 69fbc65977
    name: qa-ingress-nginx-ingress-controller-69fbc65977-glp65
    namespace: components
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: qa-ingress-nginx-ingress-controller-69fbc65977
      uid: 67c24132-bcee-43a2-b7a9-a3080a84123a
    resourceVersion: "540225323"
    uid: 6f47d987-7a3f-4ef4-bc84-980a8c5956f7
  spec:
    affinity:
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
        - podAffinityTerm:
            labelSelector:
              matchLabels:
                app.kubernetes.io/component: controller
                app.kubernetes.io/instance: qa-ingress
                app.kubernetes.io/name: nginx-ingress-controller
            topologyKey: kubernetes.io/hostname
          weight: 1
    containers:
    - args:
      - /nginx-ingress-controller
      - --default-backend-service=components/qa-ingress-nginx-ingress-controller-default-backend
      - --election-id=ingress-controller-leader
      - --controller-class=k8s.io/ingress-nginx
      - --configmap=components/qa-ingress-nginx-ingress-controller
      - --tcp-services-configmap=components/qa-ingress-nginx-ingress-controller-tcp
      - --ingress-class=qa-ingress
      - --v=1
      env:
      - name: POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      image: docker.io/bitnami/nginx-ingress-controller:1.5.1-debian-11-r5
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /healthz
          port: 10254
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: controller
      ports:
      - containerPort: 80
        name: http
        protocol: TCP
      - containerPort: 443
        name: https
        protocol: TCP
      - containerPort: 15672
        name: 15672-tcp
        protocol: TCP
      - containerPort: 1883
        name: 1883-tcp
        protocol: TCP
      - containerPort: 5671
        name: 5671-tcp
        protocol: TCP
      - containerPort: 5672
        name: 5672-tcp
        protocol: TCP
      - containerPort: 6379
        name: 6379-tcp
        protocol: TCP
      - containerPort: 8883
        name: 8883-tcp
        protocol: TCP
      - containerPort: 9000
        name: 9000-tcp
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /healthz
          port: 10254
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources: {}
      securityContext:
        allowPrivilegeEscalation: true
        capabilities:
          add:
          - NET_BIND_SERVICE
          drop:
          - ALL
        runAsNonRoot: true
        runAsUser: 1001
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-28s2l
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-devqathird-41913477-vmss00000c
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 1001
    serviceAccount: qa-ingress-nginx-ingress-controller
    serviceAccountName: qa-ingress-nginx-ingress-controller
    terminationGracePeriodSeconds: 60
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-28s2l
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2023-01-05T18:23:02Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2023-01-11T18:56:12Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2023-01-11T18:56:12Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2023-01-05T18:23:02Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://82fc436aacb06337e28e0ca3413fb334bab98862de5f73e7372e33bcc931f419
      image: docker.io/bitnami/nginx-ingress-controller:1.5.1-debian-11-r5
      imageID: docker.io/bitnami/nginx-ingress-controller@sha256:8a041dcafee6a83afbc3840395628d733a5135b845011d3d1a173f38819fa711
      lastState:
        terminated:
          containerID: containerd://66f50f70a664636a0a34120ae6e74ab90d911ff499caef5953c2046342d49496
          exitCode: 137
          finishedAt: "2023-01-11T18:55:53Z"
          reason: Error
          startedAt: "2023-01-11T12:44:51Z"
      name: controller
      ready: true
      restartCount: 34
      started: true
      state:
        running:
          startedAt: "2023-01-11T18:55:53Z"
    hostIP: 10.1.32.64
    phase: Running
    podIP: 10.1.32.66
    podIPs:
    - ip: 10.1.32.66
    qosClass: BestEffort
    startTime: "2023-01-05T18:23:02Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      kubectl.kubernetes.io/restartedAt: "2022-02-13T11:09:41-03:00"
    creationTimestamp: "2022-12-03T20:10:20Z"
    generateName: qa-ingress-nginx-ingress-controller-default-backend-6f85b66894-
    labels:
      app.kubernetes.io/component: default-backend
      app.kubernetes.io/instance: qa-ingress
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: nginx-ingress-controller
      helm.sh/chart: nginx-ingress-controller-9.3.22
      pod-template-hash: 6f85b66894
    name: qa-ingress-nginx-ingress-controller-default-backend-6f85b6j5gjv
    namespace: components
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: qa-ingress-nginx-ingress-controller-default-backend-6f85b66894
      uid: d48c2575-82b6-4c22-bd1b-fab18eaa4315
    resourceVersion: "493147976"
    uid: f09b4dd2-8257-4c34-9157-61c9f42d7826
  spec:
    affinity:
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
        - podAffinityTerm:
            labelSelector:
              matchLabels:
                app.kubernetes.io/component: default-backend
                app.kubernetes.io/instance: qa-ingress
                app.kubernetes.io/name: nginx-ingress-controller
            topologyKey: kubernetes.io/hostname
          weight: 1
    containers:
    - env:
      - name: NEW_RELIC_METADATA_KUBERNETES_CLUSTER_NAME
        value: devqa
      - name: NEW_RELIC_METADATA_KUBERNETES_NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: NEW_RELIC_METADATA_KUBERNETES_NAMESPACE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: NEW_RELIC_METADATA_KUBERNETES_POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: NEW_RELIC_METADATA_KUBERNETES_CONTAINER_NAME
        value: default-backend
      - name: NEW_RELIC_METADATA_KUBERNETES_CONTAINER_IMAGE_NAME
        value: docker.io/bitnami/nginx:1.22.1-debian-11-r7
      - name: NEW_RELIC_METADATA_KUBERNETES_DEPLOYMENT_NAME
        value: qa-ingress-nginx-ingress-controller-default-backend
      image: docker.io/bitnami/nginx:1.22.1-debian-11-r7
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /healthz
          port: http
          scheme: HTTP
        initialDelaySeconds: 30
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      name: default-backend
      ports:
      - containerPort: 8080
        name: http
        protocol: TCP
      readinessProbe:
        failureThreshold: 6
        httpGet:
          path: /healthz
          port: http
          scheme: HTTP
        periodSeconds: 5
        successThreshold: 1
        timeoutSeconds: 5
      resources: {}
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /opt/bitnami/nginx/conf/bitnami/
        name: nginx-config-volume
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-68zlf
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-devqathird-41913477-vmss000008
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 1001
    serviceAccount: qa-ingress-nginx-ingress-controller
    serviceAccountName: qa-ingress-nginx-ingress-controller
    terminationGracePeriodSeconds: 60
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - configMap:
        defaultMode: 420
        items:
        - key: defaultBackend.conf
          path: defaultBackend.conf
        name: qa-ingress-nginx-ingress-controller-default-backend
      name: nginx-config-volume
    - name: kube-api-access-68zlf
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2022-12-03T20:10:20Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2022-12-03T20:10:25Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2022-12-03T20:10:25Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2022-12-03T20:10:20Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://00f1f88ccbb27670a1837eaffaa5d132cfc87becfd69d32e9491938ce7052d1c
      image: docker.io/bitnami/nginx:1.22.1-debian-11-r7
      imageID: docker.io/bitnami/nginx@sha256:d3a55724c7f2d6dcf7f014f6a0703da2dd9db9f0b48c47631b9f949ddc2cbf7b
      lastState: {}
      name: default-backend
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2022-12-03T20:10:24Z"
    hostIP: 10.1.32.33
    phase: Running
    podIP: 10.1.32.120
    podIPs:
    - ip: 10.1.32.120
    qosClass: BestEffort
    startTime: "2022-12-03T20:10:20Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2022-12-03T19:31:48Z"
    generateName: reloader-reloader-67b489c94-
    labels:
      app: reloader-reloader
      app.kubernetes.io/managed-by: Helm
      chart: reloader-v0.0.87
      group: com.stakater.platform
      heritage: Helm
      pod-template-hash: 67b489c94
      provider: stakater
      release: reloader
      version: v0.0.77
    name: reloader-reloader-67b489c94-nhl5w
    namespace: components
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: reloader-reloader-67b489c94
      uid: eaf49036-fda0-4397-ab2f-f26e594a9f1f
    resourceVersion: "564971770"
    uid: bff3363e-416a-46b9-b9d3-d6e516837d24
  spec:
    containers:
    - env:
      - name: NEW_RELIC_METADATA_KUBERNETES_CLUSTER_NAME
        value: devqa
      - name: NEW_RELIC_METADATA_KUBERNETES_NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: NEW_RELIC_METADATA_KUBERNETES_NAMESPACE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: NEW_RELIC_METADATA_KUBERNETES_POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: NEW_RELIC_METADATA_KUBERNETES_CONTAINER_NAME
        value: reloader-reloader
      - name: NEW_RELIC_METADATA_KUBERNETES_CONTAINER_IMAGE_NAME
        value: stakater/reloader:v0.0.87
      - name: NEW_RELIC_METADATA_KUBERNETES_DEPLOYMENT_NAME
        value: reloader-reloader
      image: stakater/reloader:v0.0.87
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /metrics
          port: http
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: reloader-reloader
      ports:
      - containerPort: 9090
        name: http
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /metrics
          port: http
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-2877r
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-devqathird-41913477-vmss000004
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      runAsNonRoot: true
      runAsUser: 65534
    serviceAccount: reloader-reloader
    serviceAccountName: reloader-reloader
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-2877r
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2022-12-03T19:31:48Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2023-01-03T16:57:51Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2023-01-03T16:57:51Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2022-12-03T19:31:48Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://8546445dda858315ccd878e99083672dc166cc7c1fc1b44038922bb6708193a0
      image: docker.io/stakater/reloader:v0.0.87
      imageID: docker.io/stakater/reloader@sha256:4bd3d1138b818b021a8e12b2a6c3de6b1c2289ac93233d346276f6e5f03febf9
      lastState:
        terminated:
          containerID: containerd://564efb63afd7f051b29133beba01dd806400ababf92f08dfacc9dca9f9d58bf1
          exitCode: 255
          finishedAt: "2023-01-03T16:57:25Z"
          reason: Unknown
          startedAt: "2022-12-03T19:31:50Z"
      name: reloader-reloader
      ready: true
      restartCount: 1
      started: true
      state:
        running:
          startedAt: "2023-01-03T16:57:51Z"
    hostIP: 10.1.32.35
    phase: Running
    podIP: 10.1.32.41
    podIPs:
    - ip: 10.1.32.41
    qosClass: BestEffort
    startTime: "2022-12-03T19:31:48Z"
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      meta.helm.sh/release-name: cert-manager
      meta.helm.sh/release-namespace: components
    creationTimestamp: "2022-11-04T12:40:59Z"
    labels:
      app: cert-manager
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: cert-manager
      app.kubernetes.io/version: v1.10.1
      helm.sh/chart: cert-manager-v1.10.1
    name: cert-manager
    namespace: components
    resourceVersion: "502423370"
    uid: 7572ec59-0d8f-4eb1-a91f-62d5dc034f66
  spec:
    clusterIP: 10.0.164.137
    clusterIPs:
    - 10.0.164.137
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: tcp-prometheus-servicemonitor
      port: 9402
      protocol: TCP
      targetPort: 9402
    selector:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/name: cert-manager
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      meta.helm.sh/release-name: cert-manager
      meta.helm.sh/release-namespace: components
    creationTimestamp: "2022-11-04T12:41:00Z"
    labels:
      app: webhook
      app.kubernetes.io/component: webhook
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: webhook
      app.kubernetes.io/version: v1.10.1
      helm.sh/chart: cert-manager-v1.10.1
    name: cert-manager-webhook
    namespace: components
    resourceVersion: "502423375"
    uid: 4c6fb3f3-322e-4a59-92f8-fe20168df78f
  spec:
    clusterIP: 10.0.22.50
    clusterIPs:
    - 10.0.22.50
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: https
      port: 443
      protocol: TCP
      targetPort: https
    selector:
      app.kubernetes.io/component: webhook
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/name: webhook
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      field.cattle.io/publicEndpoints: '[{"addresses":["10.1.32.99"],"port":80,"protocol":"TCP","serviceName":"components:dev-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.99"],"port":443,"protocol":"TCP","serviceName":"components:dev-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.99"],"port":15672,"protocol":"TCP","serviceName":"components:dev-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.99"],"port":1883,"protocol":"TCP","serviceName":"components:dev-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.99"],"port":5671,"protocol":"TCP","serviceName":"components:dev-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.99"],"port":5672,"protocol":"TCP","serviceName":"components:dev-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.99"],"port":6379,"protocol":"TCP","serviceName":"components:dev-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.99"],"port":8883,"protocol":"TCP","serviceName":"components:dev-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.99"],"port":9000,"protocol":"TCP","serviceName":"components:dev-ingress-nginx-ingress-controller","allNodes":false}]'
      meta.helm.sh/release-name: dev-ingress
      meta.helm.sh/release-namespace: components
      service.beta.kubernetes.io/azure-load-balancer-internal: "true"
    creationTimestamp: "2021-06-08T19:30:39Z"
    finalizers:
    - service.kubernetes.io/load-balancer-cleanup
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: dev-ingress
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: nginx-ingress-controller
      helm.sh/chart: nginx-ingress-controller-9.3.22
    name: dev-ingress-nginx-ingress-controller
    namespace: components
    resourceVersion: "502585323"
    uid: 886da586-af70-493f-9ccf-9f015ce0f553
  spec:
    allocateLoadBalancerNodePorts: true
    clusterIP: 10.0.234.158
    clusterIPs:
    - 10.0.234.158
    externalTrafficPolicy: Cluster
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: http
      nodePort: 30151
      port: 80
      protocol: TCP
      targetPort: http
    - name: https
      nodePort: 31450
      port: 443
      protocol: TCP
      targetPort: https
    - name: 15672-tcp
      nodePort: 30006
      port: 15672
      protocol: TCP
      targetPort: 15672-tcp
    - name: 1883-tcp
      nodePort: 30469
      port: 1883
      protocol: TCP
      targetPort: 1883-tcp
    - name: 5671-tcp
      nodePort: 30361
      port: 5671
      protocol: TCP
      targetPort: 5671-tcp
    - name: 5672-tcp
      nodePort: 30239
      port: 5672
      protocol: TCP
      targetPort: 5672-tcp
    - name: 6379-tcp
      nodePort: 30827
      port: 6379
      protocol: TCP
      targetPort: 6379-tcp
    - name: 8883-tcp
      nodePort: 31647
      port: 8883
      protocol: TCP
      targetPort: 8883-tcp
    - name: 9000-tcp
      nodePort: 31846
      port: 9000
      protocol: TCP
      targetPort: 9000-tcp
    selector:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: dev-ingress
      app.kubernetes.io/name: nginx-ingress-controller
    sessionAffinity: None
    type: LoadBalancer
  status:
    loadBalancer:
      ingress:
      - ip: 10.1.32.99
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      meta.helm.sh/release-name: dev-ingress
      meta.helm.sh/release-namespace: components
    creationTimestamp: "2021-06-08T19:30:39Z"
    labels:
      app.kubernetes.io/component: default-backend
      app.kubernetes.io/instance: dev-ingress
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: nginx-ingress-controller
      helm.sh/chart: nginx-ingress-controller-9.3.22
    name: dev-ingress-nginx-ingress-controller-default-backend
    namespace: components
    resourceVersion: "493128550"
    uid: ae835dd3-117a-40bc-b546-65911beb099b
  spec:
    clusterIP: 10.0.201.103
    clusterIPs:
    - 10.0.201.103
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: http
    selector:
      app.kubernetes.io/component: default-backend
      app.kubernetes.io/instance: dev-ingress
      app.kubernetes.io/name: nginx-ingress-controller
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      field.cattle.io/publicEndpoints: '[{"addresses":["20.81.66.64"],"port":80,"protocol":"TCP","serviceName":"components:external-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["20.81.66.64"],"port":443,"protocol":"TCP","serviceName":"components:external-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["20.81.66.64"],"port":1883,"protocol":"TCP","serviceName":"components:external-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["20.81.66.64"],"port":8883,"protocol":"TCP","serviceName":"components:external-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["20.81.66.64"],"port":9000,"protocol":"TCP","serviceName":"components:external-ingress-nginx-ingress-controller","allNodes":false}]'
      meta.helm.sh/release-name: external-ingress
      meta.helm.sh/release-namespace: components
    creationTimestamp: "2021-08-16T14:06:29Z"
    finalizers:
    - service.kubernetes.io/load-balancer-cleanup
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: external-ingress
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: nginx-ingress-controller
      helm.sh/chart: nginx-ingress-controller-9.3.22
    name: external-ingress-nginx-ingress-controller
    namespace: components
    resourceVersion: "493128626"
    uid: e98fc021-497a-442b-ba4c-04de72338643
  spec:
    allocateLoadBalancerNodePorts: true
    clusterIP: 10.0.40.192
    clusterIPs:
    - 10.0.40.192
    externalTrafficPolicy: Cluster
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: http
      nodePort: 31921
      port: 80
      protocol: TCP
      targetPort: http
    - name: https
      nodePort: 31511
      port: 443
      protocol: TCP
      targetPort: https
    - name: 1883-tcp
      nodePort: 32767
      port: 1883
      protocol: TCP
      targetPort: 1883-tcp
    - name: 8883-tcp
      nodePort: 30650
      port: 8883
      protocol: TCP
      targetPort: 8883-tcp
    - name: 9000-tcp
      nodePort: 32504
      port: 9000
      protocol: TCP
      targetPort: 9000-tcp
    selector:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: external-ingress
      app.kubernetes.io/name: nginx-ingress-controller
    sessionAffinity: None
    type: LoadBalancer
  status:
    loadBalancer:
      ingress:
      - ip: 20.81.66.64
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      meta.helm.sh/release-name: external-ingress
      meta.helm.sh/release-namespace: components
    creationTimestamp: "2021-08-16T14:06:29Z"
    labels:
      app.kubernetes.io/component: default-backend
      app.kubernetes.io/instance: external-ingress
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: nginx-ingress-controller
      helm.sh/chart: nginx-ingress-controller-9.3.22
    name: external-ingress-nginx-ingress-controller-default-backend
    namespace: components
    resourceVersion: "493128656"
    uid: d23a6b06-8d34-4198-8e1b-f9d418c31b6b
  spec:
    clusterIP: 10.0.44.47
    clusterIPs:
    - 10.0.44.47
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: http
    selector:
      app.kubernetes.io/component: default-backend
      app.kubernetes.io/instance: external-ingress
      app.kubernetes.io/name: nginx-ingress-controller
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      field.cattle.io/publicEndpoints: '[{"addresses":["10.1.43.45"],"port":80,"protocol":"TCP","serviceName":"components:lab-devops-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.43.45"],"port":443,"protocol":"TCP","serviceName":"components:lab-devops-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.43.45"],"port":15672,"protocol":"TCP","serviceName":"components:lab-devops-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.43.45"],"port":1883,"protocol":"TCP","serviceName":"components:lab-devops-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.43.45"],"port":5671,"protocol":"TCP","serviceName":"components:lab-devops-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.43.45"],"port":5672,"protocol":"TCP","serviceName":"components:lab-devops-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.43.45"],"port":6379,"protocol":"TCP","serviceName":"components:lab-devops-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.43.45"],"port":8883,"protocol":"TCP","serviceName":"components:lab-devops-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.43.45"],"port":9000,"protocol":"TCP","serviceName":"components:lab-devops-ingress-nginx-ingress-controller","allNodes":false}]'
      meta.helm.sh/release-name: lab-devops-ingress
      meta.helm.sh/release-namespace: components
      service.beta.kubernetes.io/azure-load-balancer-internal: "true"
    creationTimestamp: "2022-02-01T11:10:18Z"
    finalizers:
    - service.kubernetes.io/load-balancer-cleanup
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: lab-devops-ingress
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: nginx-ingress-controller
      helm.sh/chart: nginx-ingress-controller-9.3.22
    name: lab-devops-ingress-nginx-ingress-controller
    namespace: components
    resourceVersion: "501513405"
    uid: 6877cc50-8765-4f38-a6b3-4c6399235d5c
  spec:
    allocateLoadBalancerNodePorts: true
    clusterIP: 10.0.40.89
    clusterIPs:
    - 10.0.40.89
    externalTrafficPolicy: Cluster
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: http
      nodePort: 32497
      port: 80
      protocol: TCP
      targetPort: http
    - name: https
      nodePort: 31297
      port: 443
      protocol: TCP
      targetPort: https
    - name: 15672-tcp
      nodePort: 31559
      port: 15672
      protocol: TCP
      targetPort: 15672-tcp
    - name: 1883-tcp
      nodePort: 30729
      port: 1883
      protocol: TCP
      targetPort: 1883-tcp
    - name: 5671-tcp
      nodePort: 30555
      port: 5671
      protocol: TCP
      targetPort: 5671-tcp
    - name: 5672-tcp
      nodePort: 31974
      port: 5672
      protocol: TCP
      targetPort: 5672-tcp
    - name: 6379-tcp
      nodePort: 31674
      port: 6379
      protocol: TCP
      targetPort: 6379-tcp
    - name: 8883-tcp
      nodePort: 32279
      port: 8883
      protocol: TCP
      targetPort: 8883-tcp
    - name: 9000-tcp
      nodePort: 31730
      port: 9000
      protocol: TCP
      targetPort: 9000-tcp
    selector:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: lab-devops-ingress
      app.kubernetes.io/name: nginx-ingress-controller
    sessionAffinity: None
    type: LoadBalancer
  status:
    loadBalancer:
      ingress:
      - ip: 10.1.43.45
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      meta.helm.sh/release-name: lab-devops-ingress
      meta.helm.sh/release-namespace: components
    creationTimestamp: "2022-02-01T11:10:18Z"
    labels:
      app.kubernetes.io/component: default-backend
      app.kubernetes.io/instance: lab-devops-ingress
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: nginx-ingress-controller
      helm.sh/chart: nginx-ingress-controller-9.3.22
    name: lab-devops-ingress-nginx-ingress-controller-default-backend
    namespace: components
    resourceVersion: "500765677"
    uid: 57090132-341a-46d7-9792-d7ee2464f653
  spec:
    clusterIP: 10.0.20.117
    clusterIPs:
    - 10.0.20.117
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: http
    selector:
      app.kubernetes.io/component: default-backend
      app.kubernetes.io/instance: lab-devops-ingress
      app.kubernetes.io/name: nginx-ingress-controller
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      field.cattle.io/publicEndpoints: '[{"addresses":["40.88.196.154"],"port":80,"protocol":"TCP","serviceName":"components:main-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["40.88.196.154"],"port":443,"protocol":"TCP","serviceName":"components:main-ingress-nginx-ingress-controller","allNodes":false}]'
      meta.helm.sh/release-name: main-ingress
      meta.helm.sh/release-namespace: components
    creationTimestamp: "2021-06-07T19:22:36Z"
    finalizers:
    - service.kubernetes.io/load-balancer-cleanup
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: main-ingress
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: nginx-ingress-controller
      helm.sh/chart: nginx-ingress-controller-8.0.11
    name: main-ingress-nginx-ingress-controller
    namespace: components
    resourceVersion: "372664839"
    uid: b9bb401c-494b-4f63-b0ce-13787ad52a22
  spec:
    allocateLoadBalancerNodePorts: true
    clusterIP: 10.0.107.120
    clusterIPs:
    - 10.0.107.120
    externalTrafficPolicy: Cluster
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: http
      nodePort: 31317
      port: 80
      protocol: TCP
      targetPort: http
    - name: https
      nodePort: 32584
      port: 443
      protocol: TCP
      targetPort: https
    selector:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: main-ingress
      app.kubernetes.io/name: nginx-ingress-controller
    sessionAffinity: None
    type: LoadBalancer
  status:
    loadBalancer:
      ingress:
      - ip: 40.88.196.154
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      meta.helm.sh/release-name: main-ingress
      meta.helm.sh/release-namespace: components
    creationTimestamp: "2021-06-07T19:22:36Z"
    labels:
      app.kubernetes.io/component: default-backend
      app.kubernetes.io/instance: main-ingress
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: nginx-ingress-controller
      helm.sh/chart: nginx-ingress-controller-8.0.11
    name: main-ingress-nginx-ingress-controller-default-backend
    namespace: components
    resourceVersion: "186900411"
    uid: f8f9824c-8aa4-4bf3-8c70-f4253f708a28
  spec:
    clusterIP: 10.0.31.235
    clusterIPs:
    - 10.0.31.235
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: http
    selector:
      app.kubernetes.io/component: default-backend
      app.kubernetes.io/instance: main-ingress
      app.kubernetes.io/name: nginx-ingress-controller
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      field.cattle.io/publicEndpoints: '[{"addresses":["10.1.32.98"],"port":80,"protocol":"TCP","serviceName":"components:qa-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.98"],"port":443,"protocol":"TCP","serviceName":"components:qa-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.98"],"port":15672,"protocol":"TCP","serviceName":"components:qa-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.98"],"port":1883,"protocol":"TCP","serviceName":"components:qa-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.98"],"port":5671,"protocol":"TCP","serviceName":"components:qa-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.98"],"port":5672,"protocol":"TCP","serviceName":"components:qa-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.98"],"port":6379,"protocol":"TCP","serviceName":"components:qa-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.98"],"port":8883,"protocol":"TCP","serviceName":"components:qa-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.98"],"port":9000,"protocol":"TCP","serviceName":"components:qa-ingress-nginx-ingress-controller","allNodes":false}]'
      meta.helm.sh/release-name: qa-ingress
      meta.helm.sh/release-namespace: components
      service.beta.kubernetes.io/azure-load-balancer-internal: "true"
    creationTimestamp: "2021-06-07T19:23:10Z"
    finalizers:
    - service.kubernetes.io/load-balancer-cleanup
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: qa-ingress
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: nginx-ingress-controller
      helm.sh/chart: nginx-ingress-controller-9.3.22
    name: qa-ingress-nginx-ingress-controller
    namespace: components
    resourceVersion: "502590378"
    uid: a99ef701-8b71-4e22-911e-7e8a4e64d110
  spec:
    allocateLoadBalancerNodePorts: true
    clusterIP: 10.0.248.186
    clusterIPs:
    - 10.0.248.186
    externalTrafficPolicy: Cluster
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: http
      nodePort: 30945
      port: 80
      protocol: TCP
      targetPort: http
    - name: https
      nodePort: 30078
      port: 443
      protocol: TCP
      targetPort: https
    - name: 15672-tcp
      nodePort: 31401
      port: 15672
      protocol: TCP
      targetPort: 15672-tcp
    - name: 1883-tcp
      nodePort: 32437
      port: 1883
      protocol: TCP
      targetPort: 1883-tcp
    - name: 5671-tcp
      nodePort: 30519
      port: 5671
      protocol: TCP
      targetPort: 5671-tcp
    - name: 5672-tcp
      nodePort: 31243
      port: 5672
      protocol: TCP
      targetPort: 5672-tcp
    - name: 6379-tcp
      nodePort: 32480
      port: 6379
      protocol: TCP
      targetPort: 6379-tcp
    - name: 8883-tcp
      nodePort: 30651
      port: 8883
      protocol: TCP
      targetPort: 8883-tcp
    - name: 9000-tcp
      nodePort: 32165
      port: 9000
      protocol: TCP
      targetPort: 9000-tcp
    selector:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: qa-ingress
      app.kubernetes.io/name: nginx-ingress-controller
    sessionAffinity: None
    type: LoadBalancer
  status:
    loadBalancer:
      ingress:
      - ip: 10.1.32.98
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      meta.helm.sh/release-name: qa-ingress
      meta.helm.sh/release-namespace: components
    creationTimestamp: "2021-06-07T19:23:09Z"
    labels:
      app.kubernetes.io/component: default-backend
      app.kubernetes.io/instance: qa-ingress
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: nginx-ingress-controller
      helm.sh/chart: nginx-ingress-controller-9.3.22
    name: qa-ingress-nginx-ingress-controller-default-backend
    namespace: components
    resourceVersion: "493131332"
    uid: 476b271b-e484-4974-bfce-c1dccdc7405d
  spec:
    clusterIP: 10.0.181.60
    clusterIPs:
    - 10.0.181.60
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: http
    selector:
      app.kubernetes.io/component: default-backend
      app.kubernetes.io/instance: qa-ingress
      app.kubernetes.io/name: nginx-ingress-controller
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "5"
      meta.helm.sh/release-name: cert-manager
      meta.helm.sh/release-namespace: components
    creationTimestamp: "2022-11-04T12:41:00Z"
    generation: 5
    labels:
      app: cert-manager
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: cert-manager
      app.kubernetes.io/version: v1.10.1
      helm.sh/chart: cert-manager-v1.10.1
    name: cert-manager
    namespace: components
    resourceVersion: "564967849"
    uid: 25a6d96a-41ea-4466-8d84-cf47383e3ba1
  spec:
    progressDeadlineSeconds: 600
    replicas: 2
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: cert-manager
        app.kubernetes.io/name: cert-manager
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          prometheus.io/path: /metrics
          prometheus.io/port: "9402"
          prometheus.io/scrape: "true"
        creationTimestamp: null
        labels:
          app: cert-manager
          app.kubernetes.io/component: controller
          app.kubernetes.io/instance: cert-manager
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: cert-manager
          app.kubernetes.io/version: v1.10.1
          helm.sh/chart: cert-manager-v1.10.1
      spec:
        containers:
        - args:
          - --v=2
          - --cluster-resource-namespace=$(POD_NAMESPACE)
          - --leader-election-namespace=qa
          - --dns01-recursive-nameservers-only
          - --dns01-recursive-nameservers=1.1.1.1:53
          env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: quay.io/jetstack/cert-manager-controller:v1.10.1
          imagePullPolicy: IfNotPresent
          name: cert-manager-controller
          ports:
          - containerPort: 9402
            name: http-metrics
            protocol: TCP
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: cert-manager
        serviceAccountName: cert-manager
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 2
    conditions:
    - lastTransitionTime: "2022-11-04T12:41:00Z"
      lastUpdateTime: "2023-01-05T21:23:30Z"
      message: ReplicaSet "cert-manager-f54dd4d7b" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2023-02-04T21:15:19Z"
      lastUpdateTime: "2023-02-04T21:15:19Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 5
    readyReplicas: 2
    replicas: 2
    updatedReplicas: 2
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "5"
      meta.helm.sh/release-name: cert-manager
      meta.helm.sh/release-namespace: components
    creationTimestamp: "2022-11-04T12:41:00Z"
    generation: 5
    labels:
      app: cainjector
      app.kubernetes.io/component: cainjector
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: cainjector
      app.kubernetes.io/version: v1.10.1
      helm.sh/chart: cert-manager-v1.10.1
    name: cert-manager-cainjector
    namespace: components
    resourceVersion: "564967851"
    uid: 851817cf-07d1-4b3e-92ca-b472ec7d4d58
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/component: cainjector
        app.kubernetes.io/instance: cert-manager
        app.kubernetes.io/name: cainjector
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: cainjector
          app.kubernetes.io/component: cainjector
          app.kubernetes.io/instance: cert-manager
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: cainjector
          app.kubernetes.io/version: v1.10.1
          helm.sh/chart: cert-manager-v1.10.1
      spec:
        containers:
        - args:
          - --v=2
          - --leader-election-namespace=qa
          env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: quay.io/jetstack/cert-manager-cainjector:v1.10.1
          imagePullPolicy: IfNotPresent
          name: cert-manager-cainjector
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: cert-manager-cainjector
        serviceAccountName: cert-manager-cainjector
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2022-11-04T12:41:00Z"
      lastUpdateTime: "2023-01-05T21:23:28Z"
      message: ReplicaSet "cert-manager-cainjector-6b76846899" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2023-02-04T21:15:19Z"
      lastUpdateTime: "2023-02-04T21:15:19Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 5
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "3"
      meta.helm.sh/release-name: cert-manager
      meta.helm.sh/release-namespace: components
    creationTimestamp: "2022-11-04T12:41:00Z"
    generation: 3
    labels:
      app: webhook
      app.kubernetes.io/component: webhook
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: webhook
      app.kubernetes.io/version: v1.10.1
      helm.sh/chart: cert-manager-v1.10.1
    name: cert-manager-webhook
    namespace: components
    resourceVersion: "531171550"
    uid: 69927bb5-2ebe-40d6-a569-215aa4f49528
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/component: webhook
        app.kubernetes.io/instance: cert-manager
        app.kubernetes.io/name: webhook
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: webhook
          app.kubernetes.io/component: webhook
          app.kubernetes.io/instance: cert-manager
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: webhook
          app.kubernetes.io/version: v1.10.1
          helm.sh/chart: cert-manager-v1.10.1
      spec:
        containers:
        - args:
          - --v=2
          - --secure-port=10250
          - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
          - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
          - --dynamic-serving-dns-names=cert-manager-webhook
          - --dynamic-serving-dns-names=cert-manager-webhook.$(POD_NAMESPACE)
          - --dynamic-serving-dns-names=cert-manager-webhook.$(POD_NAMESPACE).svc
          env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: quay.io/jetstack/cert-manager-webhook:v1.10.1
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /livez
              port: 6080
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: cert-manager-webhook
          ports:
          - containerPort: 10250
            name: https
            protocol: TCP
          - containerPort: 6080
            name: healthcheck
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 6080
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: cert-manager-webhook
        serviceAccountName: cert-manager-webhook
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2022-11-04T12:41:00Z"
      lastUpdateTime: "2023-01-03T13:07:48Z"
      message: ReplicaSet "cert-manager-webhook-d77bbf4cb" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2023-01-12T15:27:43Z"
      lastUpdateTime: "2023-01-12T15:27:43Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 3
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "47"
      field.cattle.io/publicEndpoints: '[{"addresses":["10.1.32.99"],"port":80,"protocol":"TCP","serviceName":"components:dev-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.99"],"port":443,"protocol":"TCP","serviceName":"components:dev-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.99"],"port":15672,"protocol":"TCP","serviceName":"components:dev-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.99"],"port":1883,"protocol":"TCP","serviceName":"components:dev-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.99"],"port":5671,"protocol":"TCP","serviceName":"components:dev-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.99"],"port":5672,"protocol":"TCP","serviceName":"components:dev-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.99"],"port":6379,"protocol":"TCP","serviceName":"components:dev-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.99"],"port":8883,"protocol":"TCP","serviceName":"components:dev-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.99"],"port":9000,"protocol":"TCP","serviceName":"components:dev-ingress-nginx-ingress-controller","allNodes":false}]'
      meta.helm.sh/release-name: dev-ingress
      meta.helm.sh/release-namespace: components
    creationTimestamp: "2021-06-08T19:30:39Z"
    generation: 58
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: dev-ingress
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: nginx-ingress-controller
      helm.sh/chart: nginx-ingress-controller-9.3.22
    name: dev-ingress-nginx-ingress-controller
    namespace: components
    resourceVersion: "564971776"
    uid: aeb976ac-8ea7-43c6-9ed1-03df10a711b7
  spec:
    progressDeadlineSeconds: 600
    replicas: 2
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: dev-ingress
        app.kubernetes.io/name: nginx-ingress-controller
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/restartedAt: "2022-08-01T16:19:05-03:00"
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: controller
          app.kubernetes.io/instance: dev-ingress
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: nginx-ingress-controller
          helm.sh/chart: nginx-ingress-controller-9.3.22
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/component: controller
                    app.kubernetes.io/instance: dev-ingress
                    app.kubernetes.io/name: nginx-ingress-controller
                topologyKey: kubernetes.io/hostname
              weight: 1
        containers:
        - args:
          - /nginx-ingress-controller
          - --default-backend-service=components/dev-ingress-nginx-ingress-controller-default-backend
          - --election-id=ingress-controller-leader
          - --controller-class=k8s.io/ingress-nginx
          - --configmap=components/dev-ingress-nginx-ingress-controller
          - --tcp-services-configmap=components/dev-ingress-nginx-ingress-controller-tcp
          - --ingress-class=dev-ingress
          - --v=1
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: docker.io/bitnami/nginx-ingress-controller:1.5.1-debian-11-r5
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: controller
          ports:
          - containerPort: 80
            name: http
            protocol: TCP
          - containerPort: 443
            name: https
            protocol: TCP
          - containerPort: 15672
            name: 15672-tcp
            protocol: TCP
          - containerPort: 1883
            name: 1883-tcp
            protocol: TCP
          - containerPort: 5671
            name: 5671-tcp
            protocol: TCP
          - containerPort: 5672
            name: 5672-tcp
            protocol: TCP
          - containerPort: 6379
            name: 6379-tcp
            protocol: TCP
          - containerPort: 8883
            name: 8883-tcp
            protocol: TCP
          - containerPort: 9000
            name: 9000-tcp
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          securityContext:
            allowPrivilegeEscalation: true
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            runAsNonRoot: true
            runAsUser: 1001
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1001
        serviceAccount: dev-ingress-nginx-ingress-controller
        serviceAccountName: dev-ingress-nginx-ingress-controller
        terminationGracePeriodSeconds: 60
  status:
    availableReplicas: 2
    conditions:
    - lastTransitionTime: "2022-12-02T11:57:43Z"
      lastUpdateTime: "2022-12-15T18:40:34Z"
      message: ReplicaSet "dev-ingress-nginx-ingress-controller-6bffb6c68d" has successfully
        progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2023-02-04T21:18:24Z"
      lastUpdateTime: "2023-02-04T21:18:24Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 58
    readyReplicas: 2
    replicas: 2
    updatedReplicas: 2
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "7"
      meta.helm.sh/release-name: dev-ingress
      meta.helm.sh/release-namespace: components
    creationTimestamp: "2021-06-08T19:30:39Z"
    generation: 7
    labels:
      app.kubernetes.io/component: default-backend
      app.kubernetes.io/instance: dev-ingress
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: nginx-ingress-controller
      helm.sh/chart: nginx-ingress-controller-9.3.22
    name: dev-ingress-nginx-ingress-controller-default-backend
    namespace: components
    resourceVersion: "544849078"
    uid: 9d2ba9ae-34bc-4dba-8b95-1beadfe81109
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/component: default-backend
        app.kubernetes.io/instance: dev-ingress
        app.kubernetes.io/name: nginx-ingress-controller
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/restartedAt: "2022-01-31T15:52:04-03:00"
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: default-backend
          app.kubernetes.io/instance: dev-ingress
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: nginx-ingress-controller
          helm.sh/chart: nginx-ingress-controller-9.3.22
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/component: default-backend
                    app.kubernetes.io/instance: dev-ingress
                    app.kubernetes.io/name: nginx-ingress-controller
                topologyKey: kubernetes.io/hostname
              weight: 1
        containers:
        - image: docker.io/bitnami/nginx:1.22.1-debian-11-r7
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: http
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: default-backend
          ports:
          - containerPort: 8080
            name: http
            protocol: TCP
          readinessProbe:
            failureThreshold: 6
            httpGet:
              path: /healthz
              port: http
              scheme: HTTP
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 5
          resources: {}
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /opt/bitnami/nginx/conf/bitnami/
            name: nginx-config-volume
            readOnly: true
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1001
        serviceAccount: dev-ingress-nginx-ingress-controller
        serviceAccountName: dev-ingress-nginx-ingress-controller
        terminationGracePeriodSeconds: 60
        volumes:
        - configMap:
            defaultMode: 420
            items:
            - key: defaultBackend.conf
              path: defaultBackend.conf
            name: dev-ingress-nginx-ingress-controller-default-backend
          name: nginx-config-volume
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2021-06-08T19:30:39Z"
      lastUpdateTime: "2022-12-03T19:43:48Z"
      message: ReplicaSet "dev-ingress-nginx-ingress-controller-default-backend-594ffb64c"
        has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2023-01-22T01:48:29Z"
      lastUpdateTime: "2023-01-22T01:48:29Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 7
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "8"
      field.cattle.io/publicEndpoints: '[{"addresses":["20.81.66.64"],"port":80,"protocol":"TCP","serviceName":"components:external-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["20.81.66.64"],"port":443,"protocol":"TCP","serviceName":"components:external-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["20.81.66.64"],"port":1883,"protocol":"TCP","serviceName":"components:external-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["20.81.66.64"],"port":8883,"protocol":"TCP","serviceName":"components:external-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["20.81.66.64"],"port":9000,"protocol":"TCP","serviceName":"components:external-ingress-nginx-ingress-controller","allNodes":false}]'
      meta.helm.sh/release-name: external-ingress
      meta.helm.sh/release-namespace: components
    creationTimestamp: "2021-08-16T14:06:29Z"
    generation: 12
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: external-ingress
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: nginx-ingress-controller
      helm.sh/chart: nginx-ingress-controller-9.3.22
    name: external-ingress-nginx-ingress-controller
    namespace: components
    resourceVersion: "564973517"
    uid: bd71804c-45a2-45d5-b3bb-74a7703097b9
  spec:
    progressDeadlineSeconds: 600
    replicas: 2
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: external-ingress
        app.kubernetes.io/name: nginx-ingress-controller
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/restartedAt: "2021-09-21T12:40:34-03:00"
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: controller
          app.kubernetes.io/instance: external-ingress
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: nginx-ingress-controller
          helm.sh/chart: nginx-ingress-controller-9.3.22
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/component: controller
                    app.kubernetes.io/instance: external-ingress
                    app.kubernetes.io/name: nginx-ingress-controller
                topologyKey: kubernetes.io/hostname
              weight: 1
        containers:
        - args:
          - /nginx-ingress-controller
          - --default-backend-service=components/external-ingress-nginx-ingress-controller-default-backend
          - --election-id=ingress-controller-leader
          - --controller-class=k8s.io/ingress-nginx
          - --configmap=components/external-ingress-nginx-ingress-controller
          - --tcp-services-configmap=components/external-ingress-nginx-ingress-controller-tcp
          - --ingress-class=external-ingress
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: docker.io/bitnami/nginx-ingress-controller:1.5.1-debian-11-r5
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: controller
          ports:
          - containerPort: 80
            name: http
            protocol: TCP
          - containerPort: 443
            name: https
            protocol: TCP
          - containerPort: 1883
            name: 1883-tcp
            protocol: TCP
          - containerPort: 8883
            name: 8883-tcp
            protocol: TCP
          - containerPort: 9000
            name: 9000-tcp
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          securityContext:
            allowPrivilegeEscalation: true
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            runAsNonRoot: true
            runAsUser: 1001
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1001
        serviceAccount: external-ingress-nginx-ingress-controller
        serviceAccountName: external-ingress-nginx-ingress-controller
        terminationGracePeriodSeconds: 60
  status:
    availableReplicas: 2
    conditions:
    - lastTransitionTime: "2021-08-16T14:06:29Z"
      lastUpdateTime: "2022-12-03T19:44:20Z"
      message: ReplicaSet "external-ingress-nginx-ingress-controller-6d46d646f6" has
        successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2023-02-04T21:19:30Z"
      lastUpdateTime: "2023-02-04T21:19:30Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 12
    readyReplicas: 2
    replicas: 2
    updatedReplicas: 2
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "3"
      meta.helm.sh/release-name: external-ingress
      meta.helm.sh/release-namespace: components
    creationTimestamp: "2021-08-16T14:06:29Z"
    generation: 3
    labels:
      app.kubernetes.io/component: default-backend
      app.kubernetes.io/instance: external-ingress
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: nginx-ingress-controller
      helm.sh/chart: nginx-ingress-controller-9.3.22
    name: external-ingress-nginx-ingress-controller-default-backend
    namespace: components
    resourceVersion: "564970527"
    uid: 96d9add7-165b-48ec-b367-9a649bf7a2b6
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/component: default-backend
        app.kubernetes.io/instance: external-ingress
        app.kubernetes.io/name: nginx-ingress-controller
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/restartedAt: "2021-09-21T12:09:44-03:00"
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: default-backend
          app.kubernetes.io/instance: external-ingress
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: nginx-ingress-controller
          helm.sh/chart: nginx-ingress-controller-9.3.22
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/component: default-backend
                    app.kubernetes.io/instance: external-ingress
                    app.kubernetes.io/name: nginx-ingress-controller
                topologyKey: kubernetes.io/hostname
              weight: 1
        containers:
        - image: docker.io/bitnami/nginx:1.22.1-debian-11-r7
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: http
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: default-backend
          ports:
          - containerPort: 8080
            name: http
            protocol: TCP
          readinessProbe:
            failureThreshold: 6
            httpGet:
              path: /healthz
              port: http
              scheme: HTTP
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 5
          resources: {}
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /opt/bitnami/nginx/conf/bitnami/
            name: nginx-config-volume
            readOnly: true
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1001
        serviceAccount: external-ingress-nginx-ingress-controller
        serviceAccountName: external-ingress-nginx-ingress-controller
        terminationGracePeriodSeconds: 60
        volumes:
        - configMap:
            defaultMode: 420
            items:
            - key: defaultBackend.conf
              path: defaultBackend.conf
            name: external-ingress-nginx-ingress-controller-default-backend
          name: nginx-config-volume
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2021-08-16T14:06:29Z"
      lastUpdateTime: "2022-12-03T19:43:52Z"
      message: ReplicaSet "external-ingress-nginx-ingress-controller-default-backend-6694489fdd"
        has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2023-02-04T21:17:21Z"
      lastUpdateTime: "2023-02-04T21:17:21Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 3
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "9"
      field.cattle.io/publicEndpoints: '[{"addresses":["10.1.43.45"],"port":80,"protocol":"TCP","serviceName":"components:lab-devops-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.43.45"],"port":443,"protocol":"TCP","serviceName":"components:lab-devops-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.43.45"],"port":15672,"protocol":"TCP","serviceName":"components:lab-devops-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.43.45"],"port":1883,"protocol":"TCP","serviceName":"components:lab-devops-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.43.45"],"port":5671,"protocol":"TCP","serviceName":"components:lab-devops-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.43.45"],"port":5672,"protocol":"TCP","serviceName":"components:lab-devops-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.43.45"],"port":6379,"protocol":"TCP","serviceName":"components:lab-devops-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.43.45"],"port":8883,"protocol":"TCP","serviceName":"components:lab-devops-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.43.45"],"port":9000,"protocol":"TCP","serviceName":"components:lab-devops-ingress-nginx-ingress-controller","allNodes":false}]'
      meta.helm.sh/release-name: lab-devops-ingress
      meta.helm.sh/release-namespace: components
    creationTimestamp: "2022-02-01T11:10:19Z"
    generation: 14
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: lab-devops-ingress
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: nginx-ingress-controller
      helm.sh/chart: nginx-ingress-controller-9.3.22
    name: lab-devops-ingress-nginx-ingress-controller
    namespace: components
    resourceVersion: "544849133"
    uid: 4c4ffd8e-baaa-4a2b-8800-e6e2392332b6
  spec:
    progressDeadlineSeconds: 600
    replicas: 2
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: lab-devops-ingress
        app.kubernetes.io/name: nginx-ingress-controller
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/restartedAt: "2022-09-29T16:35:50-03:00"
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: controller
          app.kubernetes.io/instance: lab-devops-ingress
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: nginx-ingress-controller
          helm.sh/chart: nginx-ingress-controller-9.3.22
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/component: controller
                    app.kubernetes.io/instance: lab-devops-ingress
                    app.kubernetes.io/name: nginx-ingress-controller
                topologyKey: kubernetes.io/hostname
              weight: 1
        containers:
        - args:
          - /nginx-ingress-controller
          - --default-backend-service=components/lab-devops-ingress-nginx-ingress-controller-default-backend
          - --election-id=ingress-controller-leader
          - --controller-class=k8s.io/ingress-nginx
          - --configmap=components/lab-devops-ingress-nginx-ingress-controller
          - --tcp-services-configmap=components/lab-devops-ingress-nginx-ingress-controller-tcp
          - --ingress-class=lab-devops-ingress
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: docker.io/bitnami/nginx-ingress-controller:1.5.1-debian-11-r5
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: controller
          ports:
          - containerPort: 80
            name: http
            protocol: TCP
          - containerPort: 443
            name: https
            protocol: TCP
          - containerPort: 15672
            name: 15672-tcp
            protocol: TCP
          - containerPort: 1883
            name: 1883-tcp
            protocol: TCP
          - containerPort: 5671
            name: 5671-tcp
            protocol: TCP
          - containerPort: 5672
            name: 5672-tcp
            protocol: TCP
          - containerPort: 6379
            name: 6379-tcp
            protocol: TCP
          - containerPort: 8883
            name: 8883-tcp
            protocol: TCP
          - containerPort: 9000
            name: 9000-tcp
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          securityContext:
            allowPrivilegeEscalation: true
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            runAsNonRoot: true
            runAsUser: 1001
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1001
        serviceAccount: lab-devops-ingress-nginx-ingress-controller
        serviceAccountName: lab-devops-ingress-nginx-ingress-controller
        terminationGracePeriodSeconds: 60
  status:
    availableReplicas: 2
    conditions:
    - lastTransitionTime: "2022-02-01T11:10:19Z"
      lastUpdateTime: "2022-12-13T13:03:21Z"
      message: ReplicaSet "lab-devops-ingress-nginx-ingress-controller-7d468477" has
        successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2023-01-22T01:48:31Z"
      lastUpdateTime: "2023-01-22T01:48:31Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 14
    readyReplicas: 2
    replicas: 2
    updatedReplicas: 2
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "2"
      meta.helm.sh/release-name: lab-devops-ingress
      meta.helm.sh/release-namespace: components
    creationTimestamp: "2022-02-01T11:10:19Z"
    generation: 2
    labels:
      app.kubernetes.io/component: default-backend
      app.kubernetes.io/instance: lab-devops-ingress
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: nginx-ingress-controller
      helm.sh/chart: nginx-ingress-controller-9.3.22
    name: lab-devops-ingress-nginx-ingress-controller-default-backend
    namespace: components
    resourceVersion: "540225219"
    uid: 3c13dfca-c57b-467c-9145-27ec6e37b83b
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/component: default-backend
        app.kubernetes.io/instance: lab-devops-ingress
        app.kubernetes.io/name: nginx-ingress-controller
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: default-backend
          app.kubernetes.io/instance: lab-devops-ingress
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: nginx-ingress-controller
          helm.sh/chart: nginx-ingress-controller-9.3.22
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/component: default-backend
                    app.kubernetes.io/instance: lab-devops-ingress
                    app.kubernetes.io/name: nginx-ingress-controller
                topologyKey: kubernetes.io/hostname
              weight: 1
        containers:
        - image: docker.io/bitnami/nginx:1.22.1-debian-11-r7
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: http
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: default-backend
          ports:
          - containerPort: 8080
            name: http
            protocol: TCP
          readinessProbe:
            failureThreshold: 6
            httpGet:
              path: /healthz
              port: http
              scheme: HTTP
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 5
          resources: {}
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /opt/bitnami/nginx/conf/bitnami/
            name: nginx-config-volume
            readOnly: true
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1001
        serviceAccount: lab-devops-ingress-nginx-ingress-controller
        serviceAccountName: lab-devops-ingress-nginx-ingress-controller
        terminationGracePeriodSeconds: 60
        volumes:
        - configMap:
            defaultMode: 420
            items:
            - key: defaultBackend.conf
              path: defaultBackend.conf
            name: lab-devops-ingress-nginx-ingress-controller-default-backend
          name: nginx-config-volume
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2022-02-01T11:10:19Z"
      lastUpdateTime: "2022-12-13T13:02:46Z"
      message: ReplicaSet "lab-devops-ingress-nginx-ingress-controller-default-backend-5dd64f8d8b"
        has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2023-01-18T21:13:17Z"
      lastUpdateTime: "2023-01-18T21:13:17Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 2
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "5"
      field.cattle.io/publicEndpoints: '[{"addresses":["40.88.196.154"],"port":80,"protocol":"TCP","serviceName":"components:main-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["40.88.196.154"],"port":443,"protocol":"TCP","serviceName":"components:main-ingress-nginx-ingress-controller","allNodes":false}]'
      meta.helm.sh/release-name: main-ingress
      meta.helm.sh/release-namespace: components
    creationTimestamp: "2021-06-07T19:22:36Z"
    generation: 9
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: main-ingress
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: nginx-ingress-controller
      helm.sh/chart: nginx-ingress-controller-8.0.11
    name: main-ingress-nginx-ingress-controller
    namespace: components
    resourceVersion: "564973528"
    uid: 5b2b2901-ef5b-4d6f-8724-0108a23d91b2
  spec:
    progressDeadlineSeconds: 600
    replicas: 2
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: main-ingress
        app.kubernetes.io/name: nginx-ingress-controller
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: controller
          app.kubernetes.io/instance: main-ingress
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: nginx-ingress-controller
          helm.sh/chart: nginx-ingress-controller-8.0.11
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/component: controller
                    app.kubernetes.io/instance: main-ingress
                    app.kubernetes.io/name: nginx-ingress-controller
                namespaces:
                - components
                topologyKey: kubernetes.io/hostname
              weight: 1
        containers:
        - args:
          - /nginx-ingress-controller
          - --default-backend-service=components/main-ingress-nginx-ingress-controller-default-backend
          - --election-id=ingress-controller-leader
          - --configmap=components/main-ingress-nginx-ingress-controller
          - --ingress-class=main-ingress
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: docker.io/bitnami/nginx-ingress-controller:1.0.4-debian-10-r4
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: controller
          ports:
          - containerPort: 80
            name: http
            protocol: TCP
          - containerPort: 443
            name: https
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          securityContext:
            allowPrivilegeEscalation: true
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            runAsUser: 1001
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1001
        serviceAccount: main-ingress-nginx-ingress-controller
        serviceAccountName: main-ingress-nginx-ingress-controller
        terminationGracePeriodSeconds: 60
  status:
    availableReplicas: 2
    conditions:
    - lastTransitionTime: "2022-01-18T23:09:51Z"
      lastUpdateTime: "2022-01-19T00:15:03Z"
      message: ReplicaSet "main-ingress-nginx-ingress-controller-5fff9db787" has successfully
        progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2023-02-04T21:19:30Z"
      lastUpdateTime: "2023-02-04T21:19:30Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 9
    readyReplicas: 2
    replicas: 2
    updatedReplicas: 2
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "3"
      meta.helm.sh/release-name: main-ingress
      meta.helm.sh/release-namespace: components
    creationTimestamp: "2021-06-07T19:22:36Z"
    generation: 3
    labels:
      app.kubernetes.io/component: default-backend
      app.kubernetes.io/instance: main-ingress
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: nginx-ingress-controller
      helm.sh/chart: nginx-ingress-controller-8.0.11
    name: main-ingress-nginx-ingress-controller-default-backend
    namespace: components
    resourceVersion: "544848888"
    uid: 77c18668-d3c6-4b50-8d47-19dd7dac5788
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/component: default-backend
        app.kubernetes.io/instance: main-ingress
        app.kubernetes.io/name: nginx-ingress-controller
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: default-backend
          app.kubernetes.io/instance: main-ingress
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: nginx-ingress-controller
          helm.sh/chart: nginx-ingress-controller-8.0.11
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/component: default-backend
                    app.kubernetes.io/instance: main-ingress
                    app.kubernetes.io/name: nginx-ingress-controller
                namespaces:
                - components
                topologyKey: kubernetes.io/hostname
              weight: 1
        containers:
        - image: docker.io/bitnami/nginx:1.21.3-debian-10-r37
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: http
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: default-backend
          ports:
          - containerPort: 8080
            name: http
            protocol: TCP
          readinessProbe:
            failureThreshold: 6
            httpGet:
              path: /healthz
              port: http
              scheme: HTTP
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 5
          resources: {}
          securityContext:
            runAsUser: 1001
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /opt/bitnami/nginx/conf/bitnami/
            name: nginx-config-volume
            readOnly: true
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1001
        serviceAccount: main-ingress-nginx-ingress-controller
        serviceAccountName: main-ingress-nginx-ingress-controller
        terminationGracePeriodSeconds: 60
        volumes:
        - configMap:
            defaultMode: 420
            items:
            - key: defaultBackend.conf
              path: defaultBackend.conf
            name: main-ingress-nginx-ingress-controller-default-backend
          name: nginx-config-volume
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2021-06-07T19:22:36Z"
      lastUpdateTime: "2022-01-18T23:10:14Z"
      message: ReplicaSet "main-ingress-nginx-ingress-controller-default-backend-699d94dd57"
        has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2023-01-22T01:48:24Z"
      lastUpdateTime: "2023-01-22T01:48:24Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 3
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "37"
      field.cattle.io/publicEndpoints: '[{"addresses":["10.1.32.98"],"port":80,"protocol":"TCP","serviceName":"components:qa-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.98"],"port":443,"protocol":"TCP","serviceName":"components:qa-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.98"],"port":15672,"protocol":"TCP","serviceName":"components:qa-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.98"],"port":1883,"protocol":"TCP","serviceName":"components:qa-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.98"],"port":5671,"protocol":"TCP","serviceName":"components:qa-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.98"],"port":5672,"protocol":"TCP","serviceName":"components:qa-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.98"],"port":6379,"protocol":"TCP","serviceName":"components:qa-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.98"],"port":8883,"protocol":"TCP","serviceName":"components:qa-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.98"],"port":9000,"protocol":"TCP","serviceName":"components:qa-ingress-nginx-ingress-controller","allNodes":false}]'
      meta.helm.sh/release-name: qa-ingress
      meta.helm.sh/release-namespace: components
      reloader.stakater.com/auto: "true"
    creationTimestamp: "2021-06-07T19:23:10Z"
    generation: 53
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: qa-ingress
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: nginx-ingress-controller
      helm.sh/chart: nginx-ingress-controller-9.3.22
    name: qa-ingress-nginx-ingress-controller
    namespace: components
    resourceVersion: "564971771"
    uid: bc85f606-4a81-45ca-83b7-0ddbcc66ba1b
  spec:
    progressDeadlineSeconds: 600
    replicas: 2
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: qa-ingress
        app.kubernetes.io/name: nginx-ingress-controller
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/restartedAt: "2022-12-02T10:57:39-03:00"
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: controller
          app.kubernetes.io/instance: qa-ingress
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: nginx-ingress-controller
          helm.sh/chart: nginx-ingress-controller-9.3.22
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/component: controller
                    app.kubernetes.io/instance: qa-ingress
                    app.kubernetes.io/name: nginx-ingress-controller
                topologyKey: kubernetes.io/hostname
              weight: 1
        containers:
        - args:
          - /nginx-ingress-controller
          - --default-backend-service=components/qa-ingress-nginx-ingress-controller-default-backend
          - --election-id=ingress-controller-leader
          - --controller-class=k8s.io/ingress-nginx
          - --configmap=components/qa-ingress-nginx-ingress-controller
          - --tcp-services-configmap=components/qa-ingress-nginx-ingress-controller-tcp
          - --ingress-class=qa-ingress
          - --v=1
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: docker.io/bitnami/nginx-ingress-controller:1.5.1-debian-11-r5
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: controller
          ports:
          - containerPort: 80
            name: http
            protocol: TCP
          - containerPort: 443
            name: https
            protocol: TCP
          - containerPort: 15672
            name: 15672-tcp
            protocol: TCP
          - containerPort: 1883
            name: 1883-tcp
            protocol: TCP
          - containerPort: 5671
            name: 5671-tcp
            protocol: TCP
          - containerPort: 5672
            name: 5672-tcp
            protocol: TCP
          - containerPort: 6379
            name: 6379-tcp
            protocol: TCP
          - containerPort: 8883
            name: 8883-tcp
            protocol: TCP
          - containerPort: 9000
            name: 9000-tcp
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          securityContext:
            allowPrivilegeEscalation: true
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            runAsNonRoot: true
            runAsUser: 1001
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1001
        serviceAccount: qa-ingress-nginx-ingress-controller
        serviceAccountName: qa-ingress-nginx-ingress-controller
        terminationGracePeriodSeconds: 60
  status:
    availableReplicas: 2
    conditions:
    - lastTransitionTime: "2021-06-07T19:23:10Z"
      lastUpdateTime: "2022-12-15T18:42:57Z"
      message: ReplicaSet "qa-ingress-nginx-ingress-controller-69fbc65977" has successfully
        progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2023-02-04T21:18:24Z"
      lastUpdateTime: "2023-02-04T21:18:24Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 53
    readyReplicas: 2
    replicas: 2
    updatedReplicas: 2
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "5"
      meta.helm.sh/release-name: qa-ingress
      meta.helm.sh/release-namespace: components
      reloader.stakater.com/auto: "true"
    creationTimestamp: "2021-06-07T19:23:10Z"
    generation: 6
    labels:
      app.kubernetes.io/component: default-backend
      app.kubernetes.io/instance: qa-ingress
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: nginx-ingress-controller
      helm.sh/chart: nginx-ingress-controller-9.3.22
    name: qa-ingress-nginx-ingress-controller-default-backend
    namespace: components
    resourceVersion: "493147980"
    uid: 961c872a-d105-45fa-97f2-cb244485448d
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/component: default-backend
        app.kubernetes.io/instance: qa-ingress
        app.kubernetes.io/name: nginx-ingress-controller
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/restartedAt: "2022-02-13T11:09:41-03:00"
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: default-backend
          app.kubernetes.io/instance: qa-ingress
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: nginx-ingress-controller
          helm.sh/chart: nginx-ingress-controller-9.3.22
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/component: default-backend
                    app.kubernetes.io/instance: qa-ingress
                    app.kubernetes.io/name: nginx-ingress-controller
                topologyKey: kubernetes.io/hostname
              weight: 1
        containers:
        - image: docker.io/bitnami/nginx:1.22.1-debian-11-r7
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: http
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: default-backend
          ports:
          - containerPort: 8080
            name: http
            protocol: TCP
          readinessProbe:
            failureThreshold: 6
            httpGet:
              path: /healthz
              port: http
              scheme: HTTP
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 5
          resources: {}
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /opt/bitnami/nginx/conf/bitnami/
            name: nginx-config-volume
            readOnly: true
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1001
        serviceAccount: qa-ingress-nginx-ingress-controller
        serviceAccountName: qa-ingress-nginx-ingress-controller
        terminationGracePeriodSeconds: 60
        volumes:
        - configMap:
            defaultMode: 420
            items:
            - key: defaultBackend.conf
              path: defaultBackend.conf
            name: qa-ingress-nginx-ingress-controller-default-backend
          name: nginx-config-volume
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2021-06-07T19:23:10Z"
      lastUpdateTime: "2022-12-03T19:47:07Z"
      message: ReplicaSet "qa-ingress-nginx-ingress-controller-default-backend-6f85b66894"
        has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2022-12-03T20:10:25Z"
      lastUpdateTime: "2022-12-03T20:10:25Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 6
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: reloader
      meta.helm.sh/release-namespace: components
    creationTimestamp: "2021-08-20T21:20:12Z"
    generation: 1
    labels:
      app: reloader-reloader
      app.kubernetes.io/managed-by: Helm
      chart: reloader-v0.0.87
      group: com.stakater.platform
      heritage: Helm
      provider: stakater
      release: reloader
      version: v0.0.77
    name: reloader-reloader
    namespace: components
    resourceVersion: "564971775"
    uid: 013266be-81f2-451e-88a9-08477c627b28
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 2
    selector:
      matchLabels:
        app: reloader-reloader
        release: reloader
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: reloader-reloader
          app.kubernetes.io/managed-by: Helm
          chart: reloader-v0.0.87
          group: com.stakater.platform
          heritage: Helm
          provider: stakater
          release: reloader
          version: v0.0.77
      spec:
        containers:
        - image: stakater/reloader:v0.0.87
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /metrics
              port: http
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: reloader-reloader
          ports:
          - containerPort: 9090
            name: http
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /metrics
              port: http
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsNonRoot: true
          runAsUser: 65534
        serviceAccount: reloader-reloader
        serviceAccountName: reloader-reloader
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2021-08-20T21:20:12Z"
      lastUpdateTime: "2021-08-20T21:20:16Z"
      message: ReplicaSet "reloader-reloader-67b489c94" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2023-02-04T21:18:24Z"
      lastUpdateTime: "2023-02-04T21:18:24Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "2"
      deployment.kubernetes.io/max-replicas: "3"
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: cert-manager
      meta.helm.sh/release-namespace: components
    creationTimestamp: "2022-11-04T12:41:00Z"
    generation: 3
    labels:
      app: cert-manager
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: cert-manager
      helm.sh/chart: cert-manager-v1.4.0
      pod-template-hash: 566c86b968
    name: cert-manager-566c86b968
    namespace: components
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: cert-manager
      uid: 25a6d96a-41ea-4466-8d84-cf47383e3ba1
    resourceVersion: "469884076"
    uid: 45b089e2-f812-4516-877b-1575552a293e
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: cert-manager
        app.kubernetes.io/name: cert-manager
        pod-template-hash: 566c86b968
    template:
      metadata:
        annotations:
          prometheus.io/path: /metrics
          prometheus.io/port: "9402"
          prometheus.io/scrape: "true"
        creationTimestamp: null
        labels:
          app: cert-manager
          app.kubernetes.io/component: controller
          app.kubernetes.io/instance: cert-manager
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: cert-manager
          helm.sh/chart: cert-manager-v1.4.0
          pod-template-hash: 566c86b968
      spec:
        containers:
        - args:
          - --v=2
          - --cluster-resource-namespace=$(POD_NAMESPACE)
          - --leader-election-namespace=dev
          - --dns01-recursive-nameservers-only
          - --dns01-recursive-nameservers=1.1.1.1:53
          env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: quay.io/jetstack/cert-manager-controller:v1.4.0
          imagePullPolicy: IfNotPresent
          name: cert-manager
          ports:
          - containerPort: 9402
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsNonRoot: true
        serviceAccount: cert-manager
        serviceAccountName: cert-manager
        terminationGracePeriodSeconds: 30
  status:
    observedGeneration: 3
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "2"
      deployment.kubernetes.io/max-replicas: "3"
      deployment.kubernetes.io/revision: "2"
      meta.helm.sh/release-name: cert-manager
      meta.helm.sh/release-namespace: components
    creationTimestamp: "2022-11-04T13:38:31Z"
    generation: 4
    labels:
      app: cert-manager
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: cert-manager
      helm.sh/chart: cert-manager-v1.4.0
      pod-template-hash: 579d6d6449
    name: cert-manager-579d6d6449
    namespace: components
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: cert-manager
      uid: 25a6d96a-41ea-4466-8d84-cf47383e3ba1
    resourceVersion: "502423570"
    uid: d505d9cd-22a0-4e56-bc34-d6a5087eb100
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: cert-manager
        app.kubernetes.io/name: cert-manager
        pod-template-hash: 579d6d6449
    template:
      metadata:
        annotations:
          prometheus.io/path: /metrics
          prometheus.io/port: "9402"
          prometheus.io/scrape: "true"
        creationTimestamp: null
        labels:
          app: cert-manager
          app.kubernetes.io/component: controller
          app.kubernetes.io/instance: cert-manager
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: cert-manager
          helm.sh/chart: cert-manager-v1.4.0
          pod-template-hash: 579d6d6449
      spec:
        containers:
        - args:
          - --v=2
          - --cluster-resource-namespace=$(POD_NAMESPACE)
          - --leader-election-namespace=qa
          - --dns01-recursive-nameservers-only
          - --dns01-recursive-nameservers=1.1.1.1:53
          env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: quay.io/jetstack/cert-manager-controller:v1.4.0
          imagePullPolicy: IfNotPresent
          name: cert-manager
          ports:
          - containerPort: 9402
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsNonRoot: true
        serviceAccount: cert-manager
        serviceAccountName: cert-manager
        terminationGracePeriodSeconds: 30
  status:
    observedGeneration: 4
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "2"
      deployment.kubernetes.io/max-replicas: "3"
      deployment.kubernetes.io/revision: "3"
      meta.helm.sh/release-name: cert-manager
      meta.helm.sh/release-namespace: components
    creationTimestamp: "2022-12-15T13:02:51Z"
    generation: 4
    labels:
      app: cert-manager
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: cert-manager
      app.kubernetes.io/version: v1.10.1
      helm.sh/chart: cert-manager-v1.10.1
      pod-template-hash: bb9dd749b
    name: cert-manager-bb9dd749b
    namespace: components
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: cert-manager
      uid: 25a6d96a-41ea-4466-8d84-cf47383e3ba1
    resourceVersion: "517424057"
    uid: ad001e18-837e-461f-833c-e00b5840e423
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: cert-manager
        app.kubernetes.io/name: cert-manager
        pod-template-hash: bb9dd749b
    template:
      metadata:
        annotations:
          prometheus.io/path: /metrics
          prometheus.io/port: "9402"
          prometheus.io/scrape: "true"
        creationTimestamp: null
        labels:
          app: cert-manager
          app.kubernetes.io/component: controller
          app.kubernetes.io/instance: cert-manager
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: cert-manager
          app.kubernetes.io/version: v1.10.1
          helm.sh/chart: cert-manager-v1.10.1
          pod-template-hash: bb9dd749b
      spec:
        containers:
        - args:
          - --v=1
          - --cluster-resource-namespace=$(POD_NAMESPACE)
          - --leader-election-namespace=dev
          - --dns01-recursive-nameservers-only
          - --dns01-recursive-nameservers=1.1.1.1:53
          env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: quay.io/jetstack/cert-manager-controller:v1.10.1
          imagePullPolicy: IfNotPresent
          name: cert-manager-controller
          ports:
          - containerPort: 9402
            name: http-metrics
            protocol: TCP
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: cert-manager
        serviceAccountName: cert-manager
        terminationGracePeriodSeconds: 30
  status:
    observedGeneration: 4
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "5"
      meta.helm.sh/release-name: cert-manager
      meta.helm.sh/release-namespace: components
    creationTimestamp: "2023-01-05T21:23:27Z"
    generation: 1
    labels:
      app: cainjector
      app.kubernetes.io/component: cainjector
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: cainjector
      app.kubernetes.io/version: v1.10.1
      helm.sh/chart: cert-manager-v1.10.1
      pod-template-hash: 6b76846899
    name: cert-manager-cainjector-6b76846899
    namespace: components
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: cert-manager-cainjector
      uid: 851817cf-07d1-4b3e-92ca-b472ec7d4d58
    resourceVersion: "564967848"
    uid: 166d5092-0421-4b06-97d4-82738cb4b350
  spec:
    replicas: 1
    selector:
      matchLabels:
        app.kubernetes.io/component: cainjector
        app.kubernetes.io/instance: cert-manager
        app.kubernetes.io/name: cainjector
        pod-template-hash: 6b76846899
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: cainjector
          app.kubernetes.io/component: cainjector
          app.kubernetes.io/instance: cert-manager
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: cainjector
          app.kubernetes.io/version: v1.10.1
          helm.sh/chart: cert-manager-v1.10.1
          pod-template-hash: 6b76846899
      spec:
        containers:
        - args:
          - --v=2
          - --leader-election-namespace=qa
          env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: quay.io/jetstack/cert-manager-cainjector:v1.10.1
          imagePullPolicy: IfNotPresent
          name: cert-manager-cainjector
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: cert-manager-cainjector
        serviceAccountName: cert-manager-cainjector
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "2"
      meta.helm.sh/release-name: cert-manager
      meta.helm.sh/release-namespace: components
    creationTimestamp: "2022-11-04T13:38:30Z"
    generation: 2
    labels:
      app: cainjector
      app.kubernetes.io/component: cainjector
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: cainjector
      helm.sh/chart: cert-manager-v1.4.0
      pod-template-hash: 79d66546
    name: cert-manager-cainjector-79d66546
    namespace: components
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: cert-manager-cainjector
      uid: 851817cf-07d1-4b3e-92ca-b472ec7d4d58
    resourceVersion: "502423467"
    uid: e244dee2-74c5-4d8d-b5fc-77779d447103
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/component: cainjector
        app.kubernetes.io/instance: cert-manager
        app.kubernetes.io/name: cainjector
        pod-template-hash: 79d66546
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: cainjector
          app.kubernetes.io/component: cainjector
          app.kubernetes.io/instance: cert-manager
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: cainjector
          helm.sh/chart: cert-manager-v1.4.0
          pod-template-hash: 79d66546
      spec:
        containers:
        - args:
          - --v=2
          - --leader-election-namespace=qa
          env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: quay.io/jetstack/cert-manager-cainjector:v1.4.0
          imagePullPolicy: IfNotPresent
          name: cert-manager
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsNonRoot: true
        serviceAccount: cert-manager-cainjector
        serviceAccountName: cert-manager-cainjector
        terminationGracePeriodSeconds: 30
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "3"
      meta.helm.sh/release-name: cert-manager
      meta.helm.sh/release-namespace: components
    creationTimestamp: "2022-12-15T13:02:50Z"
    generation: 2
    labels:
      app: cainjector
      app.kubernetes.io/component: cainjector
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: cainjector
      app.kubernetes.io/version: v1.10.1
      helm.sh/chart: cert-manager-v1.10.1
      pod-template-hash: 8d76d5bb9
    name: cert-manager-cainjector-8d76d5bb9
    namespace: components
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: cert-manager-cainjector
      uid: 851817cf-07d1-4b3e-92ca-b472ec7d4d58
    resourceVersion: "517424002"
    uid: 96fb8e52-48f8-4478-aa7d-3d526087908e
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/component: cainjector
        app.kubernetes.io/instance: cert-manager
        app.kubernetes.io/name: cainjector
        pod-template-hash: 8d76d5bb9
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: cainjector
          app.kubernetes.io/component: cainjector
          app.kubernetes.io/instance: cert-manager
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: cainjector
          app.kubernetes.io/version: v1.10.1
          helm.sh/chart: cert-manager-v1.10.1
          pod-template-hash: 8d76d5bb9
      spec:
        containers:
        - args:
          - --v=1
          - --leader-election-namespace=dev
          env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: quay.io/jetstack/cert-manager-cainjector:v1.10.1
          imagePullPolicy: IfNotPresent
          name: cert-manager-cainjector
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: cert-manager-cainjector
        serviceAccountName: cert-manager-cainjector
        terminationGracePeriodSeconds: 30
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "4"
      meta.helm.sh/release-name: cert-manager
      meta.helm.sh/release-namespace: components
    creationTimestamp: "2023-01-03T13:07:36Z"
    generation: 2
    labels:
      app: cainjector
      app.kubernetes.io/component: cainjector
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: cainjector
      app.kubernetes.io/version: v1.10.1
      helm.sh/chart: cert-manager-v1.10.1
      pod-template-hash: bbdbdbcd
    name: cert-manager-cainjector-bbdbdbcd
    namespace: components
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: cert-manager-cainjector
      uid: 851817cf-07d1-4b3e-92ca-b472ec7d4d58
    resourceVersion: "520146039"
    uid: a43f65a3-768f-4575-886a-140c35675afc
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/component: cainjector
        app.kubernetes.io/instance: cert-manager
        app.kubernetes.io/name: cainjector
        pod-template-hash: bbdbdbcd
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: cainjector
          app.kubernetes.io/component: cainjector
          app.kubernetes.io/instance: cert-manager
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: cainjector
          app.kubernetes.io/version: v1.10.1
          helm.sh/chart: cert-manager-v1.10.1
          pod-template-hash: bbdbdbcd
      spec:
        containers:
        - args:
          - --v=2
          - --leader-election-namespace=dev
          env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: quay.io/jetstack/cert-manager-cainjector:v1.10.1
          imagePullPolicy: IfNotPresent
          name: cert-manager-cainjector
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: cert-manager-cainjector
        serviceAccountName: cert-manager-cainjector
        terminationGracePeriodSeconds: 30
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: cert-manager
      meta.helm.sh/release-namespace: components
    creationTimestamp: "2022-11-04T12:41:00Z"
    generation: 2
    labels:
      app: cainjector
      app.kubernetes.io/component: cainjector
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: cainjector
      helm.sh/chart: cert-manager-v1.4.0
      pod-template-hash: d97f78d49
    name: cert-manager-cainjector-d97f78d49
    namespace: components
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: cert-manager-cainjector
      uid: 851817cf-07d1-4b3e-92ca-b472ec7d4d58
    resourceVersion: "469883993"
    uid: 5078f89d-ebab-4569-9475-8c8eebc1190f
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/component: cainjector
        app.kubernetes.io/instance: cert-manager
        app.kubernetes.io/name: cainjector
        pod-template-hash: d97f78d49
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: cainjector
          app.kubernetes.io/component: cainjector
          app.kubernetes.io/instance: cert-manager
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: cainjector
          helm.sh/chart: cert-manager-v1.4.0
          pod-template-hash: d97f78d49
      spec:
        containers:
        - args:
          - --v=2
          - --leader-election-namespace=dev
          env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: quay.io/jetstack/cert-manager-cainjector:v1.4.0
          imagePullPolicy: IfNotPresent
          name: cert-manager
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsNonRoot: true
        serviceAccount: cert-manager-cainjector
        serviceAccountName: cert-manager-cainjector
        terminationGracePeriodSeconds: 30
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "2"
      deployment.kubernetes.io/max-replicas: "3"
      deployment.kubernetes.io/revision: "5"
      meta.helm.sh/release-name: cert-manager
      meta.helm.sh/release-namespace: components
    creationTimestamp: "2023-01-05T21:23:27Z"
    generation: 2
    labels:
      app: cert-manager
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: cert-manager
      app.kubernetes.io/version: v1.10.1
      helm.sh/chart: cert-manager-v1.10.1
      pod-template-hash: f54dd4d7b
    name: cert-manager-f54dd4d7b
    namespace: components
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: cert-manager
      uid: 25a6d96a-41ea-4466-8d84-cf47383e3ba1
    resourceVersion: "564967843"
    uid: 49033a36-b2c5-4afb-aa4a-26cceff87157
  spec:
    replicas: 2
    selector:
      matchLabels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: cert-manager
        app.kubernetes.io/name: cert-manager
        pod-template-hash: f54dd4d7b
    template:
      metadata:
        annotations:
          prometheus.io/path: /metrics
          prometheus.io/port: "9402"
          prometheus.io/scrape: "true"
        creationTimestamp: null
        labels:
          app: cert-manager
          app.kubernetes.io/component: controller
          app.kubernetes.io/instance: cert-manager
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: cert-manager
          app.kubernetes.io/version: v1.10.1
          helm.sh/chart: cert-manager-v1.10.1
          pod-template-hash: f54dd4d7b
      spec:
        containers:
        - args:
          - --v=2
          - --cluster-resource-namespace=$(POD_NAMESPACE)
          - --leader-election-namespace=qa
          - --dns01-recursive-nameservers-only
          - --dns01-recursive-nameservers=1.1.1.1:53
          env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: quay.io/jetstack/cert-manager-controller:v1.10.1
          imagePullPolicy: IfNotPresent
          name: cert-manager-controller
          ports:
          - containerPort: 9402
            name: http-metrics
            protocol: TCP
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: cert-manager
        serviceAccountName: cert-manager
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 2
    fullyLabeledReplicas: 2
    observedGeneration: 2
    readyReplicas: 2
    replicas: 2
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "2"
      deployment.kubernetes.io/max-replicas: "3"
      deployment.kubernetes.io/revision: "4"
      meta.helm.sh/release-name: cert-manager
      meta.helm.sh/release-namespace: components
    creationTimestamp: "2023-01-03T13:07:37Z"
    generation: 4
    labels:
      app: cert-manager
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: cert-manager
      app.kubernetes.io/version: v1.10.1
      helm.sh/chart: cert-manager-v1.10.1
      pod-template-hash: fc6b5dd75
    name: cert-manager-fc6b5dd75
    namespace: components
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: cert-manager
      uid: 25a6d96a-41ea-4466-8d84-cf47383e3ba1
    resourceVersion: "520146124"
    uid: 9c375e67-fdca-415e-bc40-dc6b75524622
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: cert-manager
        app.kubernetes.io/name: cert-manager
        pod-template-hash: fc6b5dd75
    template:
      metadata:
        annotations:
          prometheus.io/path: /metrics
          prometheus.io/port: "9402"
          prometheus.io/scrape: "true"
        creationTimestamp: null
        labels:
          app: cert-manager
          app.kubernetes.io/component: controller
          app.kubernetes.io/instance: cert-manager
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: cert-manager
          app.kubernetes.io/version: v1.10.1
          helm.sh/chart: cert-manager-v1.10.1
          pod-template-hash: fc6b5dd75
      spec:
        containers:
        - args:
          - --v=2
          - --cluster-resource-namespace=$(POD_NAMESPACE)
          - --leader-election-namespace=dev
          - --dns01-recursive-nameservers-only
          - --dns01-recursive-nameservers=1.1.1.1:53
          env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: quay.io/jetstack/cert-manager-controller:v1.10.1
          imagePullPolicy: IfNotPresent
          name: cert-manager-controller
          ports:
          - containerPort: 9402
            name: http-metrics
            protocol: TCP
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: cert-manager
        serviceAccountName: cert-manager
        terminationGracePeriodSeconds: 30
  status:
    observedGeneration: 4
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: cert-manager
      meta.helm.sh/release-namespace: components
    creationTimestamp: "2022-11-04T12:41:00Z"
    generation: 2
    labels:
      app: webhook
      app.kubernetes.io/component: webhook
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: webhook
      helm.sh/chart: cert-manager-v1.4.0
      pod-template-hash: 56b6c9c778
    name: cert-manager-webhook-56b6c9c778
    namespace: components
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: cert-manager-webhook
      uid: 69927bb5-2ebe-40d6-a569-215aa4f49528
    resourceVersion: "502423634"
    uid: 0fd5775c-dce9-4a67-a6d1-2baa720c0098
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/component: webhook
        app.kubernetes.io/instance: cert-manager
        app.kubernetes.io/name: webhook
        pod-template-hash: 56b6c9c778
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: webhook
          app.kubernetes.io/component: webhook
          app.kubernetes.io/instance: cert-manager
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: webhook
          helm.sh/chart: cert-manager-v1.4.0
          pod-template-hash: 56b6c9c778
      spec:
        containers:
        - args:
          - --v=2
          - --secure-port=10250
          - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
          - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
          - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.components,cert-manager-webhook.components.svc
          env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: quay.io/jetstack/cert-manager-webhook:v1.4.0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /livez
              port: 6080
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: cert-manager
          ports:
          - containerPort: 10250
            name: https
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 6080
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsNonRoot: true
        serviceAccount: cert-manager-webhook
        serviceAccountName: cert-manager-webhook
        terminationGracePeriodSeconds: 30
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "2"
      meta.helm.sh/release-name: cert-manager
      meta.helm.sh/release-namespace: components
    creationTimestamp: "2022-12-15T13:02:51Z"
    generation: 2
    labels:
      app: webhook
      app.kubernetes.io/component: webhook
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: webhook
      app.kubernetes.io/version: v1.10.1
      helm.sh/chart: cert-manager-v1.10.1
      pod-template-hash: 77f5544b4c
    name: cert-manager-webhook-77f5544b4c
    namespace: components
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: cert-manager-webhook
      uid: 69927bb5-2ebe-40d6-a569-215aa4f49528
    resourceVersion: "517424147"
    uid: 524e52c3-6505-40c4-b19b-e1fd9a0d8879
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/component: webhook
        app.kubernetes.io/instance: cert-manager
        app.kubernetes.io/name: webhook
        pod-template-hash: 77f5544b4c
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: webhook
          app.kubernetes.io/component: webhook
          app.kubernetes.io/instance: cert-manager
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: webhook
          app.kubernetes.io/version: v1.10.1
          helm.sh/chart: cert-manager-v1.10.1
          pod-template-hash: 77f5544b4c
      spec:
        containers:
        - args:
          - --v=1
          - --secure-port=10250
          - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
          - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
          - --dynamic-serving-dns-names=cert-manager-webhook
          - --dynamic-serving-dns-names=cert-manager-webhook.$(POD_NAMESPACE)
          - --dynamic-serving-dns-names=cert-manager-webhook.$(POD_NAMESPACE).svc
          env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: quay.io/jetstack/cert-manager-webhook:v1.10.1
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /livez
              port: 6080
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: cert-manager-webhook
          ports:
          - containerPort: 10250
            name: https
            protocol: TCP
          - containerPort: 6080
            name: healthcheck
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 6080
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: cert-manager-webhook
        serviceAccountName: cert-manager-webhook
        terminationGracePeriodSeconds: 30
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "3"
      meta.helm.sh/release-name: cert-manager
      meta.helm.sh/release-namespace: components
    creationTimestamp: "2023-01-03T13:07:37Z"
    generation: 1
    labels:
      app: webhook
      app.kubernetes.io/component: webhook
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: webhook
      app.kubernetes.io/version: v1.10.1
      helm.sh/chart: cert-manager-v1.10.1
      pod-template-hash: d77bbf4cb
    name: cert-manager-webhook-d77bbf4cb
    namespace: components
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: cert-manager-webhook
      uid: 69927bb5-2ebe-40d6-a569-215aa4f49528
    resourceVersion: "531171548"
    uid: 52078721-5cd6-4593-a7a2-6b054c6e7a10
  spec:
    replicas: 1
    selector:
      matchLabels:
        app.kubernetes.io/component: webhook
        app.kubernetes.io/instance: cert-manager
        app.kubernetes.io/name: webhook
        pod-template-hash: d77bbf4cb
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: webhook
          app.kubernetes.io/component: webhook
          app.kubernetes.io/instance: cert-manager
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: webhook
          app.kubernetes.io/version: v1.10.1
          helm.sh/chart: cert-manager-v1.10.1
          pod-template-hash: d77bbf4cb
      spec:
        containers:
        - args:
          - --v=2
          - --secure-port=10250
          - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
          - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
          - --dynamic-serving-dns-names=cert-manager-webhook
          - --dynamic-serving-dns-names=cert-manager-webhook.$(POD_NAMESPACE)
          - --dynamic-serving-dns-names=cert-manager-webhook.$(POD_NAMESPACE).svc
          env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: quay.io/jetstack/cert-manager-webhook:v1.10.1
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /livez
              port: 6080
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: cert-manager-webhook
          ports:
          - containerPort: 10250
            name: https
            protocol: TCP
          - containerPort: 6080
            name: healthcheck
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 6080
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: cert-manager-webhook
        serviceAccountName: cert-manager-webhook
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "2"
      deployment.kubernetes.io/max-replicas: "3"
      deployment.kubernetes.io/revision: "46"
      deployment.kubernetes.io/revision-history: "44"
      field.cattle.io/publicEndpoints: '[{"addresses":["10.1.32.99"],"port":80,"protocol":"TCP","serviceName":"components:dev-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.99"],"port":443,"protocol":"TCP","serviceName":"components:dev-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.99"],"port":15672,"protocol":"TCP","serviceName":"components:dev-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.99"],"port":1883,"protocol":"TCP","serviceName":"components:dev-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.99"],"port":5671,"protocol":"TCP","serviceName":"components:dev-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.99"],"port":5672,"protocol":"TCP","serviceName":"components:dev-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.99"],"port":6379,"protocol":"TCP","serviceName":"components:dev-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.99"],"port":8883,"protocol":"TCP","serviceName":"components:dev-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.99"],"port":9000,"protocol":"TCP","serviceName":"components:dev-ingress-nginx-ingress-controller","allNodes":false}]'
      meta.helm.sh/release-name: dev-ingress
      meta.helm.sh/release-namespace: components
    creationTimestamp: "2022-12-03T19:43:45Z"
    generation: 8
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: dev-ingress
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: nginx-ingress-controller
      helm.sh/chart: nginx-ingress-controller-9.3.22
      pod-template-hash: 56c47b97c4
    name: dev-ingress-nginx-ingress-controller-56c47b97c4
    namespace: components
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: dev-ingress-nginx-ingress-controller
      uid: aeb976ac-8ea7-43c6-9ed1-03df10a711b7
    resourceVersion: "502611174"
    uid: b0c2eefe-35dc-4644-b632-be6f879949ab
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: dev-ingress
        app.kubernetes.io/name: nginx-ingress-controller
        pod-template-hash: 56c47b97c4
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/restartedAt: "2022-08-01T16:19:05-03:00"
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: controller
          app.kubernetes.io/instance: dev-ingress
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: nginx-ingress-controller
          helm.sh/chart: nginx-ingress-controller-9.3.22
          pod-template-hash: 56c47b97c4
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/component: controller
                    app.kubernetes.io/instance: dev-ingress
                    app.kubernetes.io/name: nginx-ingress-controller
                topologyKey: kubernetes.io/hostname
              weight: 1
        containers:
        - args:
          - /nginx-ingress-controller
          - --default-backend-service=components/dev-ingress-nginx-ingress-controller-default-backend
          - --election-id=ingress-controller-leader
          - --controller-class=k8s.io/ingress-nginx
          - --configmap=components/dev-ingress-nginx-ingress-controller
          - --tcp-services-configmap=components/dev-ingress-nginx-ingress-controller-tcp
          - --ingress-class=dev-ingress
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: docker.io/bitnami/nginx-ingress-controller:1.5.1-debian-11-r5
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: controller
          ports:
          - containerPort: 80
            name: http
            protocol: TCP
          - containerPort: 443
            name: https
            protocol: TCP
          - containerPort: 15672
            name: 15672-tcp
            protocol: TCP
          - containerPort: 1883
            name: 1883-tcp
            protocol: TCP
          - containerPort: 5671
            name: 5671-tcp
            protocol: TCP
          - containerPort: 5672
            name: 5672-tcp
            protocol: TCP
          - containerPort: 6379
            name: 6379-tcp
            protocol: TCP
          - containerPort: 8883
            name: 8883-tcp
            protocol: TCP
          - containerPort: 9000
            name: 9000-tcp
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          securityContext:
            allowPrivilegeEscalation: true
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            runAsNonRoot: true
            runAsUser: 1001
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1001
        serviceAccount: dev-ingress-nginx-ingress-controller
        serviceAccountName: dev-ingress-nginx-ingress-controller
        terminationGracePeriodSeconds: 60
  status:
    observedGeneration: 8
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "2"
      deployment.kubernetes.io/max-replicas: "3"
      deployment.kubernetes.io/revision: "36"
      field.cattle.io/publicEndpoints: '[{"addresses":["10.1.32.99"],"port":80,"protocol":"TCP","serviceName":"components:dev-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.99"],"port":443,"protocol":"TCP","serviceName":"components:dev-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.99"],"port":15672,"protocol":"TCP","serviceName":"components:dev-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.99"],"port":1883,"protocol":"TCP","serviceName":"components:dev-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.99"],"port":5432,"protocol":"TCP","serviceName":"components:dev-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.99"],"port":5672,"protocol":"TCP","serviceName":"components:dev-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.99"],"port":9000,"protocol":"TCP","serviceName":"components:dev-ingress-nginx-ingress-controller","allNodes":false}]'
      meta.helm.sh/release-name: dev-ingress
      meta.helm.sh/release-namespace: components
      service.beta.kubernetes.io/azure-load-balancer-internal: "true"
    creationTimestamp: "2022-07-05T16:55:34Z"
    generation: 4
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: dev-ingress
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: nginx-ingress-controller
      helm.sh/chart: nginx-ingress-controller-9.1.0
      pod-template-hash: 5d8ffbbf74
    name: dev-ingress-nginx-ingress-controller-5d8ffbbf74
    namespace: components
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: dev-ingress-nginx-ingress-controller
      uid: aeb976ac-8ea7-43c6-9ed1-03df10a711b7
    resourceVersion: "281249161"
    uid: 26883d61-1a48-44f1-9438-d87f096e53aa
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: dev-ingress
        app.kubernetes.io/name: nginx-ingress-controller
        pod-template-hash: 5d8ffbbf74
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/restartedAt: "2022-07-05T13:55:36-03:00"
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: controller
          app.kubernetes.io/instance: dev-ingress
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: nginx-ingress-controller
          helm.sh/chart: nginx-ingress-controller-9.1.0
          pod-template-hash: 5d8ffbbf74
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/component: controller
                    app.kubernetes.io/instance: dev-ingress
                    app.kubernetes.io/name: nginx-ingress-controller
                namespaces:
                - components
                topologyKey: kubernetes.io/hostname
              weight: 1
        containers:
        - args:
          - /nginx-ingress-controller
          - --default-backend-service=components/dev-ingress-nginx-ingress-controller-default-backend
          - --election-id=ingress-controller-leader
          - --configmap=components/dev-ingress-nginx-ingress-controller
          - --tcp-services-configmap=components/dev-ingress-nginx-ingress-controller-tcp
          - --ingress-class=dev-ingress
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: docker.io/bitnami/nginx-ingress-controller:0.46.0-debian-10-r19
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: controller
          ports:
          - containerPort: 80
            name: http
            protocol: TCP
          - containerPort: 443
            name: https
            protocol: TCP
          - containerPort: 15672
            name: 15672-tcp
            protocol: TCP
          - containerPort: 1883
            name: 1883-tcp
            protocol: TCP
          - containerPort: 5432
            name: 5432-tcp
            protocol: TCP
          - containerPort: 5671
            name: 5671-tcp
            protocol: TCP
          - containerPort: 5672
            name: 5672-tcp
            protocol: TCP
          - containerPort: 8883
            name: 8883-tcp
            protocol: TCP
          - containerPort: 9000
            name: 9000-tcp
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          securityContext:
            allowPrivilegeEscalation: true
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            runAsUser: 1001
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1001
        serviceAccount: dev-ingress-nginx-ingress-controller
        serviceAccountName: dev-ingress-nginx-ingress-controller
        terminationGracePeriodSeconds: 60
  status:
    observedGeneration: 4
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "2"
      deployment.kubernetes.io/max-replicas: "3"
      deployment.kubernetes.io/revision: "37"
      field.cattle.io/publicEndpoints: '[{"addresses":["10.1.32.99"],"port":80,"protocol":"TCP","serviceName":"components:dev-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.99"],"port":443,"protocol":"TCP","serviceName":"components:dev-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.99"],"port":15672,"protocol":"TCP","serviceName":"components:dev-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.99"],"port":1883,"protocol":"TCP","serviceName":"components:dev-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.99"],"port":5432,"protocol":"TCP","serviceName":"components:dev-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.99"],"port":5672,"protocol":"TCP","serviceName":"components:dev-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.99"],"port":9000,"protocol":"TCP","serviceName":"components:dev-ingress-nginx-ingress-controller","allNodes":false}]'
      meta.helm.sh/release-name: dev-ingress
      meta.helm.sh/release-namespace: components
      service.beta.kubernetes.io/azure-load-balancer-internal: "true"
    creationTimestamp: "2022-07-06T13:20:33Z"
    generation: 4
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: dev-ingress
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: nginx-ingress-controller
      helm.sh/chart: nginx-ingress-controller-9.1.0
      pod-template-hash: 5ddd499877
    name: dev-ingress-nginx-ingress-controller-5ddd499877
    namespace: components
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: dev-ingress-nginx-ingress-controller
      uid: aeb976ac-8ea7-43c6-9ed1-03df10a711b7
    resourceVersion: "293911213"
    uid: c75cbb9f-e0b2-4531-b395-ae1ba80f3426
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: dev-ingress
        app.kubernetes.io/name: nginx-ingress-controller
        pod-template-hash: 5ddd499877
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/restartedAt: "2022-07-06T10:20:33-03:00"
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: controller
          app.kubernetes.io/instance: dev-ingress
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: nginx-ingress-controller
          helm.sh/chart: nginx-ingress-controller-9.1.0
          pod-template-hash: 5ddd499877
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/component: controller
                    app.kubernetes.io/instance: dev-ingress
                    app.kubernetes.io/name: nginx-ingress-controller
                namespaces:
                - components
                topologyKey: kubernetes.io/hostname
              weight: 1
        containers:
        - args:
          - /nginx-ingress-controller
          - --default-backend-service=components/dev-ingress-nginx-ingress-controller-default-backend
          - --election-id=ingress-controller-leader
          - --configmap=components/dev-ingress-nginx-ingress-controller
          - --tcp-services-configmap=components/dev-ingress-nginx-ingress-controller-tcp
          - --ingress-class=dev-ingress
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: docker.io/bitnami/nginx-ingress-controller:0.46.0-debian-10-r19
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: controller
          ports:
          - containerPort: 80
            name: http
            protocol: TCP
          - containerPort: 443
            name: https
            protocol: TCP
          - containerPort: 15672
            name: 15672-tcp
            protocol: TCP
          - containerPort: 1883
            name: 1883-tcp
            protocol: TCP
          - containerPort: 5432
            name: 5432-tcp
            protocol: TCP
          - containerPort: 5671
            name: 5671-tcp
            protocol: TCP
          - containerPort: 5672
            name: 5672-tcp
            protocol: TCP
          - containerPort: 8883
            name: 8883-tcp
            protocol: TCP
          - containerPort: 9000
            name: 9000-tcp
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          securityContext:
            allowPrivilegeEscalation: true
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            runAsUser: 1001
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1001
        serviceAccount: dev-ingress-nginx-ingress-controller
        serviceAccountName: dev-ingress-nginx-ingress-controller
        terminationGracePeriodSeconds: 60
  status:
    observedGeneration: 4
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "2"
      deployment.kubernetes.io/max-replicas: "3"
      deployment.kubernetes.io/revision: "45"
      field.cattle.io/publicEndpoints: '[{"addresses":["10.1.32.99"],"port":80,"protocol":"TCP","serviceName":"components:dev-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.99"],"port":443,"protocol":"TCP","serviceName":"components:dev-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.99"],"port":15672,"protocol":"TCP","serviceName":"components:dev-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.99"],"port":1883,"protocol":"TCP","serviceName":"components:dev-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.99"],"port":5671,"protocol":"TCP","serviceName":"components:dev-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.99"],"port":5672,"protocol":"TCP","serviceName":"components:dev-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.99"],"port":6379,"protocol":"TCP","serviceName":"components:dev-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.99"],"port":8883,"protocol":"TCP","serviceName":"components:dev-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.99"],"port":9000,"protocol":"TCP","serviceName":"components:dev-ingress-nginx-ingress-controller","allNodes":false}]'
      meta.helm.sh/release-name: dev-ingress
      meta.helm.sh/release-namespace: components
    creationTimestamp: "2022-12-05T14:39:15Z"
    generation: 4
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: dev-ingress
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: nginx-ingress-controller
      helm.sh/chart: nginx-ingress-controller-9.3.22
      pod-template-hash: 5f6b47df6b
    name: dev-ingress-nginx-ingress-controller-5f6b47df6b
    namespace: components
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: dev-ingress-nginx-ingress-controller
      uid: aeb976ac-8ea7-43c6-9ed1-03df10a711b7
    resourceVersion: "502585913"
    uid: 6402b8a3-b08b-4a4a-98fd-e6b0f27b6b7b
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: dev-ingress
        app.kubernetes.io/name: nginx-ingress-controller
        pod-template-hash: 5f6b47df6b
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/restartedAt: "2022-08-01T16:19:05-03:00"
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: controller
          app.kubernetes.io/instance: dev-ingress
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: nginx-ingress-controller
          helm.sh/chart: nginx-ingress-controller-9.3.22
          pod-template-hash: 5f6b47df6b
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/component: controller
                    app.kubernetes.io/instance: dev-ingress
                    app.kubernetes.io/name: nginx-ingress-controller
                topologyKey: kubernetes.io/hostname
              weight: 1
        containers:
        - args:
          - /nginx-ingress-controller
          - --default-backend-service=components/dev-ingress-nginx-ingress-controller-default-backend
          - --election-id=ingress-controller-leader
          - --controller-class=k8s.io/ingress-nginx
          - --configmap=components/dev-ingress-nginx-ingress-controller
          - --tcp-services-configmap=components/dev-ingress-nginx-ingress-controller-tcp
          - --ingress-class=dev-ingress
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: docker.io/bitnami/nginx-ingress-controller:1.5.1-debian-11-r5
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: controller
          ports:
          - containerPort: 80
            name: http
            protocol: TCP
          - containerPort: 443
            name: https
            protocol: TCP
          - containerPort: 15672
            name: 15672-tcp
            protocol: TCP
          - containerPort: 1883
            name: 1883-tcp
            protocol: TCP
          - containerPort: 5432
            name: 5432-tcp
            protocol: TCP
          - containerPort: 5671
            name: 5671-tcp
            protocol: TCP
          - containerPort: 5672
            name: 5672-tcp
            protocol: TCP
          - containerPort: 6379
            name: 6379-tcp
            protocol: TCP
          - containerPort: 8883
            name: 8883-tcp
            protocol: TCP
          - containerPort: 9000
            name: 9000-tcp
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          securityContext:
            allowPrivilegeEscalation: true
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            runAsNonRoot: true
            runAsUser: 1001
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1001
        serviceAccount: dev-ingress-nginx-ingress-controller
        serviceAccountName: dev-ingress-nginx-ingress-controller
        terminationGracePeriodSeconds: 60
  status:
    observedGeneration: 4
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "2"
      deployment.kubernetes.io/max-replicas: "3"
      deployment.kubernetes.io/revision: "47"
      field.cattle.io/publicEndpoints: '[{"addresses":["10.1.32.99"],"port":80,"protocol":"TCP","serviceName":"components:dev-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.99"],"port":443,"protocol":"TCP","serviceName":"components:dev-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.99"],"port":15672,"protocol":"TCP","serviceName":"components:dev-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.99"],"port":1883,"protocol":"TCP","serviceName":"components:dev-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.99"],"port":5671,"protocol":"TCP","serviceName":"components:dev-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.99"],"port":5672,"protocol":"TCP","serviceName":"components:dev-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.99"],"port":6379,"protocol":"TCP","serviceName":"components:dev-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.99"],"port":8883,"protocol":"TCP","serviceName":"components:dev-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.99"],"port":9000,"protocol":"TCP","serviceName":"components:dev-ingress-nginx-ingress-controller","allNodes":false}]'
      meta.helm.sh/release-name: dev-ingress
      meta.helm.sh/release-namespace: components
    creationTimestamp: "2022-12-15T18:40:03Z"
    generation: 2
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: dev-ingress
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: nginx-ingress-controller
      helm.sh/chart: nginx-ingress-controller-9.3.22
      pod-template-hash: 6bffb6c68d
    name: dev-ingress-nginx-ingress-controller-6bffb6c68d
    namespace: components
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: dev-ingress-nginx-ingress-controller
      uid: aeb976ac-8ea7-43c6-9ed1-03df10a711b7
    resourceVersion: "564971765"
    uid: 20a1ea5e-c256-4d57-82e1-962d1867eae1
  spec:
    replicas: 2
    selector:
      matchLabels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: dev-ingress
        app.kubernetes.io/name: nginx-ingress-controller
        pod-template-hash: 6bffb6c68d
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/restartedAt: "2022-08-01T16:19:05-03:00"
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: controller
          app.kubernetes.io/instance: dev-ingress
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: nginx-ingress-controller
          helm.sh/chart: nginx-ingress-controller-9.3.22
          pod-template-hash: 6bffb6c68d
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/component: controller
                    app.kubernetes.io/instance: dev-ingress
                    app.kubernetes.io/name: nginx-ingress-controller
                topologyKey: kubernetes.io/hostname
              weight: 1
        containers:
        - args:
          - /nginx-ingress-controller
          - --default-backend-service=components/dev-ingress-nginx-ingress-controller-default-backend
          - --election-id=ingress-controller-leader
          - --controller-class=k8s.io/ingress-nginx
          - --configmap=components/dev-ingress-nginx-ingress-controller
          - --tcp-services-configmap=components/dev-ingress-nginx-ingress-controller-tcp
          - --ingress-class=dev-ingress
          - --v=1
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: docker.io/bitnami/nginx-ingress-controller:1.5.1-debian-11-r5
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: controller
          ports:
          - containerPort: 80
            name: http
            protocol: TCP
          - containerPort: 443
            name: https
            protocol: TCP
          - containerPort: 15672
            name: 15672-tcp
            protocol: TCP
          - containerPort: 1883
            name: 1883-tcp
            protocol: TCP
          - containerPort: 5671
            name: 5671-tcp
            protocol: TCP
          - containerPort: 5672
            name: 5672-tcp
            protocol: TCP
          - containerPort: 6379
            name: 6379-tcp
            protocol: TCP
          - containerPort: 8883
            name: 8883-tcp
            protocol: TCP
          - containerPort: 9000
            name: 9000-tcp
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          securityContext:
            allowPrivilegeEscalation: true
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            runAsNonRoot: true
            runAsUser: 1001
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1001
        serviceAccount: dev-ingress-nginx-ingress-controller
        serviceAccountName: dev-ingress-nginx-ingress-controller
        terminationGracePeriodSeconds: 60
  status:
    availableReplicas: 2
    fullyLabeledReplicas: 2
    observedGeneration: 2
    readyReplicas: 2
    replicas: 2
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "2"
      deployment.kubernetes.io/max-replicas: "3"
      deployment.kubernetes.io/revision: "38"
      field.cattle.io/publicEndpoints: '[{"addresses":["10.1.32.99"],"port":80,"protocol":"TCP","serviceName":"components:dev-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.99"],"port":443,"protocol":"TCP","serviceName":"components:dev-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.99"],"port":15672,"protocol":"TCP","serviceName":"components:dev-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.99"],"port":1883,"protocol":"TCP","serviceName":"components:dev-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.99"],"port":5432,"protocol":"TCP","serviceName":"components:dev-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.99"],"port":5672,"protocol":"TCP","serviceName":"components:dev-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.99"],"port":9000,"protocol":"TCP","serviceName":"components:dev-ingress-nginx-ingress-controller","allNodes":false}]'
      meta.helm.sh/release-name: dev-ingress
      meta.helm.sh/release-namespace: components
      service.beta.kubernetes.io/azure-load-balancer-internal: "true"
    creationTimestamp: "2022-08-01T18:58:23Z"
    generation: 4
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: dev-ingress
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: nginx-ingress-controller
      helm.sh/chart: nginx-ingress-controller-9.1.0
      pod-template-hash: 74589fc846
    name: dev-ingress-nginx-ingress-controller-74589fc846
    namespace: components
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: dev-ingress-nginx-ingress-controller
      uid: aeb976ac-8ea7-43c6-9ed1-03df10a711b7
    resourceVersion: "293918280"
    uid: d0357b7f-f4c5-49da-b3c3-51dbc8d3f927
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: dev-ingress
        app.kubernetes.io/name: nginx-ingress-controller
        pod-template-hash: 74589fc846
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/restartedAt: "2022-08-01T15:58:23-03:00"
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: controller
          app.kubernetes.io/instance: dev-ingress
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: nginx-ingress-controller
          helm.sh/chart: nginx-ingress-controller-9.1.0
          pod-template-hash: 74589fc846
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/component: controller
                    app.kubernetes.io/instance: dev-ingress
                    app.kubernetes.io/name: nginx-ingress-controller
                namespaces:
                - components
                topologyKey: kubernetes.io/hostname
              weight: 1
        containers:
        - args:
          - /nginx-ingress-controller
          - --default-backend-service=components/dev-ingress-nginx-ingress-controller-default-backend
          - --election-id=ingress-controller-leader
          - --configmap=components/dev-ingress-nginx-ingress-controller
          - --tcp-services-configmap=components/dev-ingress-nginx-ingress-controller-tcp
          - --ingress-class=dev-ingress
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: docker.io/bitnami/nginx-ingress-controller:0.46.0-debian-10-r19
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: controller
          ports:
          - containerPort: 80
            name: http
            protocol: TCP
          - containerPort: 443
            name: https
            protocol: TCP
          - containerPort: 15672
            name: 15672-tcp
            protocol: TCP
          - containerPort: 1883
            name: 1883-tcp
            protocol: TCP
          - containerPort: 5432
            name: 5432-tcp
            protocol: TCP
          - containerPort: 5671
            name: 5671-tcp
            protocol: TCP
          - containerPort: 5672
            name: 5672-tcp
            protocol: TCP
          - containerPort: 8883
            name: 8883-tcp
            protocol: TCP
          - containerPort: 9000
            name: 9000-tcp
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          securityContext:
            allowPrivilegeEscalation: true
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            runAsUser: 1001
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1001
        serviceAccount: dev-ingress-nginx-ingress-controller
        serviceAccountName: dev-ingress-nginx-ingress-controller
        terminationGracePeriodSeconds: 60
  status:
    observedGeneration: 4
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "2"
      deployment.kubernetes.io/max-replicas: "3"
      deployment.kubernetes.io/revision: "40"
      field.cattle.io/publicEndpoints: '[{"addresses":["10.1.32.99"],"port":80,"protocol":"TCP","serviceName":"components:dev-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.99"],"port":443,"protocol":"TCP","serviceName":"components:dev-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.99"],"port":15672,"protocol":"TCP","serviceName":"components:dev-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.99"],"port":1883,"protocol":"TCP","serviceName":"components:dev-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.99"],"port":5432,"protocol":"TCP","serviceName":"components:dev-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.99"],"port":5672,"protocol":"TCP","serviceName":"components:dev-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.99"],"port":9000,"protocol":"TCP","serviceName":"components:dev-ingress-nginx-ingress-controller","allNodes":false}]'
      meta.helm.sh/release-name: dev-ingress
      meta.helm.sh/release-namespace: components
      service.beta.kubernetes.io/azure-load-balancer-internal: "true"
    creationTimestamp: "2022-08-16T19:23:25Z"
    generation: 2
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: dev-ingress
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: nginx-ingress-controller
      helm.sh/chart: nginx-ingress-controller-9.1.0
      pod-template-hash: 746d7d4947
    name: dev-ingress-nginx-ingress-controller-746d7d4947
    namespace: components
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: dev-ingress-nginx-ingress-controller
      uid: aeb976ac-8ea7-43c6-9ed1-03df10a711b7
    resourceVersion: "301113804"
    uid: d8c04681-2e9e-49c1-8277-57aeb14254ee
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: dev-ingress
        app.kubernetes.io/name: nginx-ingress-controller
        pod-template-hash: 746d7d4947
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/restartedAt: "2022-08-01T16:19:05-03:00"
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: controller
          app.kubernetes.io/instance: dev-ingress
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: nginx-ingress-controller
          helm.sh/chart: nginx-ingress-controller-9.1.0
          pod-template-hash: 746d7d4947
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/component: controller
                    app.kubernetes.io/instance: dev-ingress
                    app.kubernetes.io/name: nginx-ingress-controller
                namespaces:
                - components
                topologyKey: kubernetes.io/hostname
              weight: 1
        containers:
        - args:
          - /nginx-ingress-controller
          - --default-backend-service=components/dev-ingress-nginx-ingress-controller-default-backend
          - --election-id=ingress-controller-leader
          - --controller-class=k8s.io/ingress-nginx
          - --configmap=components/dev-ingress-nginx-ingress-controller
          - --tcp-services-configmap=components/dev-ingress-nginx-ingress-controller-tcp
          - --ingress-class=dev-ingress
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: docker.io/bitnami/nginx-ingress-controller:0.46.0-debian-10-r19
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: controller
          ports:
          - containerPort: 80
            name: http
            protocol: TCP
          - containerPort: 443
            name: https
            protocol: TCP
          - containerPort: 15672
            name: 15672-tcp
            protocol: TCP
          - containerPort: 1883
            name: 1883-tcp
            protocol: TCP
          - containerPort: 5432
            name: 5432-tcp
            protocol: TCP
          - containerPort: 5671
            name: 5671-tcp
            protocol: TCP
          - containerPort: 5672
            name: 5672-tcp
            protocol: TCP
          - containerPort: 6379
            name: 6379-tcp
            protocol: TCP
          - containerPort: 8883
            name: 8883-tcp
            protocol: TCP
          - containerPort: 9000
            name: 9000-tcp
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          securityContext:
            allowPrivilegeEscalation: true
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            runAsUser: 1001
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1001
        serviceAccount: dev-ingress-nginx-ingress-controller
        serviceAccountName: dev-ingress-nginx-ingress-controller
        terminationGracePeriodSeconds: 60
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "2"
      deployment.kubernetes.io/max-replicas: "3"
      deployment.kubernetes.io/revision: "42"
      field.cattle.io/publicEndpoints: '[{"addresses":["10.1.32.99"],"port":80,"protocol":"TCP","serviceName":"components:dev-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.99"],"port":443,"protocol":"TCP","serviceName":"components:dev-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.99"],"port":15672,"protocol":"TCP","serviceName":"components:dev-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.99"],"port":1883,"protocol":"TCP","serviceName":"components:dev-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.99"],"port":5671,"protocol":"TCP","serviceName":"components:dev-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.99"],"port":5672,"protocol":"TCP","serviceName":"components:dev-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.99"],"port":6379,"protocol":"TCP","serviceName":"components:dev-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.99"],"port":8883,"protocol":"TCP","serviceName":"components:dev-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.99"],"port":9000,"protocol":"TCP","serviceName":"components:dev-ingress-nginx-ingress-controller","allNodes":false}]'
      meta.helm.sh/release-name: dev-ingress
      meta.helm.sh/release-namespace: components
      service.beta.kubernetes.io/azure-load-balancer-internal: "true"
    creationTimestamp: "2022-11-02T17:32:23Z"
    generation: 2
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: dev-ingress
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: nginx-ingress-controller
      helm.sh/chart: nginx-ingress-controller-9.1.0
      pod-template-hash: 797c999f6c
    name: dev-ingress-nginx-ingress-controller-797c999f6c
    namespace: components
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: dev-ingress-nginx-ingress-controller
      uid: aeb976ac-8ea7-43c6-9ed1-03df10a711b7
    resourceVersion: "492029343"
    uid: 27c0438f-1e9b-4a34-ace4-f71ccc4e4363
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: dev-ingress
        app.kubernetes.io/name: nginx-ingress-controller
        pod-template-hash: 797c999f6c
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/restartedAt: "2022-08-01T16:19:05-03:00"
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: controller
          app.kubernetes.io/instance: dev-ingress
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: nginx-ingress-controller
          helm.sh/chart: nginx-ingress-controller-9.1.0
          pod-template-hash: 797c999f6c
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/component: controller
                    app.kubernetes.io/instance: dev-ingress
                    app.kubernetes.io/name: nginx-ingress-controller
                namespaces:
                - components
                topologyKey: kubernetes.io/hostname
              weight: 1
        containers:
        - args:
          - /nginx-ingress-controller
          - --default-backend-service=components/dev-ingress-nginx-ingress-controller-default-backend
          - --election-id=ingress-controller-leader
          - --controller-class=k8s.io/ingress-nginx
          - --configmap=components/dev-ingress-nginx-ingress-controller
          - --tcp-services-configmap=components/dev-ingress-nginx-ingress-controller-tcp
          - --ingress-class=dev-ingress
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: docker.io/bitnami/nginx-ingress-controller:0.46.0-debian-10-r19
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: controller
          ports:
          - containerPort: 80
            name: http
            protocol: TCP
          - containerPort: 443
            name: https
            protocol: TCP
          - containerPort: 15672
            name: 15672-tcp
            protocol: TCP
          - containerPort: 1883
            name: 1883-tcp
            protocol: TCP
          - containerPort: 5671
            name: 5671-tcp
            protocol: TCP
          - containerPort: 5672
            name: 5672-tcp
            protocol: TCP
          - containerPort: 6379
            name: 6379-tcp
            protocol: TCP
          - containerPort: 8883
            name: 8883-tcp
            protocol: TCP
          - containerPort: 9000
            name: 9000-tcp
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          securityContext:
            allowPrivilegeEscalation: true
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            runAsUser: 1001
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1001
        serviceAccount: dev-ingress-nginx-ingress-controller
        serviceAccountName: dev-ingress-nginx-ingress-controller
        terminationGracePeriodSeconds: 60
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "2"
      deployment.kubernetes.io/max-replicas: "3"
      deployment.kubernetes.io/revision: "39"
      field.cattle.io/publicEndpoints: '[{"addresses":["10.1.32.99"],"port":80,"protocol":"TCP","serviceName":"components:dev-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.99"],"port":443,"protocol":"TCP","serviceName":"components:dev-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.99"],"port":15672,"protocol":"TCP","serviceName":"components:dev-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.99"],"port":1883,"protocol":"TCP","serviceName":"components:dev-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.99"],"port":5432,"protocol":"TCP","serviceName":"components:dev-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.99"],"port":5672,"protocol":"TCP","serviceName":"components:dev-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.99"],"port":9000,"protocol":"TCP","serviceName":"components:dev-ingress-nginx-ingress-controller","allNodes":false}]'
      meta.helm.sh/release-name: dev-ingress
      meta.helm.sh/release-namespace: components
      service.beta.kubernetes.io/azure-load-balancer-internal: "true"
    creationTimestamp: "2022-08-01T19:19:05Z"
    generation: 4
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: dev-ingress
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: nginx-ingress-controller
      helm.sh/chart: nginx-ingress-controller-9.1.0
      pod-template-hash: 7b98dd6686
    name: dev-ingress-nginx-ingress-controller-7b98dd6686
    namespace: components
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: dev-ingress-nginx-ingress-controller
      uid: aeb976ac-8ea7-43c6-9ed1-03df10a711b7
    resourceVersion: "301114136"
    uid: a62211d1-8794-46fa-a849-fb567af57d85
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: dev-ingress
        app.kubernetes.io/name: nginx-ingress-controller
        pod-template-hash: 7b98dd6686
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/restartedAt: "2022-08-01T16:19:05-03:00"
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: controller
          app.kubernetes.io/instance: dev-ingress
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: nginx-ingress-controller
          helm.sh/chart: nginx-ingress-controller-9.1.0
          pod-template-hash: 7b98dd6686
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/component: controller
                    app.kubernetes.io/instance: dev-ingress
                    app.kubernetes.io/name: nginx-ingress-controller
                namespaces:
                - components
                topologyKey: kubernetes.io/hostname
              weight: 1
        containers:
        - args:
          - /nginx-ingress-controller
          - --default-backend-service=components/dev-ingress-nginx-ingress-controller-default-backend
          - --election-id=ingress-controller-leader
          - --configmap=components/dev-ingress-nginx-ingress-controller
          - --tcp-services-configmap=components/dev-ingress-nginx-ingress-controller-tcp
          - --ingress-class=dev-ingress
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: docker.io/bitnami/nginx-ingress-controller:0.46.0-debian-10-r19
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: controller
          ports:
          - containerPort: 80
            name: http
            protocol: TCP
          - containerPort: 443
            name: https
            protocol: TCP
          - containerPort: 15672
            name: 15672-tcp
            protocol: TCP
          - containerPort: 1883
            name: 1883-tcp
            protocol: TCP
          - containerPort: 5432
            name: 5432-tcp
            protocol: TCP
          - containerPort: 5671
            name: 5671-tcp
            protocol: TCP
          - containerPort: 5672
            name: 5672-tcp
            protocol: TCP
          - containerPort: 8883
            name: 8883-tcp
            protocol: TCP
          - containerPort: 9000
            name: 9000-tcp
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          securityContext:
            allowPrivilegeEscalation: true
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            runAsUser: 1001
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1001
        serviceAccount: dev-ingress-nginx-ingress-controller
        serviceAccountName: dev-ingress-nginx-ingress-controller
        terminationGracePeriodSeconds: 60
  status:
    observedGeneration: 4
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "2"
      deployment.kubernetes.io/max-replicas: "3"
      deployment.kubernetes.io/revision: "43"
      field.cattle.io/publicEndpoints: '[{"addresses":["10.1.32.99"],"port":80,"protocol":"TCP","serviceName":"components:dev-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.99"],"port":443,"protocol":"TCP","serviceName":"components:dev-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.99"],"port":15672,"protocol":"TCP","serviceName":"components:dev-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.99"],"port":1883,"protocol":"TCP","serviceName":"components:dev-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.99"],"port":5671,"protocol":"TCP","serviceName":"components:dev-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.99"],"port":5672,"protocol":"TCP","serviceName":"components:dev-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.99"],"port":6379,"protocol":"TCP","serviceName":"components:dev-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.99"],"port":8883,"protocol":"TCP","serviceName":"components:dev-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.99"],"port":9000,"protocol":"TCP","serviceName":"components:dev-ingress-nginx-ingress-controller","allNodes":false}]'
      meta.helm.sh/release-name: dev-ingress
      meta.helm.sh/release-namespace: components
      service.beta.kubernetes.io/azure-load-balancer-internal: "true"
    creationTimestamp: "2022-12-02T11:57:43Z"
    generation: 5
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: dev-ingress
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: nginx-ingress-controller
      helm.sh/chart: nginx-ingress-controller-9.1.0
      pod-template-hash: 7cd4bc8566
    name: dev-ingress-nginx-ingress-controller-7cd4bc8566
    namespace: components
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: dev-ingress-nginx-ingress-controller
      uid: aeb976ac-8ea7-43c6-9ed1-03df10a711b7
    resourceVersion: "493129348"
    uid: ab353266-6ee5-418b-b2ee-c0fdbac865f1
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: dev-ingress
        app.kubernetes.io/name: nginx-ingress-controller
        pod-template-hash: 7cd4bc8566
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/restartedAt: "2022-08-01T16:19:05-03:00"
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: controller
          app.kubernetes.io/instance: dev-ingress
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: nginx-ingress-controller
          helm.sh/chart: nginx-ingress-controller-9.1.0
          pod-template-hash: 7cd4bc8566
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/component: controller
                    app.kubernetes.io/instance: dev-ingress
                    app.kubernetes.io/name: nginx-ingress-controller
                namespaces:
                - components
                topologyKey: kubernetes.io/hostname
              weight: 1
        containers:
        - args:
          - /nginx-ingress-controller
          - --default-backend-service=components/dev-ingress-nginx-ingress-controller-default-backend
          - --election-id=ingress-controller-leader
          - --configmap=components/dev-ingress-nginx-ingress-controller
          - --tcp-services-configmap=components/dev-ingress-nginx-ingress-controller-tcp
          - --ingress-class=dev-ingress
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: docker.io/bitnami/nginx-ingress-controller:0.46.0-debian-10-r19
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: controller
          ports:
          - containerPort: 80
            name: http
            protocol: TCP
          - containerPort: 443
            name: https
            protocol: TCP
          - containerPort: 15672
            name: 15672-tcp
            protocol: TCP
          - containerPort: 1883
            name: 1883-tcp
            protocol: TCP
          - containerPort: 5671
            name: 5671-tcp
            protocol: TCP
          - containerPort: 5672
            name: 5672-tcp
            protocol: TCP
          - containerPort: 6379
            name: 6379-tcp
            protocol: TCP
          - containerPort: 8883
            name: 8883-tcp
            protocol: TCP
          - containerPort: 9000
            name: 9000-tcp
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          securityContext:
            allowPrivilegeEscalation: true
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            runAsUser: 1001
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1001
        serviceAccount: dev-ingress-nginx-ingress-controller
        serviceAccountName: dev-ingress-nginx-ingress-controller
        terminationGracePeriodSeconds: 60
  status:
    observedGeneration: 5
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "2"
      deployment.kubernetes.io/max-replicas: "3"
      deployment.kubernetes.io/revision: "41"
      field.cattle.io/publicEndpoints: '[{"addresses":["10.1.32.99"],"port":80,"protocol":"TCP","serviceName":"components:dev-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.99"],"port":443,"protocol":"TCP","serviceName":"components:dev-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.99"],"port":15672,"protocol":"TCP","serviceName":"components:dev-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.99"],"port":1883,"protocol":"TCP","serviceName":"components:dev-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.99"],"port":5671,"protocol":"TCP","serviceName":"components:dev-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.99"],"port":5672,"protocol":"TCP","serviceName":"components:dev-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.99"],"port":6379,"protocol":"TCP","serviceName":"components:dev-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.99"],"port":8883,"protocol":"TCP","serviceName":"components:dev-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.99"],"port":9000,"protocol":"TCP","serviceName":"components:dev-ingress-nginx-ingress-controller","allNodes":false}]'
      meta.helm.sh/release-name: dev-ingress
      meta.helm.sh/release-namespace: components
      service.beta.kubernetes.io/azure-load-balancer-internal: "true"
    creationTimestamp: "2022-08-16T19:23:43Z"
    generation: 5
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: dev-ingress
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: nginx-ingress-controller
      helm.sh/chart: nginx-ingress-controller-9.1.0
      pod-template-hash: b877fb4c4
    name: dev-ingress-nginx-ingress-controller-b877fb4c4
    namespace: components
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: dev-ingress-nginx-ingress-controller
      uid: aeb976ac-8ea7-43c6-9ed1-03df10a711b7
    resourceVersion: "492030062"
    uid: eccec03b-5238-4128-8f85-d3f540bc4090
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: dev-ingress
        app.kubernetes.io/name: nginx-ingress-controller
        pod-template-hash: b877fb4c4
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/restartedAt: "2022-08-01T16:19:05-03:00"
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: controller
          app.kubernetes.io/instance: dev-ingress
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: nginx-ingress-controller
          helm.sh/chart: nginx-ingress-controller-9.1.0
          pod-template-hash: b877fb4c4
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/component: controller
                    app.kubernetes.io/instance: dev-ingress
                    app.kubernetes.io/name: nginx-ingress-controller
                namespaces:
                - components
                topologyKey: kubernetes.io/hostname
              weight: 1
        containers:
        - args:
          - /nginx-ingress-controller
          - --default-backend-service=components/dev-ingress-nginx-ingress-controller-default-backend
          - --election-id=ingress-controller-leader
          - --configmap=components/dev-ingress-nginx-ingress-controller
          - --tcp-services-configmap=components/dev-ingress-nginx-ingress-controller-tcp
          - --ingress-class=dev-ingress
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: docker.io/bitnami/nginx-ingress-controller:0.46.0-debian-10-r19
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: controller
          ports:
          - containerPort: 80
            name: http
            protocol: TCP
          - containerPort: 443
            name: https
            protocol: TCP
          - containerPort: 15672
            name: 15672-tcp
            protocol: TCP
          - containerPort: 1883
            name: 1883-tcp
            protocol: TCP
          - containerPort: 5432
            name: 5432-tcp
            protocol: TCP
          - containerPort: 5671
            name: 5671-tcp
            protocol: TCP
          - containerPort: 5672
            name: 5672-tcp
            protocol: TCP
          - containerPort: 6379
            name: 6379-tcp
            protocol: TCP
          - containerPort: 8883
            name: 8883-tcp
            protocol: TCP
          - containerPort: 9000
            name: 9000-tcp
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          securityContext:
            allowPrivilegeEscalation: true
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            runAsUser: 1001
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1001
        serviceAccount: dev-ingress-nginx-ingress-controller
        serviceAccountName: dev-ingress-nginx-ingress-controller
        terminationGracePeriodSeconds: 60
  status:
    observedGeneration: 5
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "7"
      meta.helm.sh/release-name: dev-ingress
      meta.helm.sh/release-namespace: components
    creationTimestamp: "2022-12-03T19:43:45Z"
    generation: 1
    labels:
      app.kubernetes.io/component: default-backend
      app.kubernetes.io/instance: dev-ingress
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: nginx-ingress-controller
      helm.sh/chart: nginx-ingress-controller-9.3.22
      pod-template-hash: 594ffb64c
    name: dev-ingress-nginx-ingress-controller-default-backend-594ffb64c
    namespace: components
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: dev-ingress-nginx-ingress-controller-default-backend
      uid: 9d2ba9ae-34bc-4dba-8b95-1beadfe81109
    resourceVersion: "544849076"
    uid: 49c0f07b-f5b3-4b87-bffb-8097b616df7e
  spec:
    replicas: 1
    selector:
      matchLabels:
        app.kubernetes.io/component: default-backend
        app.kubernetes.io/instance: dev-ingress
        app.kubernetes.io/name: nginx-ingress-controller
        pod-template-hash: 594ffb64c
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/restartedAt: "2022-01-31T15:52:04-03:00"
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: default-backend
          app.kubernetes.io/instance: dev-ingress
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: nginx-ingress-controller
          helm.sh/chart: nginx-ingress-controller-9.3.22
          pod-template-hash: 594ffb64c
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/component: default-backend
                    app.kubernetes.io/instance: dev-ingress
                    app.kubernetes.io/name: nginx-ingress-controller
                topologyKey: kubernetes.io/hostname
              weight: 1
        containers:
        - image: docker.io/bitnami/nginx:1.22.1-debian-11-r7
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: http
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: default-backend
          ports:
          - containerPort: 8080
            name: http
            protocol: TCP
          readinessProbe:
            failureThreshold: 6
            httpGet:
              path: /healthz
              port: http
              scheme: HTTP
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 5
          resources: {}
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /opt/bitnami/nginx/conf/bitnami/
            name: nginx-config-volume
            readOnly: true
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1001
        serviceAccount: dev-ingress-nginx-ingress-controller
        serviceAccountName: dev-ingress-nginx-ingress-controller
        terminationGracePeriodSeconds: 60
        volumes:
        - configMap:
            defaultMode: 420
            items:
            - key: defaultBackend.conf
              path: defaultBackend.conf
            name: dev-ingress-nginx-ingress-controller-default-backend
          name: nginx-config-volume
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: dev-ingress
      meta.helm.sh/release-namespace: components
      service.beta.kubernetes.io/azure-load-balancer-internal: "true"
    creationTimestamp: "2021-06-08T19:30:39Z"
    generation: 2
    labels:
      app.kubernetes.io/component: default-backend
      app.kubernetes.io/instance: dev-ingress
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: nginx-ingress-controller
      helm.sh/chart: nginx-ingress-controller-7.6.9
      pod-template-hash: 5b8d9b9996
    name: dev-ingress-nginx-ingress-controller-default-backend-5b8d9b9996
    namespace: components
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: dev-ingress-nginx-ingress-controller-default-backend
      uid: 9d2ba9ae-34bc-4dba-8b95-1beadfe81109
    resourceVersion: "30490323"
    uid: 92563af8-7edd-4d00-b8b1-8070b5b41dff
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/component: default-backend
        app.kubernetes.io/instance: dev-ingress
        app.kubernetes.io/name: nginx-ingress-controller
        pod-template-hash: 5b8d9b9996
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: default-backend
          app.kubernetes.io/instance: dev-ingress
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: nginx-ingress-controller
          helm.sh/chart: nginx-ingress-controller-7.6.9
          pod-template-hash: 5b8d9b9996
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/component: default-backend
                    app.kubernetes.io/instance: dev-ingress
                    app.kubernetes.io/name: nginx-ingress-controller
                namespaces:
                - components
                topologyKey: kubernetes.io/hostname
              weight: 1
        containers:
        - image: docker.io/bitnami/nginx:1.19.10-debian-10-r35
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: http
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: default-backend
          ports:
          - containerPort: 8080
            name: http
            protocol: TCP
          readinessProbe:
            failureThreshold: 6
            httpGet:
              path: /healthz
              port: http
              scheme: HTTP
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 5
          resources: {}
          securityContext:
            runAsUser: 1001
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /opt/bitnami/nginx/conf/bitnami/
            name: nginx-config-volume
            readOnly: true
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1001
        serviceAccount: dev-ingress-nginx-ingress-controller
        serviceAccountName: dev-ingress-nginx-ingress-controller
        terminationGracePeriodSeconds: 60
        volumes:
        - configMap:
            defaultMode: 420
            items:
            - key: defaultBackend.conf
              path: defaultBackend.conf
            name: dev-ingress-nginx-ingress-controller-default-backend
          name: nginx-config-volume
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "4"
      deployment.kubernetes.io/revision-history: "2"
      meta.helm.sh/release-name: dev-ingress
      meta.helm.sh/release-namespace: components
      service.beta.kubernetes.io/azure-load-balancer-internal: "true"
    creationTimestamp: "2021-07-31T13:35:07Z"
    generation: 4
    labels:
      app.kubernetes.io/component: default-backend
      app.kubernetes.io/instance: dev-ingress
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: nginx-ingress-controller
      helm.sh/chart: nginx-ingress-controller-7.6.9
      pod-template-hash: 5bb7b96d55
    name: dev-ingress-nginx-ingress-controller-default-backend-5bb7b96d55
    namespace: components
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: dev-ingress-nginx-ingress-controller-default-backend
      uid: 9d2ba9ae-34bc-4dba-8b95-1beadfe81109
    resourceVersion: "186975833"
    uid: 94a65616-ce4a-44ff-9abd-916f6f706f74
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/component: default-backend
        app.kubernetes.io/instance: dev-ingress
        app.kubernetes.io/name: nginx-ingress-controller
        pod-template-hash: 5bb7b96d55
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/restartedAt: "2021-07-31T10:35:09-03:00"
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: default-backend
          app.kubernetes.io/instance: dev-ingress
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: nginx-ingress-controller
          helm.sh/chart: nginx-ingress-controller-7.6.9
          pod-template-hash: 5bb7b96d55
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/component: default-backend
                    app.kubernetes.io/instance: dev-ingress
                    app.kubernetes.io/name: nginx-ingress-controller
                namespaces:
                - components
                topologyKey: kubernetes.io/hostname
              weight: 1
        containers:
        - image: docker.io/bitnami/nginx:1.19.10-debian-10-r35
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: http
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: default-backend
          ports:
          - containerPort: 8080
            name: http
            protocol: TCP
          readinessProbe:
            failureThreshold: 6
            httpGet:
              path: /healthz
              port: http
              scheme: HTTP
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 5
          resources: {}
          securityContext:
            runAsUser: 1001
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /opt/bitnami/nginx/conf/bitnami/
            name: nginx-config-volume
            readOnly: true
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1001
        serviceAccount: dev-ingress-nginx-ingress-controller
        serviceAccountName: dev-ingress-nginx-ingress-controller
        terminationGracePeriodSeconds: 60
        volumes:
        - configMap:
            defaultMode: 420
            items:
            - key: defaultBackend.conf
              path: defaultBackend.conf
            name: dev-ingress-nginx-ingress-controller-default-backend
          name: nginx-config-volume
  status:
    observedGeneration: 4
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "5"
      deployment.kubernetes.io/revision-history: "3"
      meta.helm.sh/release-name: dev-ingress
      meta.helm.sh/release-namespace: components
      service.beta.kubernetes.io/azure-load-balancer-internal: "true"
    creationTimestamp: "2022-01-18T10:24:38Z"
    generation: 4
    labels:
      app.kubernetes.io/component: default-backend
      app.kubernetes.io/instance: dev-ingress
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: nginx-ingress-controller
      helm.sh/chart: nginx-ingress-controller-9.1.0
      pod-template-hash: 7686fc66cf
    name: dev-ingress-nginx-ingress-controller-default-backend-7686fc66cf
    namespace: components
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: dev-ingress-nginx-ingress-controller-default-backend
      uid: 9d2ba9ae-34bc-4dba-8b95-1beadfe81109
    resourceVersion: "201555300"
    uid: 05a8df4f-c172-42e1-bd15-062d61759512
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/component: default-backend
        app.kubernetes.io/instance: dev-ingress
        app.kubernetes.io/name: nginx-ingress-controller
        pod-template-hash: 7686fc66cf
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/restartedAt: "2021-07-31T10:35:09-03:00"
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: default-backend
          app.kubernetes.io/instance: dev-ingress
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: nginx-ingress-controller
          helm.sh/chart: nginx-ingress-controller-9.1.0
          pod-template-hash: 7686fc66cf
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/component: default-backend
                    app.kubernetes.io/instance: dev-ingress
                    app.kubernetes.io/name: nginx-ingress-controller
                namespaces:
                - components
                topologyKey: kubernetes.io/hostname
              weight: 1
        containers:
        - image: docker.io/bitnami/nginx:1.19.10-debian-10-r35
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: http
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: default-backend
          ports:
          - containerPort: 8080
            name: http
            protocol: TCP
          readinessProbe:
            failureThreshold: 6
            httpGet:
              path: /healthz
              port: http
              scheme: HTTP
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 5
          resources: {}
          securityContext:
            runAsUser: 1001
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /opt/bitnami/nginx/conf/bitnami/
            name: nginx-config-volume
            readOnly: true
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1001
        serviceAccount: dev-ingress-nginx-ingress-controller
        serviceAccountName: dev-ingress-nginx-ingress-controller
        terminationGracePeriodSeconds: 60
        volumes:
        - configMap:
            defaultMode: 420
            items:
            - key: defaultBackend.conf
              path: defaultBackend.conf
            name: dev-ingress-nginx-ingress-controller-default-backend
          name: nginx-config-volume
  status:
    observedGeneration: 4
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "6"
      meta.helm.sh/release-name: dev-ingress
      meta.helm.sh/release-namespace: components
      service.beta.kubernetes.io/azure-load-balancer-internal: "true"
    creationTimestamp: "2022-01-31T18:52:05Z"
    generation: 2
    labels:
      app.kubernetes.io/component: default-backend
      app.kubernetes.io/instance: dev-ingress
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: nginx-ingress-controller
      helm.sh/chart: nginx-ingress-controller-9.1.0
      pod-template-hash: 7b5d9d6d55
    name: dev-ingress-nginx-ingress-controller-default-backend-7b5d9d6d55
    namespace: components
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: dev-ingress-nginx-ingress-controller-default-backend
      uid: 9d2ba9ae-34bc-4dba-8b95-1beadfe81109
    resourceVersion: "493128654"
    uid: c3922d1e-8ef2-4f6e-9795-6f5a220f2a13
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/component: default-backend
        app.kubernetes.io/instance: dev-ingress
        app.kubernetes.io/name: nginx-ingress-controller
        pod-template-hash: 7b5d9d6d55
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/restartedAt: "2022-01-31T15:52:04-03:00"
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: default-backend
          app.kubernetes.io/instance: dev-ingress
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: nginx-ingress-controller
          helm.sh/chart: nginx-ingress-controller-9.1.0
          pod-template-hash: 7b5d9d6d55
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/component: default-backend
                    app.kubernetes.io/instance: dev-ingress
                    app.kubernetes.io/name: nginx-ingress-controller
                namespaces:
                - components
                topologyKey: kubernetes.io/hostname
              weight: 1
        containers:
        - image: docker.io/bitnami/nginx:1.19.10-debian-10-r35
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: http
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: default-backend
          ports:
          - containerPort: 8080
            name: http
            protocol: TCP
          readinessProbe:
            failureThreshold: 6
            httpGet:
              path: /healthz
              port: http
              scheme: HTTP
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 5
          resources: {}
          securityContext:
            runAsUser: 1001
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /opt/bitnami/nginx/conf/bitnami/
            name: nginx-config-volume
            readOnly: true
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1001
        serviceAccount: dev-ingress-nginx-ingress-controller
        serviceAccountName: dev-ingress-nginx-ingress-controller
        terminationGracePeriodSeconds: 60
        volumes:
        - configMap:
            defaultMode: 420
            items:
            - key: defaultBackend.conf
              path: defaultBackend.conf
            name: dev-ingress-nginx-ingress-controller-default-backend
          name: nginx-config-volume
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "2"
      deployment.kubernetes.io/max-replicas: "3"
      deployment.kubernetes.io/revision: "4"
      field.cattle.io/publicEndpoints: '[{"addresses":["20.81.66.64"],"port":80,"protocol":"TCP","serviceName":"components:external-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["20.81.66.64"],"port":443,"protocol":"TCP","serviceName":"components:external-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["20.81.66.64"],"port":1883,"protocol":"TCP","serviceName":"components:external-ingress-nginx-ingress-controller","allNodes":false}]'
      meta.helm.sh/release-name: external-ingress
      meta.helm.sh/release-namespace: components
    creationTimestamp: "2021-09-21T15:31:01Z"
    generation: 4
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: external-ingress
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: nginx-ingress-controller
      helm.sh/chart: nginx-ingress-controller-7.6.9
      pod-template-hash: 5c4bcfff79
    name: external-ingress-nginx-ingress-controller-5c4bcfff79
    namespace: components
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: external-ingress-nginx-ingress-controller
      uid: bd71804c-45a2-45d5-b3bb-74a7703097b9
    resourceVersion: "69690160"
    uid: 06989667-8f57-4a4f-b988-078493e0f745
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: external-ingress
        app.kubernetes.io/name: nginx-ingress-controller
        pod-template-hash: 5c4bcfff79
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/restartedAt: "2021-09-21T12:31:01-03:00"
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: controller
          app.kubernetes.io/instance: external-ingress
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: nginx-ingress-controller
          helm.sh/chart: nginx-ingress-controller-7.6.9
          pod-template-hash: 5c4bcfff79
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/component: controller
                    app.kubernetes.io/instance: external-ingress
                    app.kubernetes.io/name: nginx-ingress-controller
                namespaces:
                - components
                topologyKey: kubernetes.io/hostname
              weight: 1
        containers:
        - args:
          - /nginx-ingress-controller
          - --default-backend-service=components/external-ingress-nginx-ingress-controller-default-backend
          - --election-id=ingress-controller-leader
          - --ingress-class=external-ingress
          - --configmap=components/external-ingress-nginx-ingress-controller
          - --tcp-services-configmap=components/external-ingress-nginx-ingress-controller-tcp
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: docker.io/bitnami/nginx-ingress-controller:0.46.0-debian-10-r19
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: controller
          ports:
          - containerPort: 80
            name: http
            protocol: TCP
          - containerPort: 443
            name: https
            protocol: TCP
          - containerPort: 10254
            name: metrics
            protocol: TCP
          - containerPort: 1883
            name: 1883-tcp
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          securityContext:
            allowPrivilegeEscalation: true
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            runAsUser: 1001
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1001
        serviceAccount: external-ingress-nginx-ingress-controller
        serviceAccountName: external-ingress-nginx-ingress-controller
        terminationGracePeriodSeconds: 60
  status:
    observedGeneration: 4
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "2"
      deployment.kubernetes.io/max-replicas: "3"
      deployment.kubernetes.io/revision: "3"
      field.cattle.io/publicEndpoints: '[{"addresses":["20.81.66.64"],"port":80,"protocol":"TCP","serviceName":"components:external-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["20.81.66.64"],"port":443,"protocol":"TCP","serviceName":"components:external-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["20.81.66.64"],"port":1883,"protocol":"TCP","serviceName":"components:external-ingress-nginx-ingress-controller","allNodes":false}]'
      meta.helm.sh/release-name: external-ingress
      meta.helm.sh/release-namespace: components
    creationTimestamp: "2021-09-21T15:26:15Z"
    generation: 4
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: external-ingress
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: nginx-ingress-controller
      helm.sh/chart: nginx-ingress-controller-7.6.9
      pod-template-hash: 6c898f8f9b
    name: external-ingress-nginx-ingress-controller-6c898f8f9b
    namespace: components
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: external-ingress-nginx-ingress-controller
      uid: bd71804c-45a2-45d5-b3bb-74a7703097b9
    resourceVersion: "69684088"
    uid: 4d72233c-7f6c-4b3d-b69a-a9c05ef4ee7b
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: external-ingress
        app.kubernetes.io/name: nginx-ingress-controller
        pod-template-hash: 6c898f8f9b
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/restartedAt: "2021-09-21T12:26:15-03:00"
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: controller
          app.kubernetes.io/instance: external-ingress
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: nginx-ingress-controller
          helm.sh/chart: nginx-ingress-controller-7.6.9
          pod-template-hash: 6c898f8f9b
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/component: controller
                    app.kubernetes.io/instance: external-ingress
                    app.kubernetes.io/name: nginx-ingress-controller
                namespaces:
                - components
                topologyKey: kubernetes.io/hostname
              weight: 1
        containers:
        - args:
          - /nginx-ingress-controller
          - --default-backend-service=components/external-ingress-nginx-ingress-controller-default-backend
          - --election-id=ingress-controller-leader
          - --ingress-class=external-ingress
          - --configmap=components/external-ingress-nginx-ingress-controller
          - --tcp-services-configmap=components/external-ingress-nginx-ingress-controller-tcp
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: docker.io/bitnami/nginx-ingress-controller:0.46.0-debian-10-r19
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: controller
          ports:
          - containerPort: 80
            name: http
            protocol: TCP
          - containerPort: 443
            name: https
            protocol: TCP
          - containerPort: 10254
            name: metrics
            protocol: TCP
          - containerPort: 1883
            name: 1883-tcp
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          securityContext:
            allowPrivilegeEscalation: true
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            runAsUser: 1001
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1001
        serviceAccount: external-ingress-nginx-ingress-controller
        serviceAccountName: external-ingress-nginx-ingress-controller
        terminationGracePeriodSeconds: 60
  status:
    observedGeneration: 4
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "2"
      deployment.kubernetes.io/max-replicas: "3"
      deployment.kubernetes.io/revision: "8"
      field.cattle.io/publicEndpoints: '[{"addresses":["20.81.66.64"],"port":80,"protocol":"TCP","serviceName":"components:external-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["20.81.66.64"],"port":443,"protocol":"TCP","serviceName":"components:external-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["20.81.66.64"],"port":1883,"protocol":"TCP","serviceName":"components:external-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["20.81.66.64"],"port":8883,"protocol":"TCP","serviceName":"components:external-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["20.81.66.64"],"port":9000,"protocol":"TCP","serviceName":"components:external-ingress-nginx-ingress-controller","allNodes":false}]'
      meta.helm.sh/release-name: external-ingress
      meta.helm.sh/release-namespace: components
    creationTimestamp: "2022-12-03T19:43:49Z"
    generation: 2
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: external-ingress
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: nginx-ingress-controller
      helm.sh/chart: nginx-ingress-controller-9.3.22
      pod-template-hash: 6d46d646f6
    name: external-ingress-nginx-ingress-controller-6d46d646f6
    namespace: components
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: external-ingress-nginx-ingress-controller
      uid: bd71804c-45a2-45d5-b3bb-74a7703097b9
    resourceVersion: "564973512"
    uid: 2bf84fe5-eaa2-4385-9256-35f83433f751
  spec:
    replicas: 2
    selector:
      matchLabels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: external-ingress
        app.kubernetes.io/name: nginx-ingress-controller
        pod-template-hash: 6d46d646f6
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/restartedAt: "2021-09-21T12:40:34-03:00"
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: controller
          app.kubernetes.io/instance: external-ingress
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: nginx-ingress-controller
          helm.sh/chart: nginx-ingress-controller-9.3.22
          pod-template-hash: 6d46d646f6
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/component: controller
                    app.kubernetes.io/instance: external-ingress
                    app.kubernetes.io/name: nginx-ingress-controller
                topologyKey: kubernetes.io/hostname
              weight: 1
        containers:
        - args:
          - /nginx-ingress-controller
          - --default-backend-service=components/external-ingress-nginx-ingress-controller-default-backend
          - --election-id=ingress-controller-leader
          - --controller-class=k8s.io/ingress-nginx
          - --configmap=components/external-ingress-nginx-ingress-controller
          - --tcp-services-configmap=components/external-ingress-nginx-ingress-controller-tcp
          - --ingress-class=external-ingress
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: docker.io/bitnami/nginx-ingress-controller:1.5.1-debian-11-r5
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: controller
          ports:
          - containerPort: 80
            name: http
            protocol: TCP
          - containerPort: 443
            name: https
            protocol: TCP
          - containerPort: 1883
            name: 1883-tcp
            protocol: TCP
          - containerPort: 8883
            name: 8883-tcp
            protocol: TCP
          - containerPort: 9000
            name: 9000-tcp
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          securityContext:
            allowPrivilegeEscalation: true
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            runAsNonRoot: true
            runAsUser: 1001
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1001
        serviceAccount: external-ingress-nginx-ingress-controller
        serviceAccountName: external-ingress-nginx-ingress-controller
        terminationGracePeriodSeconds: 60
  status:
    availableReplicas: 2
    fullyLabeledReplicas: 2
    observedGeneration: 2
    readyReplicas: 2
    replicas: 2
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "2"
      deployment.kubernetes.io/max-replicas: "3"
      deployment.kubernetes.io/revision: "2"
      field.cattle.io/publicEndpoints: '[{"addresses":["20.81.66.64"],"port":80,"protocol":"TCP","serviceName":"components:external-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["20.81.66.64"],"port":443,"protocol":"TCP","serviceName":"components:external-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["20.81.66.64"],"port":1883,"protocol":"TCP","serviceName":"components:external-ingress-nginx-ingress-controller","allNodes":false}]'
      meta.helm.sh/release-name: external-ingress
      meta.helm.sh/release-namespace: components
    creationTimestamp: "2021-09-21T15:09:40Z"
    generation: 4
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: external-ingress
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: nginx-ingress-controller
      helm.sh/chart: nginx-ingress-controller-7.6.9
      pod-template-hash: 6fdd989877
    name: external-ingress-nginx-ingress-controller-6fdd989877
    namespace: components
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: external-ingress-nginx-ingress-controller
      uid: bd71804c-45a2-45d5-b3bb-74a7703097b9
    resourceVersion: "69681221"
    uid: 951ff7f3-7421-46f5-afc5-9c6be075626e
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: external-ingress
        app.kubernetes.io/name: nginx-ingress-controller
        pod-template-hash: 6fdd989877
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/restartedAt: "2021-09-21T12:09:40-03:00"
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: controller
          app.kubernetes.io/instance: external-ingress
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: nginx-ingress-controller
          helm.sh/chart: nginx-ingress-controller-7.6.9
          pod-template-hash: 6fdd989877
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/component: controller
                    app.kubernetes.io/instance: external-ingress
                    app.kubernetes.io/name: nginx-ingress-controller
                namespaces:
                - components
                topologyKey: kubernetes.io/hostname
              weight: 1
        containers:
        - args:
          - /nginx-ingress-controller
          - --default-backend-service=components/external-ingress-nginx-ingress-controller-default-backend
          - --election-id=ingress-controller-leader
          - --ingress-class=external-ingress
          - --configmap=components/external-ingress-nginx-ingress-controller
          - --tcp-services-configmap=components/external-ingress-nginx-ingress-controller-tcp
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: docker.io/bitnami/nginx-ingress-controller:0.46.0-debian-10-r19
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: controller
          ports:
          - containerPort: 80
            name: http
            protocol: TCP
          - containerPort: 443
            name: https
            protocol: TCP
          - containerPort: 10254
            name: metrics
            protocol: TCP
          - containerPort: 1883
            name: 1883-tcp
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          securityContext:
            allowPrivilegeEscalation: true
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            runAsUser: 1001
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1001
        serviceAccount: external-ingress-nginx-ingress-controller
        serviceAccountName: external-ingress-nginx-ingress-controller
        terminationGracePeriodSeconds: 60
  status:
    observedGeneration: 4
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "2"
      deployment.kubernetes.io/max-replicas: "3"
      deployment.kubernetes.io/revision: "1"
      field.cattle.io/publicEndpoints: '[{"addresses":["20.81.66.64"],"port":80,"protocol":"TCP","serviceName":"components:external-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["20.81.66.64"],"port":443,"protocol":"TCP","serviceName":"components:external-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["20.81.66.64"],"port":1883,"protocol":"TCP","serviceName":"components:external-ingress-nginx-ingress-controller","allNodes":false}]'
      meta.helm.sh/release-name: external-ingress
      meta.helm.sh/release-namespace: components
    creationTimestamp: "2021-08-16T14:06:29Z"
    generation: 4
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: external-ingress
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: nginx-ingress-controller
      helm.sh/chart: nginx-ingress-controller-7.6.9
      pod-template-hash: 747d57d7cf
    name: external-ingress-nginx-ingress-controller-747d57d7cf
    namespace: components
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: external-ingress-nginx-ingress-controller
      uid: bd71804c-45a2-45d5-b3bb-74a7703097b9
    resourceVersion: "69671072"
    uid: bf1cdf15-bd09-453b-9e3e-01e7aeebedcf
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: external-ingress
        app.kubernetes.io/name: nginx-ingress-controller
        pod-template-hash: 747d57d7cf
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: controller
          app.kubernetes.io/instance: external-ingress
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: nginx-ingress-controller
          helm.sh/chart: nginx-ingress-controller-7.6.9
          pod-template-hash: 747d57d7cf
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/component: controller
                    app.kubernetes.io/instance: external-ingress
                    app.kubernetes.io/name: nginx-ingress-controller
                namespaces:
                - components
                topologyKey: kubernetes.io/hostname
              weight: 1
        containers:
        - args:
          - /nginx-ingress-controller
          - --default-backend-service=components/external-ingress-nginx-ingress-controller-default-backend
          - --election-id=ingress-controller-leader
          - --ingress-class=external-ingress
          - --configmap=components/external-ingress-nginx-ingress-controller
          - --tcp-services-configmap=components/external-ingress-nginx-ingress-controller-tcp
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: docker.io/bitnami/nginx-ingress-controller:0.46.0-debian-10-r19
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: controller
          ports:
          - containerPort: 80
            name: http
            protocol: TCP
          - containerPort: 443
            name: https
            protocol: TCP
          - containerPort: 10254
            name: metrics
            protocol: TCP
          - containerPort: 1883
            name: 1883-tcp
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          securityContext:
            allowPrivilegeEscalation: true
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            runAsUser: 1001
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1001
        serviceAccount: external-ingress-nginx-ingress-controller
        serviceAccountName: external-ingress-nginx-ingress-controller
        terminationGracePeriodSeconds: 60
  status:
    observedGeneration: 4
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "2"
      deployment.kubernetes.io/max-replicas: "3"
      deployment.kubernetes.io/revision: "5"
      field.cattle.io/publicEndpoints: '[{"addresses":["20.81.66.64"],"port":80,"protocol":"TCP","serviceName":"components:external-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["20.81.66.64"],"port":443,"protocol":"TCP","serviceName":"components:external-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["20.81.66.64"],"port":1883,"protocol":"TCP","serviceName":"components:external-ingress-nginx-ingress-controller","allNodes":false}]'
      meta.helm.sh/release-name: external-ingress
      meta.helm.sh/release-namespace: components
    creationTimestamp: "2021-09-21T15:40:35Z"
    generation: 4
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: external-ingress
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: nginx-ingress-controller
      helm.sh/chart: nginx-ingress-controller-7.6.9
      pod-template-hash: 779dd6f567
    name: external-ingress-nginx-ingress-controller-779dd6f567
    namespace: components
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: external-ingress-nginx-ingress-controller
      uid: bd71804c-45a2-45d5-b3bb-74a7703097b9
    resourceVersion: "69813150"
    uid: 43fdd397-8efc-408a-ae77-df1d1c323583
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: external-ingress
        app.kubernetes.io/name: nginx-ingress-controller
        pod-template-hash: 779dd6f567
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/restartedAt: "2021-09-21T12:40:34-03:00"
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: controller
          app.kubernetes.io/instance: external-ingress
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: nginx-ingress-controller
          helm.sh/chart: nginx-ingress-controller-7.6.9
          pod-template-hash: 779dd6f567
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/component: controller
                    app.kubernetes.io/instance: external-ingress
                    app.kubernetes.io/name: nginx-ingress-controller
                namespaces:
                - components
                topologyKey: kubernetes.io/hostname
              weight: 1
        containers:
        - args:
          - /nginx-ingress-controller
          - --default-backend-service=components/external-ingress-nginx-ingress-controller-default-backend
          - --election-id=ingress-controller-leader
          - --ingress-class=external-ingress
          - --configmap=components/external-ingress-nginx-ingress-controller
          - --tcp-services-configmap=components/external-ingress-nginx-ingress-controller-tcp
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: docker.io/bitnami/nginx-ingress-controller:0.46.0-debian-10-r19
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: controller
          ports:
          - containerPort: 80
            name: http
            protocol: TCP
          - containerPort: 443
            name: https
            protocol: TCP
          - containerPort: 10254
            name: metrics
            protocol: TCP
          - containerPort: 1883
            name: 1883-tcp
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          securityContext:
            allowPrivilegeEscalation: true
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            runAsUser: 1001
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1001
        serviceAccount: external-ingress-nginx-ingress-controller
        serviceAccountName: external-ingress-nginx-ingress-controller
        terminationGracePeriodSeconds: 60
  status:
    observedGeneration: 4
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "2"
      deployment.kubernetes.io/max-replicas: "3"
      deployment.kubernetes.io/revision: "7"
      field.cattle.io/publicEndpoints: '[{"addresses":["20.81.66.64"],"port":80,"protocol":"TCP","serviceName":"components:external-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["20.81.66.64"],"port":443,"protocol":"TCP","serviceName":"components:external-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["20.81.66.64"],"port":1883,"protocol":"TCP","serviceName":"components:external-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["20.81.66.64"],"port":8883,"protocol":"TCP","serviceName":"components:external-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["20.81.66.64"],"port":9000,"protocol":"TCP","serviceName":"components:external-ingress-nginx-ingress-controller","allNodes":false}]'
      meta.helm.sh/release-name: external-ingress
      meta.helm.sh/release-namespace: components
    creationTimestamp: "2022-01-31T18:54:51Z"
    generation: 4
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: external-ingress
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: nginx-ingress-controller
      helm.sh/chart: nginx-ingress-controller-7.6.9
      pod-template-hash: 8fddf78d
    name: external-ingress-nginx-ingress-controller-8fddf78d
    namespace: components
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: external-ingress-nginx-ingress-controller
      uid: bd71804c-45a2-45d5-b3bb-74a7703097b9
    resourceVersion: "493129267"
    uid: a79c7c32-b987-4e05-a348-b4502ac2fafb
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: external-ingress
        app.kubernetes.io/name: nginx-ingress-controller
        pod-template-hash: 8fddf78d
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/restartedAt: "2021-09-21T12:40:34-03:00"
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: controller
          app.kubernetes.io/instance: external-ingress
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: nginx-ingress-controller
          helm.sh/chart: nginx-ingress-controller-7.6.9
          pod-template-hash: 8fddf78d
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/component: controller
                    app.kubernetes.io/instance: external-ingress
                    app.kubernetes.io/name: nginx-ingress-controller
                namespaces:
                - components
                topologyKey: kubernetes.io/hostname
              weight: 1
        containers:
        - args:
          - /nginx-ingress-controller
          - --default-backend-service=components/external-ingress-nginx-ingress-controller-default-backend
          - --election-id=ingress-controller-leader
          - --ingress-class=external-ingress
          - --configmap=components/external-ingress-nginx-ingress-controller
          - --tcp-services-configmap=components/external-ingress-nginx-ingress-controller-tcp
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: docker.io/bitnami/nginx-ingress-controller:0.46.0-debian-10-r19
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: controller
          ports:
          - containerPort: 80
            name: http
            protocol: TCP
          - containerPort: 443
            name: https
            protocol: TCP
          - containerPort: 8883
            name: 8883-tcp
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          securityContext:
            allowPrivilegeEscalation: true
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            runAsUser: 1001
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1001
        serviceAccount: external-ingress-nginx-ingress-controller
        serviceAccountName: external-ingress-nginx-ingress-controller
        terminationGracePeriodSeconds: 60
  status:
    observedGeneration: 4
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "2"
      deployment.kubernetes.io/max-replicas: "3"
      deployment.kubernetes.io/revision: "6"
      field.cattle.io/publicEndpoints: '[{"addresses":["20.81.66.64"],"port":80,"protocol":"TCP","serviceName":"components:external-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["20.81.66.64"],"port":443,"protocol":"TCP","serviceName":"components:external-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["20.81.66.64"],"port":1883,"protocol":"TCP","serviceName":"components:external-ingress-nginx-ingress-controller","allNodes":false}]'
      meta.helm.sh/release-name: external-ingress
      meta.helm.sh/release-namespace: components
    creationTimestamp: "2021-09-21T18:58:23Z"
    generation: 4
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: external-ingress
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: nginx-ingress-controller
      helm.sh/chart: nginx-ingress-controller-7.6.9
      pod-template-hash: b7d4b66d8
    name: external-ingress-nginx-ingress-controller-b7d4b66d8
    namespace: components
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: external-ingress-nginx-ingress-controller
      uid: bd71804c-45a2-45d5-b3bb-74a7703097b9
    resourceVersion: "201558155"
    uid: baee71b3-210c-44bf-b79b-b62e61a5eb0b
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: external-ingress
        app.kubernetes.io/name: nginx-ingress-controller
        pod-template-hash: b7d4b66d8
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/restartedAt: "2021-09-21T12:40:34-03:00"
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: controller
          app.kubernetes.io/instance: external-ingress
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: nginx-ingress-controller
          helm.sh/chart: nginx-ingress-controller-7.6.9
          pod-template-hash: b7d4b66d8
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/component: controller
                    app.kubernetes.io/instance: external-ingress
                    app.kubernetes.io/name: nginx-ingress-controller
                namespaces:
                - components
                topologyKey: kubernetes.io/hostname
              weight: 1
        containers:
        - args:
          - /nginx-ingress-controller
          - --default-backend-service=components/external-ingress-nginx-ingress-controller-default-backend
          - --election-id=ingress-controller-leader
          - --ingress-class=external-ingress
          - --configmap=components/external-ingress-nginx-ingress-controller
          - --tcp-services-configmap=components/external-ingress-nginx-ingress-controller-tcp
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: docker.io/bitnami/nginx-ingress-controller:0.46.0-debian-10-r19
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: controller
          ports:
          - containerPort: 80
            name: http
            protocol: TCP
          - containerPort: 443
            name: https
            protocol: TCP
          - containerPort: 1883
            name: 1883-tcp
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          securityContext:
            allowPrivilegeEscalation: true
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            runAsUser: 1001
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1001
        serviceAccount: external-ingress-nginx-ingress-controller
        serviceAccountName: external-ingress-nginx-ingress-controller
        terminationGracePeriodSeconds: 60
  status:
    observedGeneration: 4
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "3"
      meta.helm.sh/release-name: external-ingress
      meta.helm.sh/release-namespace: components
    creationTimestamp: "2022-12-03T19:43:49Z"
    generation: 1
    labels:
      app.kubernetes.io/component: default-backend
      app.kubernetes.io/instance: external-ingress
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: nginx-ingress-controller
      helm.sh/chart: nginx-ingress-controller-9.3.22
      pod-template-hash: 6694489fdd
    name: external-ingress-nginx-ingress-controller-default-backend-6694489fdd
    namespace: components
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: external-ingress-nginx-ingress-controller-default-backend
      uid: 96d9add7-165b-48ec-b367-9a649bf7a2b6
    resourceVersion: "564970526"
    uid: dc745d27-24ca-43ae-81d7-67b4a7751f5a
  spec:
    replicas: 1
    selector:
      matchLabels:
        app.kubernetes.io/component: default-backend
        app.kubernetes.io/instance: external-ingress
        app.kubernetes.io/name: nginx-ingress-controller
        pod-template-hash: 6694489fdd
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/restartedAt: "2021-09-21T12:09:44-03:00"
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: default-backend
          app.kubernetes.io/instance: external-ingress
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: nginx-ingress-controller
          helm.sh/chart: nginx-ingress-controller-9.3.22
          pod-template-hash: 6694489fdd
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/component: default-backend
                    app.kubernetes.io/instance: external-ingress
                    app.kubernetes.io/name: nginx-ingress-controller
                topologyKey: kubernetes.io/hostname
              weight: 1
        containers:
        - image: docker.io/bitnami/nginx:1.22.1-debian-11-r7
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: http
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: default-backend
          ports:
          - containerPort: 8080
            name: http
            protocol: TCP
          readinessProbe:
            failureThreshold: 6
            httpGet:
              path: /healthz
              port: http
              scheme: HTTP
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 5
          resources: {}
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /opt/bitnami/nginx/conf/bitnami/
            name: nginx-config-volume
            readOnly: true
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1001
        serviceAccount: external-ingress-nginx-ingress-controller
        serviceAccountName: external-ingress-nginx-ingress-controller
        terminationGracePeriodSeconds: 60
        volumes:
        - configMap:
            defaultMode: 420
            items:
            - key: defaultBackend.conf
              path: defaultBackend.conf
            name: external-ingress-nginx-ingress-controller-default-backend
          name: nginx-config-volume
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "2"
      meta.helm.sh/release-name: external-ingress
      meta.helm.sh/release-namespace: components
    creationTimestamp: "2021-09-21T15:09:45Z"
    generation: 2
    labels:
      app.kubernetes.io/component: default-backend
      app.kubernetes.io/instance: external-ingress
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: nginx-ingress-controller
      helm.sh/chart: nginx-ingress-controller-7.6.9
      pod-template-hash: 67c455cbb4
    name: external-ingress-nginx-ingress-controller-default-backend-67c455cbb4
    namespace: components
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: external-ingress-nginx-ingress-controller-default-backend
      uid: 96d9add7-165b-48ec-b367-9a649bf7a2b6
    resourceVersion: "493128810"
    uid: 4f6dcba5-cf21-443d-9fee-91193c322c17
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/component: default-backend
        app.kubernetes.io/instance: external-ingress
        app.kubernetes.io/name: nginx-ingress-controller
        pod-template-hash: 67c455cbb4
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/restartedAt: "2021-09-21T12:09:44-03:00"
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: default-backend
          app.kubernetes.io/instance: external-ingress
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: nginx-ingress-controller
          helm.sh/chart: nginx-ingress-controller-7.6.9
          pod-template-hash: 67c455cbb4
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/component: default-backend
                    app.kubernetes.io/instance: external-ingress
                    app.kubernetes.io/name: nginx-ingress-controller
                namespaces:
                - components
                topologyKey: kubernetes.io/hostname
              weight: 1
        containers:
        - image: docker.io/bitnami/nginx:1.19.10-debian-10-r35
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: http
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: default-backend
          ports:
          - containerPort: 8080
            name: http
            protocol: TCP
          readinessProbe:
            failureThreshold: 6
            httpGet:
              path: /healthz
              port: http
              scheme: HTTP
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 5
          resources: {}
          securityContext:
            runAsUser: 1001
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /opt/bitnami/nginx/conf/bitnami/
            name: nginx-config-volume
            readOnly: true
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1001
        serviceAccount: external-ingress-nginx-ingress-controller
        serviceAccountName: external-ingress-nginx-ingress-controller
        terminationGracePeriodSeconds: 60
        volumes:
        - configMap:
            defaultMode: 420
            items:
            - key: defaultBackend.conf
              path: defaultBackend.conf
            name: external-ingress-nginx-ingress-controller-default-backend
          name: nginx-config-volume
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: external-ingress
      meta.helm.sh/release-namespace: components
    creationTimestamp: "2021-08-16T14:06:29Z"
    generation: 2
    labels:
      app.kubernetes.io/component: default-backend
      app.kubernetes.io/instance: external-ingress
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: nginx-ingress-controller
      helm.sh/chart: nginx-ingress-controller-7.6.9
      pod-template-hash: bbbcf5bf4
    name: external-ingress-nginx-ingress-controller-default-backend-bbbcf5bf4
    namespace: components
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: external-ingress-nginx-ingress-controller-default-backend
      uid: 96d9add7-165b-48ec-b367-9a649bf7a2b6
    resourceVersion: "69670443"
    uid: cab40df6-c879-46c7-95de-c4d01d05b858
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/component: default-backend
        app.kubernetes.io/instance: external-ingress
        app.kubernetes.io/name: nginx-ingress-controller
        pod-template-hash: bbbcf5bf4
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: default-backend
          app.kubernetes.io/instance: external-ingress
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: nginx-ingress-controller
          helm.sh/chart: nginx-ingress-controller-7.6.9
          pod-template-hash: bbbcf5bf4
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/component: default-backend
                    app.kubernetes.io/instance: external-ingress
                    app.kubernetes.io/name: nginx-ingress-controller
                namespaces:
                - components
                topologyKey: kubernetes.io/hostname
              weight: 1
        containers:
        - image: docker.io/bitnami/nginx:1.19.10-debian-10-r35
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: http
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: default-backend
          ports:
          - containerPort: 8080
            name: http
            protocol: TCP
          readinessProbe:
            failureThreshold: 6
            httpGet:
              path: /healthz
              port: http
              scheme: HTTP
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 5
          resources: {}
          securityContext:
            runAsUser: 1001
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /opt/bitnami/nginx/conf/bitnami/
            name: nginx-config-volume
            readOnly: true
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1001
        serviceAccount: external-ingress-nginx-ingress-controller
        serviceAccountName: external-ingress-nginx-ingress-controller
        terminationGracePeriodSeconds: 60
        volumes:
        - configMap:
            defaultMode: 420
            items:
            - key: defaultBackend.conf
              path: defaultBackend.conf
            name: external-ingress-nginx-ingress-controller-default-backend
          name: nginx-config-volume
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "2"
      deployment.kubernetes.io/max-replicas: "3"
      deployment.kubernetes.io/revision: "6"
      field.cattle.io/publicEndpoints: '[{"addresses":["10.1.43.45"],"port":80,"protocol":"TCP","serviceName":"components:lab-devops-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.43.45"],"port":443,"protocol":"TCP","serviceName":"components:lab-devops-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.43.45"],"port":15672,"protocol":"TCP","serviceName":"components:lab-devops-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.43.45"],"port":1883,"protocol":"TCP","serviceName":"components:lab-devops-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.43.45"],"port":5432,"protocol":"TCP","serviceName":"components:lab-devops-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.43.45"],"port":5672,"protocol":"TCP","serviceName":"components:lab-devops-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.43.45"],"port":8883,"protocol":"TCP","serviceName":"components:lab-devops-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.43.45"],"port":9000,"protocol":"TCP","serviceName":"components:lab-devops-ingress-nginx-ingress-controller","allNodes":false}]'
      meta.helm.sh/release-name: lab-devops-ingress
      meta.helm.sh/release-namespace: components
      service.beta.kubernetes.io/azure-load-balancer-internal: "true"
    creationTimestamp: "2022-09-26T19:36:47Z"
    generation: 4
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: lab-devops-ingress
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: nginx-ingress-controller
      helm.sh/chart: nginx-ingress-controller-9.1.0
      pod-template-hash: 55bb6876d9
    name: lab-devops-ingress-nginx-ingress-controller-55bb6876d9
    namespace: components
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: lab-devops-ingress-nginx-ingress-controller
      uid: 4c4ffd8e-baaa-4a2b-8800-e6e2392332b6
    resourceVersion: "372930683"
    uid: 8477c717-8bac-4fac-b803-6e4c0449b75f
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: lab-devops-ingress
        app.kubernetes.io/name: nginx-ingress-controller
        pod-template-hash: 55bb6876d9
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/restartedAt: "2022-09-26T16:36:47-03:00"
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: controller
          app.kubernetes.io/instance: lab-devops-ingress
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: nginx-ingress-controller
          helm.sh/chart: nginx-ingress-controller-9.1.0
          pod-template-hash: 55bb6876d9
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/component: controller
                    app.kubernetes.io/instance: lab-devops-ingress
                    app.kubernetes.io/name: nginx-ingress-controller
                namespaces:
                - components
                topologyKey: kubernetes.io/hostname
              weight: 1
        containers:
        - args:
          - /nginx-ingress-controller
          - --default-backend-service=components/lab-devops-ingress-nginx-ingress-controller-default-backend
          - --election-id=ingress-controller-leader
          - --configmap=components/lab-devops-ingress-nginx-ingress-controller
          - --tcp-services-configmap=components/lab-devops-ingress-nginx-ingress-controller-tcp
          - --ingress-class=lab-devops-ingress
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: docker.io/bitnami/nginx-ingress-controller:0.46.0-debian-10-r19
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: controller
          ports:
          - containerPort: 80
            name: http
            protocol: TCP
          - containerPort: 443
            name: https
            protocol: TCP
          - containerPort: 15672
            name: 15672-tcp
            protocol: TCP
          - containerPort: 1883
            name: 1883-tcp
            protocol: TCP
          - containerPort: 5432
            name: 5432-tcp
            protocol: TCP
          - containerPort: 5672
            name: 5672-tcp
            protocol: TCP
          - containerPort: 8883
            name: 8883-tcp
            protocol: TCP
          - containerPort: 9000
            name: 9000-tcp
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          securityContext:
            allowPrivilegeEscalation: true
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            runAsUser: 1001
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1001
        serviceAccount: lab-devops-ingress-nginx-ingress-controller
        serviceAccountName: lab-devops-ingress-nginx-ingress-controller
        terminationGracePeriodSeconds: 60
  status:
    observedGeneration: 4
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "2"
      deployment.kubernetes.io/max-replicas: "3"
      deployment.kubernetes.io/revision: "2"
      meta.helm.sh/release-name: lab-devops-ingress
      meta.helm.sh/release-namespace: components
      service.beta.kubernetes.io/azure-load-balancer-internal: "true"
    creationTimestamp: "2022-02-01T11:12:13Z"
    generation: 4
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: lab-devops-ingress
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: nginx-ingress-controller
      helm.sh/chart: nginx-ingress-controller-9.1.0
      pod-template-hash: 56bb978b9d
    name: lab-devops-ingress-nginx-ingress-controller-56bb978b9d
    namespace: components
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: lab-devops-ingress-nginx-ingress-controller
      uid: 4c4ffd8e-baaa-4a2b-8800-e6e2392332b6
    resourceVersion: "203708887"
    uid: bf41773e-0fba-4a63-ae54-3e70f3f04f54
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: lab-devops-ingress
        app.kubernetes.io/name: nginx-ingress-controller
        pod-template-hash: 56bb978b9d
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: controller
          app.kubernetes.io/instance: lab-devops-ingress
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: nginx-ingress-controller
          helm.sh/chart: nginx-ingress-controller-9.1.0
          pod-template-hash: 56bb978b9d
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/component: controller
                    app.kubernetes.io/instance: lab-devops-ingress
                    app.kubernetes.io/name: nginx-ingress-controller
                namespaces:
                - components
                topologyKey: kubernetes.io/hostname
              weight: 1
        containers:
        - args:
          - /nginx-ingress-controller
          - --default-backend-service=components/lab-devops-ingress-nginx-ingress-controller-default-backend
          - --election-id=ingress-controller-leader
          - --configmap=components/lab-devops-ingress-nginx-ingress-controller
          - --tcp-services-configmap=components/lab-devops-ingress-nginx-ingress-controller-tcp
          - --ingress-class=lab-devops-ingress
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: docker.io/bitnami/nginx-ingress-controller:0.46.0-debian-10-r19
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: controller
          ports:
          - containerPort: 80
            name: http
            protocol: TCP
          - containerPort: 443
            name: https
            protocol: TCP
          - containerPort: 15672
            name: 15672-tcp
            protocol: TCP
          - containerPort: 1883
            name: 1883-tcp
            protocol: TCP
          - containerPort: 5432
            name: 5432-tcp
            protocol: TCP
          - containerPort: 5672
            name: 5672-tcp
            protocol: TCP
          - containerPort: 8883
            name: 8883-tcp
            protocol: TCP
          - containerPort: 9000
            name: 9000-tcp
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          securityContext:
            allowPrivilegeEscalation: true
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            runAsUser: 1001
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1001
        serviceAccount: lab-devops-ingress-nginx-ingress-controller
        serviceAccountName: lab-devops-ingress-nginx-ingress-controller
        terminationGracePeriodSeconds: 60
  status:
    observedGeneration: 4
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "2"
      deployment.kubernetes.io/max-replicas: "3"
      deployment.kubernetes.io/revision: "3"
      meta.helm.sh/release-name: lab-devops-ingress
      meta.helm.sh/release-namespace: components
      service.beta.kubernetes.io/azure-load-balancer-internal: "true"
    creationTimestamp: "2022-02-02T15:34:49Z"
    generation: 4
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: lab-devops-ingress
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: nginx-ingress-controller
      helm.sh/chart: nginx-ingress-controller-9.1.0
      pod-template-hash: 5cd5d7cc7f
    name: lab-devops-ingress-nginx-ingress-controller-5cd5d7cc7f
    namespace: components
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: lab-devops-ingress-nginx-ingress-controller
      uid: 4c4ffd8e-baaa-4a2b-8800-e6e2392332b6
    resourceVersion: "234862504"
    uid: ae5a1f3f-e107-4637-8eca-a6916bf429d2
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: lab-devops-ingress
        app.kubernetes.io/name: nginx-ingress-controller
        pod-template-hash: 5cd5d7cc7f
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/restartedAt: "2022-02-02T12:34:51-03:00"
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: controller
          app.kubernetes.io/instance: lab-devops-ingress
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: nginx-ingress-controller
          helm.sh/chart: nginx-ingress-controller-9.1.0
          pod-template-hash: 5cd5d7cc7f
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/component: controller
                    app.kubernetes.io/instance: lab-devops-ingress
                    app.kubernetes.io/name: nginx-ingress-controller
                namespaces:
                - components
                topologyKey: kubernetes.io/hostname
              weight: 1
        containers:
        - args:
          - /nginx-ingress-controller
          - --default-backend-service=components/lab-devops-ingress-nginx-ingress-controller-default-backend
          - --election-id=ingress-controller-leader
          - --configmap=components/lab-devops-ingress-nginx-ingress-controller
          - --tcp-services-configmap=components/lab-devops-ingress-nginx-ingress-controller-tcp
          - --ingress-class=lab-devops-ingress
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: docker.io/bitnami/nginx-ingress-controller:0.46.0-debian-10-r19
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: controller
          ports:
          - containerPort: 80
            name: http
            protocol: TCP
          - containerPort: 443
            name: https
            protocol: TCP
          - containerPort: 15672
            name: 15672-tcp
            protocol: TCP
          - containerPort: 1883
            name: 1883-tcp
            protocol: TCP
          - containerPort: 5432
            name: 5432-tcp
            protocol: TCP
          - containerPort: 5672
            name: 5672-tcp
            protocol: TCP
          - containerPort: 8883
            name: 8883-tcp
            protocol: TCP
          - containerPort: 9000
            name: 9000-tcp
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          securityContext:
            allowPrivilegeEscalation: true
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            runAsUser: 1001
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1001
        serviceAccount: lab-devops-ingress-nginx-ingress-controller
        serviceAccountName: lab-devops-ingress-nginx-ingress-controller
        terminationGracePeriodSeconds: 60
  status:
    observedGeneration: 4
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "2"
      deployment.kubernetes.io/max-replicas: "3"
      deployment.kubernetes.io/revision: "7"
      field.cattle.io/publicEndpoints: '[{"addresses":["10.1.43.45"],"port":80,"protocol":"TCP","serviceName":"components:lab-devops-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.43.45"],"port":443,"protocol":"TCP","serviceName":"components:lab-devops-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.43.45"],"port":15672,"protocol":"TCP","serviceName":"components:lab-devops-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.43.45"],"port":1883,"protocol":"TCP","serviceName":"components:lab-devops-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.43.45"],"port":5432,"protocol":"TCP","serviceName":"components:lab-devops-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.43.45"],"port":5672,"protocol":"TCP","serviceName":"components:lab-devops-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.43.45"],"port":8883,"protocol":"TCP","serviceName":"components:lab-devops-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.43.45"],"port":9000,"protocol":"TCP","serviceName":"components:lab-devops-ingress-nginx-ingress-controller","allNodes":false}]'
      meta.helm.sh/release-name: lab-devops-ingress
      meta.helm.sh/release-namespace: components
      service.beta.kubernetes.io/azure-load-balancer-internal: "true"
    creationTimestamp: "2022-09-26T19:40:51Z"
    generation: 4
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: lab-devops-ingress
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: nginx-ingress-controller
      helm.sh/chart: nginx-ingress-controller-9.1.0
      pod-template-hash: 67b4dbc7bf
    name: lab-devops-ingress-nginx-ingress-controller-67b4dbc7bf
    namespace: components
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: lab-devops-ingress-nginx-ingress-controller
      uid: 4c4ffd8e-baaa-4a2b-8800-e6e2392332b6
    resourceVersion: "380433012"
    uid: 36d4ffba-4b33-4188-9ff2-02495a3e83b9
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: lab-devops-ingress
        app.kubernetes.io/name: nginx-ingress-controller
        pod-template-hash: 67b4dbc7bf
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/restartedAt: "2022-09-26T16:40:51-03:00"
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: controller
          app.kubernetes.io/instance: lab-devops-ingress
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: nginx-ingress-controller
          helm.sh/chart: nginx-ingress-controller-9.1.0
          pod-template-hash: 67b4dbc7bf
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/component: controller
                    app.kubernetes.io/instance: lab-devops-ingress
                    app.kubernetes.io/name: nginx-ingress-controller
                namespaces:
                - components
                topologyKey: kubernetes.io/hostname
              weight: 1
        containers:
        - args:
          - /nginx-ingress-controller
          - --default-backend-service=components/lab-devops-ingress-nginx-ingress-controller-default-backend
          - --election-id=ingress-controller-leader
          - --configmap=components/lab-devops-ingress-nginx-ingress-controller
          - --tcp-services-configmap=components/lab-devops-ingress-nginx-ingress-controller-tcp
          - --ingress-class=lab-devops-ingress
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: docker.io/bitnami/nginx-ingress-controller:0.46.0-debian-10-r19
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: controller
          ports:
          - containerPort: 80
            name: http
            protocol: TCP
          - containerPort: 443
            name: https
            protocol: TCP
          - containerPort: 15672
            name: 15672-tcp
            protocol: TCP
          - containerPort: 1883
            name: 1883-tcp
            protocol: TCP
          - containerPort: 5432
            name: 5432-tcp
            protocol: TCP
          - containerPort: 5672
            name: 5672-tcp
            protocol: TCP
          - containerPort: 8883
            name: 8883-tcp
            protocol: TCP
          - containerPort: 9000
            name: 9000-tcp
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          securityContext:
            allowPrivilegeEscalation: true
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            runAsUser: 1001
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1001
        serviceAccount: lab-devops-ingress-nginx-ingress-controller
        serviceAccountName: lab-devops-ingress-nginx-ingress-controller
        terminationGracePeriodSeconds: 60
  status:
    observedGeneration: 4
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "2"
      deployment.kubernetes.io/max-replicas: "3"
      deployment.kubernetes.io/revision: "5"
      field.cattle.io/publicEndpoints: '[{"addresses":["10.1.43.45"],"port":80,"protocol":"TCP","serviceName":"components:lab-devops-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.43.45"],"port":443,"protocol":"TCP","serviceName":"components:lab-devops-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.43.45"],"port":15672,"protocol":"TCP","serviceName":"components:lab-devops-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.43.45"],"port":1883,"protocol":"TCP","serviceName":"components:lab-devops-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.43.45"],"port":5432,"protocol":"TCP","serviceName":"components:lab-devops-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.43.45"],"port":5672,"protocol":"TCP","serviceName":"components:lab-devops-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.43.45"],"port":8883,"protocol":"TCP","serviceName":"components:lab-devops-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.43.45"],"port":9000,"protocol":"TCP","serviceName":"components:lab-devops-ingress-nginx-ingress-controller","allNodes":false}]'
      meta.helm.sh/release-name: lab-devops-ingress
      meta.helm.sh/release-namespace: components
      service.beta.kubernetes.io/azure-load-balancer-internal: "true"
    creationTimestamp: "2022-06-28T17:24:19Z"
    generation: 4
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: lab-devops-ingress
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: nginx-ingress-controller
      helm.sh/chart: nginx-ingress-controller-9.1.0
      pod-template-hash: 6fc6cdf6b
    name: lab-devops-ingress-nginx-ingress-controller-6fc6cdf6b
    namespace: components
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: lab-devops-ingress-nginx-ingress-controller
      uid: 4c4ffd8e-baaa-4a2b-8800-e6e2392332b6
    resourceVersion: "372923476"
    uid: a924114a-6f34-4a0f-bb9c-d05eb8f26c6b
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: lab-devops-ingress
        app.kubernetes.io/name: nginx-ingress-controller
        pod-template-hash: 6fc6cdf6b
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/restartedAt: "2022-06-28T14:24:19-03:00"
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: controller
          app.kubernetes.io/instance: lab-devops-ingress
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: nginx-ingress-controller
          helm.sh/chart: nginx-ingress-controller-9.1.0
          pod-template-hash: 6fc6cdf6b
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/component: controller
                    app.kubernetes.io/instance: lab-devops-ingress
                    app.kubernetes.io/name: nginx-ingress-controller
                namespaces:
                - components
                topologyKey: kubernetes.io/hostname
              weight: 1
        containers:
        - args:
          - /nginx-ingress-controller
          - --default-backend-service=components/lab-devops-ingress-nginx-ingress-controller-default-backend
          - --election-id=ingress-controller-leader
          - --configmap=components/lab-devops-ingress-nginx-ingress-controller
          - --tcp-services-configmap=components/lab-devops-ingress-nginx-ingress-controller-tcp
          - --ingress-class=lab-devops-ingress
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: docker.io/bitnami/nginx-ingress-controller:0.46.0-debian-10-r19
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: controller
          ports:
          - containerPort: 80
            name: http
            protocol: TCP
          - containerPort: 443
            name: https
            protocol: TCP
          - containerPort: 15672
            name: 15672-tcp
            protocol: TCP
          - containerPort: 1883
            name: 1883-tcp
            protocol: TCP
          - containerPort: 5432
            name: 5432-tcp
            protocol: TCP
          - containerPort: 5672
            name: 5672-tcp
            protocol: TCP
          - containerPort: 8883
            name: 8883-tcp
            protocol: TCP
          - containerPort: 9000
            name: 9000-tcp
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          securityContext:
            allowPrivilegeEscalation: true
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            runAsUser: 1001
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1001
        serviceAccount: lab-devops-ingress-nginx-ingress-controller
        serviceAccountName: lab-devops-ingress-nginx-ingress-controller
        terminationGracePeriodSeconds: 60
  status:
    observedGeneration: 4
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "2"
      deployment.kubernetes.io/max-replicas: "3"
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: lab-devops-ingress
      meta.helm.sh/release-namespace: components
      service.beta.kubernetes.io/azure-load-balancer-internal: "true"
    creationTimestamp: "2022-02-01T11:10:19Z"
    generation: 4
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: lab-devops-ingress
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: nginx-ingress-controller
      helm.sh/chart: nginx-ingress-controller-9.1.0
      pod-template-hash: 7986d9886f
    name: lab-devops-ingress-nginx-ingress-controller-7986d9886f
    namespace: components
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: lab-devops-ingress-nginx-ingress-controller
      uid: 4c4ffd8e-baaa-4a2b-8800-e6e2392332b6
    resourceVersion: "202340479"
    uid: 452fe3f9-c3ef-4697-bd06-ed10de9c852e
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: lab-devops-ingress
        app.kubernetes.io/name: nginx-ingress-controller
        pod-template-hash: 7986d9886f
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: controller
          app.kubernetes.io/instance: lab-devops-ingress
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: nginx-ingress-controller
          helm.sh/chart: nginx-ingress-controller-9.1.0
          pod-template-hash: 7986d9886f
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/component: controller
                    app.kubernetes.io/instance: lab-devops-ingress
                    app.kubernetes.io/name: nginx-ingress-controller
                namespaces:
                - components
                topologyKey: kubernetes.io/hostname
              weight: 1
        containers:
        - args:
          - /nginx-ingress-controller
          - --default-backend-service=components/lab-devops-ingress-nginx-ingress-controller-default-backend
          - --election-id=ingress-controller-leader
          - --controller-class=k8s.io/ingress-nginx
          - --configmap=components/lab-devops-ingress-nginx-ingress-controller
          - --tcp-services-configmap=components/lab-devops-ingress-nginx-ingress-controller-tcp
          - --ingress-class=lab-devops-ingress
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: docker.io/bitnami/nginx-ingress-controller:0.46.0-debian-10-r19
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: controller
          ports:
          - containerPort: 80
            name: http
            protocol: TCP
          - containerPort: 443
            name: https
            protocol: TCP
          - containerPort: 15672
            name: 15672-tcp
            protocol: TCP
          - containerPort: 1883
            name: 1883-tcp
            protocol: TCP
          - containerPort: 5432
            name: 5432-tcp
            protocol: TCP
          - containerPort: 5672
            name: 5672-tcp
            protocol: TCP
          - containerPort: 8883
            name: 8883-tcp
            protocol: TCP
          - containerPort: 9000
            name: 9000-tcp
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          securityContext:
            allowPrivilegeEscalation: true
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            runAsUser: 1001
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1001
        serviceAccount: lab-devops-ingress-nginx-ingress-controller
        serviceAccountName: lab-devops-ingress-nginx-ingress-controller
        terminationGracePeriodSeconds: 60
  status:
    observedGeneration: 4
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "2"
      deployment.kubernetes.io/max-replicas: "3"
      deployment.kubernetes.io/revision: "4"
      meta.helm.sh/release-name: lab-devops-ingress
      meta.helm.sh/release-namespace: components
      service.beta.kubernetes.io/azure-load-balancer-internal: "true"
    creationTimestamp: "2022-03-30T13:14:11Z"
    generation: 4
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: lab-devops-ingress
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: nginx-ingress-controller
      helm.sh/chart: nginx-ingress-controller-9.1.0
      pod-template-hash: 7bc6f85787
    name: lab-devops-ingress-nginx-ingress-controller-7bc6f85787
    namespace: components
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: lab-devops-ingress-nginx-ingress-controller
      uid: 4c4ffd8e-baaa-4a2b-8800-e6e2392332b6
    resourceVersion: "277552430"
    uid: 67dde5cc-ab78-49c2-9312-f95dc45f02a1
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: lab-devops-ingress
        app.kubernetes.io/name: nginx-ingress-controller
        pod-template-hash: 7bc6f85787
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/restartedAt: "2022-03-30T10:14:11-03:00"
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: controller
          app.kubernetes.io/instance: lab-devops-ingress
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: nginx-ingress-controller
          helm.sh/chart: nginx-ingress-controller-9.1.0
          pod-template-hash: 7bc6f85787
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/component: controller
                    app.kubernetes.io/instance: lab-devops-ingress
                    app.kubernetes.io/name: nginx-ingress-controller
                namespaces:
                - components
                topologyKey: kubernetes.io/hostname
              weight: 1
        containers:
        - args:
          - /nginx-ingress-controller
          - --default-backend-service=components/lab-devops-ingress-nginx-ingress-controller-default-backend
          - --election-id=ingress-controller-leader
          - --configmap=components/lab-devops-ingress-nginx-ingress-controller
          - --tcp-services-configmap=components/lab-devops-ingress-nginx-ingress-controller-tcp
          - --ingress-class=lab-devops-ingress
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: docker.io/bitnami/nginx-ingress-controller:0.46.0-debian-10-r19
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: controller
          ports:
          - containerPort: 80
            name: http
            protocol: TCP
          - containerPort: 443
            name: https
            protocol: TCP
          - containerPort: 15672
            name: 15672-tcp
            protocol: TCP
          - containerPort: 1883
            name: 1883-tcp
            protocol: TCP
          - containerPort: 5432
            name: 5432-tcp
            protocol: TCP
          - containerPort: 5672
            name: 5672-tcp
            protocol: TCP
          - containerPort: 8883
            name: 8883-tcp
            protocol: TCP
          - containerPort: 9000
            name: 9000-tcp
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          securityContext:
            allowPrivilegeEscalation: true
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            runAsUser: 1001
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1001
        serviceAccount: lab-devops-ingress-nginx-ingress-controller
        serviceAccountName: lab-devops-ingress-nginx-ingress-controller
        terminationGracePeriodSeconds: 60
  status:
    observedGeneration: 4
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "2"
      deployment.kubernetes.io/max-replicas: "3"
      deployment.kubernetes.io/revision: "9"
      field.cattle.io/publicEndpoints: '[{"addresses":["10.1.43.45"],"port":80,"protocol":"TCP","serviceName":"components:lab-devops-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.43.45"],"port":443,"protocol":"TCP","serviceName":"components:lab-devops-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.43.45"],"port":15672,"protocol":"TCP","serviceName":"components:lab-devops-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.43.45"],"port":1883,"protocol":"TCP","serviceName":"components:lab-devops-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.43.45"],"port":5671,"protocol":"TCP","serviceName":"components:lab-devops-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.43.45"],"port":5672,"protocol":"TCP","serviceName":"components:lab-devops-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.43.45"],"port":6379,"protocol":"TCP","serviceName":"components:lab-devops-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.43.45"],"port":8883,"protocol":"TCP","serviceName":"components:lab-devops-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.43.45"],"port":9000,"protocol":"TCP","serviceName":"components:lab-devops-ingress-nginx-ingress-controller","allNodes":false}]'
      meta.helm.sh/release-name: lab-devops-ingress
      meta.helm.sh/release-namespace: components
    creationTimestamp: "2022-12-13T13:02:40Z"
    generation: 4
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: lab-devops-ingress
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: nginx-ingress-controller
      helm.sh/chart: nginx-ingress-controller-9.3.22
      pod-template-hash: 7d468477
    name: lab-devops-ingress-nginx-ingress-controller-7d468477
    namespace: components
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: lab-devops-ingress-nginx-ingress-controller
      uid: 4c4ffd8e-baaa-4a2b-8800-e6e2392332b6
    resourceVersion: "544849131"
    uid: c008108c-1d91-45cf-9e92-45b785e34c22
  spec:
    replicas: 2
    selector:
      matchLabels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: lab-devops-ingress
        app.kubernetes.io/name: nginx-ingress-controller
        pod-template-hash: 7d468477
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/restartedAt: "2022-09-29T16:35:50-03:00"
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: controller
          app.kubernetes.io/instance: lab-devops-ingress
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: nginx-ingress-controller
          helm.sh/chart: nginx-ingress-controller-9.3.22
          pod-template-hash: 7d468477
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/component: controller
                    app.kubernetes.io/instance: lab-devops-ingress
                    app.kubernetes.io/name: nginx-ingress-controller
                topologyKey: kubernetes.io/hostname
              weight: 1
        containers:
        - args:
          - /nginx-ingress-controller
          - --default-backend-service=components/lab-devops-ingress-nginx-ingress-controller-default-backend
          - --election-id=ingress-controller-leader
          - --controller-class=k8s.io/ingress-nginx
          - --configmap=components/lab-devops-ingress-nginx-ingress-controller
          - --tcp-services-configmap=components/lab-devops-ingress-nginx-ingress-controller-tcp
          - --ingress-class=lab-devops-ingress
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: docker.io/bitnami/nginx-ingress-controller:1.5.1-debian-11-r5
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: controller
          ports:
          - containerPort: 80
            name: http
            protocol: TCP
          - containerPort: 443
            name: https
            protocol: TCP
          - containerPort: 15672
            name: 15672-tcp
            protocol: TCP
          - containerPort: 1883
            name: 1883-tcp
            protocol: TCP
          - containerPort: 5671
            name: 5671-tcp
            protocol: TCP
          - containerPort: 5672
            name: 5672-tcp
            protocol: TCP
          - containerPort: 6379
            name: 6379-tcp
            protocol: TCP
          - containerPort: 8883
            name: 8883-tcp
            protocol: TCP
          - containerPort: 9000
            name: 9000-tcp
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          securityContext:
            allowPrivilegeEscalation: true
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            runAsNonRoot: true
            runAsUser: 1001
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1001
        serviceAccount: lab-devops-ingress-nginx-ingress-controller
        serviceAccountName: lab-devops-ingress-nginx-ingress-controller
        terminationGracePeriodSeconds: 60
  status:
    availableReplicas: 2
    fullyLabeledReplicas: 2
    observedGeneration: 4
    readyReplicas: 2
    replicas: 2
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "2"
      deployment.kubernetes.io/max-replicas: "3"
      deployment.kubernetes.io/revision: "8"
      field.cattle.io/publicEndpoints: '[{"addresses":["10.1.43.45"],"port":80,"protocol":"TCP","serviceName":"components:lab-devops-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.43.45"],"port":443,"protocol":"TCP","serviceName":"components:lab-devops-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.43.45"],"port":15672,"protocol":"TCP","serviceName":"components:lab-devops-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.43.45"],"port":1883,"protocol":"TCP","serviceName":"components:lab-devops-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.43.45"],"port":5432,"protocol":"TCP","serviceName":"components:lab-devops-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.43.45"],"port":5672,"protocol":"TCP","serviceName":"components:lab-devops-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.43.45"],"port":8883,"protocol":"TCP","serviceName":"components:lab-devops-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.43.45"],"port":9000,"protocol":"TCP","serviceName":"components:lab-devops-ingress-nginx-ingress-controller","allNodes":false}]'
      meta.helm.sh/release-name: lab-devops-ingress
      meta.helm.sh/release-namespace: components
      service.beta.kubernetes.io/azure-load-balancer-internal: "true"
    creationTimestamp: "2022-09-29T19:35:51Z"
    generation: 4
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: lab-devops-ingress
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: nginx-ingress-controller
      helm.sh/chart: nginx-ingress-controller-9.1.0
      pod-template-hash: 8467fbd9c
    name: lab-devops-ingress-nginx-ingress-controller-8467fbd9c
    namespace: components
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: lab-devops-ingress-nginx-ingress-controller
      uid: 4c4ffd8e-baaa-4a2b-8800-e6e2392332b6
    resourceVersion: "500766249"
    uid: 5bfaa58b-d35e-4d1e-87a6-52bde03b0070
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: lab-devops-ingress
        app.kubernetes.io/name: nginx-ingress-controller
        pod-template-hash: 8467fbd9c
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/restartedAt: "2022-09-29T16:35:50-03:00"
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: controller
          app.kubernetes.io/instance: lab-devops-ingress
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: nginx-ingress-controller
          helm.sh/chart: nginx-ingress-controller-9.1.0
          pod-template-hash: 8467fbd9c
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/component: controller
                    app.kubernetes.io/instance: lab-devops-ingress
                    app.kubernetes.io/name: nginx-ingress-controller
                namespaces:
                - components
                topologyKey: kubernetes.io/hostname
              weight: 1
        containers:
        - args:
          - /nginx-ingress-controller
          - --default-backend-service=components/lab-devops-ingress-nginx-ingress-controller-default-backend
          - --election-id=ingress-controller-leader
          - --configmap=components/lab-devops-ingress-nginx-ingress-controller
          - --tcp-services-configmap=components/lab-devops-ingress-nginx-ingress-controller-tcp
          - --ingress-class=lab-devops-ingress
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: docker.io/bitnami/nginx-ingress-controller:0.46.0-debian-10-r19
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: controller
          ports:
          - containerPort: 80
            name: http
            protocol: TCP
          - containerPort: 443
            name: https
            protocol: TCP
          - containerPort: 15672
            name: 15672-tcp
            protocol: TCP
          - containerPort: 1883
            name: 1883-tcp
            protocol: TCP
          - containerPort: 5432
            name: 5432-tcp
            protocol: TCP
          - containerPort: 5672
            name: 5672-tcp
            protocol: TCP
          - containerPort: 8883
            name: 8883-tcp
            protocol: TCP
          - containerPort: 9000
            name: 9000-tcp
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          securityContext:
            allowPrivilegeEscalation: true
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            runAsUser: 1001
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1001
        serviceAccount: lab-devops-ingress-nginx-ingress-controller
        serviceAccountName: lab-devops-ingress-nginx-ingress-controller
        terminationGracePeriodSeconds: 60
  status:
    observedGeneration: 4
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "2"
      meta.helm.sh/release-name: lab-devops-ingress
      meta.helm.sh/release-namespace: components
    creationTimestamp: "2022-12-13T13:02:41Z"
    generation: 1
    labels:
      app.kubernetes.io/component: default-backend
      app.kubernetes.io/instance: lab-devops-ingress
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: nginx-ingress-controller
      helm.sh/chart: nginx-ingress-controller-9.3.22
      pod-template-hash: 5dd64f8d8b
    name: lab-devops-ingress-nginx-ingress-controller-default-backend-5dd64f8d8b
    namespace: components
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: lab-devops-ingress-nginx-ingress-controller-default-backend
      uid: 3c13dfca-c57b-467c-9145-27ec6e37b83b
    resourceVersion: "540225217"
    uid: e44b6537-691b-41b7-a470-7e389182e40d
  spec:
    replicas: 1
    selector:
      matchLabels:
        app.kubernetes.io/component: default-backend
        app.kubernetes.io/instance: lab-devops-ingress
        app.kubernetes.io/name: nginx-ingress-controller
        pod-template-hash: 5dd64f8d8b
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: default-backend
          app.kubernetes.io/instance: lab-devops-ingress
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: nginx-ingress-controller
          helm.sh/chart: nginx-ingress-controller-9.3.22
          pod-template-hash: 5dd64f8d8b
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/component: default-backend
                    app.kubernetes.io/instance: lab-devops-ingress
                    app.kubernetes.io/name: nginx-ingress-controller
                topologyKey: kubernetes.io/hostname
              weight: 1
        containers:
        - image: docker.io/bitnami/nginx:1.22.1-debian-11-r7
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: http
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: default-backend
          ports:
          - containerPort: 8080
            name: http
            protocol: TCP
          readinessProbe:
            failureThreshold: 6
            httpGet:
              path: /healthz
              port: http
              scheme: HTTP
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 5
          resources: {}
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /opt/bitnami/nginx/conf/bitnami/
            name: nginx-config-volume
            readOnly: true
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1001
        serviceAccount: lab-devops-ingress-nginx-ingress-controller
        serviceAccountName: lab-devops-ingress-nginx-ingress-controller
        terminationGracePeriodSeconds: 60
        volumes:
        - configMap:
            defaultMode: 420
            items:
            - key: defaultBackend.conf
              path: defaultBackend.conf
            name: lab-devops-ingress-nginx-ingress-controller-default-backend
          name: nginx-config-volume
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: lab-devops-ingress
      meta.helm.sh/release-namespace: components
      service.beta.kubernetes.io/azure-load-balancer-internal: "true"
    creationTimestamp: "2022-02-01T11:10:19Z"
    generation: 2
    labels:
      app.kubernetes.io/component: default-backend
      app.kubernetes.io/instance: lab-devops-ingress
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: nginx-ingress-controller
      helm.sh/chart: nginx-ingress-controller-9.1.0
      pod-template-hash: 77688d5f78
    name: lab-devops-ingress-nginx-ingress-controller-default-backend-77688d5f78
    namespace: components
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: lab-devops-ingress-nginx-ingress-controller-default-backend
      uid: 3c13dfca-c57b-467c-9145-27ec6e37b83b
    resourceVersion: "500765802"
    uid: 858217d5-e4f6-4bbb-93c7-e3e54c3158f2
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/component: default-backend
        app.kubernetes.io/instance: lab-devops-ingress
        app.kubernetes.io/name: nginx-ingress-controller
        pod-template-hash: 77688d5f78
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: default-backend
          app.kubernetes.io/instance: lab-devops-ingress
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: nginx-ingress-controller
          helm.sh/chart: nginx-ingress-controller-9.1.0
          pod-template-hash: 77688d5f78
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/component: default-backend
                    app.kubernetes.io/instance: lab-devops-ingress
                    app.kubernetes.io/name: nginx-ingress-controller
                namespaces:
                - components
                topologyKey: kubernetes.io/hostname
              weight: 1
        containers:
        - image: docker.io/bitnami/nginx:1.19.10-debian-10-r35
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: http
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: default-backend
          ports:
          - containerPort: 8080
            name: http
            protocol: TCP
          readinessProbe:
            failureThreshold: 6
            httpGet:
              path: /healthz
              port: http
              scheme: HTTP
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 5
          resources: {}
          securityContext:
            runAsUser: 1001
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /opt/bitnami/nginx/conf/bitnami/
            name: nginx-config-volume
            readOnly: true
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1001
        serviceAccount: lab-devops-ingress-nginx-ingress-controller
        serviceAccountName: lab-devops-ingress-nginx-ingress-controller
        terminationGracePeriodSeconds: 60
        volumes:
        - configMap:
            defaultMode: 420
            items:
            - key: defaultBackend.conf
              path: defaultBackend.conf
            name: lab-devops-ingress-nginx-ingress-controller-default-backend
          name: nginx-config-volume
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "2"
      deployment.kubernetes.io/max-replicas: "3"
      deployment.kubernetes.io/revision: "5"
      field.cattle.io/publicEndpoints: '[{"addresses":["40.88.196.154"],"port":80,"protocol":"TCP","serviceName":"components:main-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["40.88.196.154"],"port":443,"protocol":"TCP","serviceName":"components:main-ingress-nginx-ingress-controller","allNodes":false}]'
      meta.helm.sh/release-name: main-ingress
      meta.helm.sh/release-namespace: components
    creationTimestamp: "2022-01-19T00:14:03Z"
    generation: 2
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: main-ingress
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: nginx-ingress-controller
      helm.sh/chart: nginx-ingress-controller-8.0.11
      pod-template-hash: 5fff9db787
    name: main-ingress-nginx-ingress-controller-5fff9db787
    namespace: components
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: main-ingress-nginx-ingress-controller
      uid: 5b2b2901-ef5b-4d6f-8724-0108a23d91b2
    resourceVersion: "564973526"
    uid: 5b34fe87-8a98-438f-9ebc-6ba451e2e7ec
  spec:
    replicas: 2
    selector:
      matchLabels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: main-ingress
        app.kubernetes.io/name: nginx-ingress-controller
        pod-template-hash: 5fff9db787
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: controller
          app.kubernetes.io/instance: main-ingress
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: nginx-ingress-controller
          helm.sh/chart: nginx-ingress-controller-8.0.11
          pod-template-hash: 5fff9db787
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/component: controller
                    app.kubernetes.io/instance: main-ingress
                    app.kubernetes.io/name: nginx-ingress-controller
                namespaces:
                - components
                topologyKey: kubernetes.io/hostname
              weight: 1
        containers:
        - args:
          - /nginx-ingress-controller
          - --default-backend-service=components/main-ingress-nginx-ingress-controller-default-backend
          - --election-id=ingress-controller-leader
          - --configmap=components/main-ingress-nginx-ingress-controller
          - --ingress-class=main-ingress
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: docker.io/bitnami/nginx-ingress-controller:1.0.4-debian-10-r4
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: controller
          ports:
          - containerPort: 80
            name: http
            protocol: TCP
          - containerPort: 443
            name: https
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          securityContext:
            allowPrivilegeEscalation: true
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            runAsUser: 1001
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1001
        serviceAccount: main-ingress-nginx-ingress-controller
        serviceAccountName: main-ingress-nginx-ingress-controller
        terminationGracePeriodSeconds: 60
  status:
    availableReplicas: 2
    fullyLabeledReplicas: 2
    observedGeneration: 2
    readyReplicas: 2
    replicas: 2
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "2"
      deployment.kubernetes.io/max-replicas: "3"
      deployment.kubernetes.io/revision: "1"
      field.cattle.io/publicEndpoints: '[{"addresses":["10.1.32.97"],"port":80,"protocol":"TCP","serviceName":"components:main-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.97"],"port":443,"protocol":"TCP","serviceName":"components:main-ingress-nginx-ingress-controller","allNodes":false}]'
      meta.helm.sh/release-name: main-ingress
      meta.helm.sh/release-namespace: components
      service.beta.kubernetes.io/azure-load-balancer-internal: "true"
    creationTimestamp: "2021-06-07T19:22:36Z"
    generation: 4
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: main-ingress
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: nginx-ingress-controller
      helm.sh/chart: nginx-ingress-controller-7.6.9
      pod-template-hash: 7646f599d9
    name: main-ingress-nginx-ingress-controller-7646f599d9
    namespace: components
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: main-ingress-nginx-ingress-controller
      uid: 5b2b2901-ef5b-4d6f-8724-0108a23d91b2
    resourceVersion: "69813616"
    uid: f69fd84c-06d1-4147-8e87-fed4b862bde0
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: main-ingress
        app.kubernetes.io/name: nginx-ingress-controller
        pod-template-hash: 7646f599d9
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: controller
          app.kubernetes.io/instance: main-ingress
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: nginx-ingress-controller
          helm.sh/chart: nginx-ingress-controller-7.6.9
          pod-template-hash: 7646f599d9
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/component: controller
                    app.kubernetes.io/instance: main-ingress
                    app.kubernetes.io/name: nginx-ingress-controller
                namespaces:
                - components
                topologyKey: kubernetes.io/hostname
              weight: 1
        containers:
        - args:
          - /nginx-ingress-controller
          - --default-backend-service=components/main-ingress-nginx-ingress-controller-default-backend
          - --election-id=ingress-controller-leader
          - --ingress-class=main-ingress
          - --configmap=components/main-ingress-nginx-ingress-controller
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: docker.io/bitnami/nginx-ingress-controller:0.46.0-debian-10-r19
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: controller
          ports:
          - containerPort: 80
            name: http
            protocol: TCP
          - containerPort: 443
            name: https
            protocol: TCP
          - containerPort: 10254
            name: metrics
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          securityContext:
            allowPrivilegeEscalation: true
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            runAsUser: 1001
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1001
        serviceAccount: main-ingress-nginx-ingress-controller
        serviceAccountName: main-ingress-nginx-ingress-controller
        terminationGracePeriodSeconds: 60
  status:
    observedGeneration: 4
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "2"
      deployment.kubernetes.io/max-replicas: "3"
      deployment.kubernetes.io/revision: "4"
      field.cattle.io/publicEndpoints: '[{"addresses":["10.1.32.97"],"port":80,"protocol":"TCP","serviceName":"components:main-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.97"],"port":443,"protocol":"TCP","serviceName":"components:main-ingress-nginx-ingress-controller","allNodes":false}]'
      meta.helm.sh/release-name: main-ingress
      meta.helm.sh/release-namespace: components
    creationTimestamp: "2022-01-18T23:09:51Z"
    generation: 5
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: main-ingress
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: nginx-ingress-controller
      helm.sh/chart: nginx-ingress-controller-8.0.11
      pod-template-hash: 7f7b7bfd48
    name: main-ingress-nginx-ingress-controller-7f7b7bfd48
    namespace: components
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: main-ingress-nginx-ingress-controller
      uid: 5b2b2901-ef5b-4d6f-8724-0108a23d91b2
    resourceVersion: "186952350"
    uid: a4d4d950-6498-44c8-8296-16aeb61a6dd0
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: main-ingress
        app.kubernetes.io/name: nginx-ingress-controller
        pod-template-hash: 7f7b7bfd48
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: controller
          app.kubernetes.io/instance: main-ingress
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: nginx-ingress-controller
          helm.sh/chart: nginx-ingress-controller-8.0.11
          pod-template-hash: 7f7b7bfd48
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/component: controller
                    app.kubernetes.io/instance: main-ingress
                    app.kubernetes.io/name: nginx-ingress-controller
                namespaces:
                - components
                topologyKey: kubernetes.io/hostname
              weight: 1
        containers:
        - args:
          - /nginx-ingress-controller
          - --default-backend-service=components/main-ingress-nginx-ingress-controller-default-backend
          - --election-id=ingress-controller-leader
          - --controller-class=k8s.io/ingress-nginx
          - --configmap=components/main-ingress-nginx-ingress-controller
          - --ingress-class=k8s.io/ingress-nginx
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: docker.io/bitnami/nginx-ingress-controller:1.0.4-debian-10-r4
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: controller
          ports:
          - containerPort: 80
            name: http
            protocol: TCP
          - containerPort: 443
            name: https
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          securityContext:
            allowPrivilegeEscalation: true
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            runAsUser: 1001
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1001
        serviceAccount: main-ingress-nginx-ingress-controller
        serviceAccountName: main-ingress-nginx-ingress-controller
        terminationGracePeriodSeconds: 60
  status:
    observedGeneration: 5
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "2"
      field.cattle.io/publicEndpoints: '[{"addresses":["10.1.32.97"],"port":80,"protocol":"TCP","serviceName":"components:main-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.97"],"port":443,"protocol":"TCP","serviceName":"components:main-ingress-nginx-ingress-controller","allNodes":false}]'
      meta.helm.sh/release-name: main-ingress
      meta.helm.sh/release-namespace: components
      service.beta.kubernetes.io/azure-load-balancer-internal: "true"
    creationTimestamp: "2021-09-21T18:58:22Z"
    generation: 4
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: main-ingress
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: nginx-ingress-controller
      helm.sh/chart: nginx-ingress-controller-7.6.9
      pod-template-hash: bf9c77f6b
    name: main-ingress-nginx-ingress-controller-bf9c77f6b
    namespace: components
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: main-ingress-nginx-ingress-controller
      uid: 5b2b2901-ef5b-4d6f-8724-0108a23d91b2
    resourceVersion: "186900930"
    uid: f3a6cc87-65ad-4d93-9def-2cbd39c7eb0d
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: main-ingress
        app.kubernetes.io/name: nginx-ingress-controller
        pod-template-hash: bf9c77f6b
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: controller
          app.kubernetes.io/instance: main-ingress
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: nginx-ingress-controller
          helm.sh/chart: nginx-ingress-controller-7.6.9
          pod-template-hash: bf9c77f6b
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/component: controller
                    app.kubernetes.io/instance: main-ingress
                    app.kubernetes.io/name: nginx-ingress-controller
                namespaces:
                - components
                topologyKey: kubernetes.io/hostname
              weight: 1
        containers:
        - args:
          - /nginx-ingress-controller
          - --default-backend-service=components/main-ingress-nginx-ingress-controller-default-backend
          - --election-id=ingress-controller-leader
          - --ingress-class=main-ingress
          - --configmap=components/main-ingress-nginx-ingress-controller
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: docker.io/bitnami/nginx-ingress-controller:0.46.0-debian-10-r19
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: controller
          ports:
          - containerPort: 80
            name: http
            protocol: TCP
          - containerPort: 443
            name: https
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          securityContext:
            allowPrivilegeEscalation: true
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            runAsUser: 1001
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1001
        serviceAccount: main-ingress-nginx-ingress-controller
        serviceAccountName: main-ingress-nginx-ingress-controller
        terminationGracePeriodSeconds: 60
  status:
    observedGeneration: 4
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "3"
      meta.helm.sh/release-name: main-ingress
      meta.helm.sh/release-namespace: components
    creationTimestamp: "2022-01-18T23:09:52Z"
    generation: 1
    labels:
      app.kubernetes.io/component: default-backend
      app.kubernetes.io/instance: main-ingress
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: nginx-ingress-controller
      helm.sh/chart: nginx-ingress-controller-8.0.11
      pod-template-hash: 699d94dd57
    name: main-ingress-nginx-ingress-controller-default-backend-699d94dd57
    namespace: components
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: main-ingress-nginx-ingress-controller-default-backend
      uid: 77c18668-d3c6-4b50-8d47-19dd7dac5788
    resourceVersion: "544848883"
    uid: f1e7554f-84c7-4f10-a966-f3a6cab4efd3
  spec:
    replicas: 1
    selector:
      matchLabels:
        app.kubernetes.io/component: default-backend
        app.kubernetes.io/instance: main-ingress
        app.kubernetes.io/name: nginx-ingress-controller
        pod-template-hash: 699d94dd57
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: default-backend
          app.kubernetes.io/instance: main-ingress
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: nginx-ingress-controller
          helm.sh/chart: nginx-ingress-controller-8.0.11
          pod-template-hash: 699d94dd57
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/component: default-backend
                    app.kubernetes.io/instance: main-ingress
                    app.kubernetes.io/name: nginx-ingress-controller
                namespaces:
                - components
                topologyKey: kubernetes.io/hostname
              weight: 1
        containers:
        - image: docker.io/bitnami/nginx:1.21.3-debian-10-r37
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: http
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: default-backend
          ports:
          - containerPort: 8080
            name: http
            protocol: TCP
          readinessProbe:
            failureThreshold: 6
            httpGet:
              path: /healthz
              port: http
              scheme: HTTP
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 5
          resources: {}
          securityContext:
            runAsUser: 1001
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /opt/bitnami/nginx/conf/bitnami/
            name: nginx-config-volume
            readOnly: true
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1001
        serviceAccount: main-ingress-nginx-ingress-controller
        serviceAccountName: main-ingress-nginx-ingress-controller
        terminationGracePeriodSeconds: 60
        volumes:
        - configMap:
            defaultMode: 420
            items:
            - key: defaultBackend.conf
              path: defaultBackend.conf
            name: main-ingress-nginx-ingress-controller-default-backend
          name: nginx-config-volume
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: main-ingress
      meta.helm.sh/release-namespace: components
      service.beta.kubernetes.io/azure-load-balancer-internal: "true"
    creationTimestamp: "2021-06-07T19:22:36Z"
    generation: 2
    labels:
      app.kubernetes.io/component: default-backend
      app.kubernetes.io/instance: main-ingress
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: nginx-ingress-controller
      helm.sh/chart: nginx-ingress-controller-7.6.9
      pod-template-hash: 7cf6bb67d8
    name: main-ingress-nginx-ingress-controller-default-backend-7cf6bb67d8
    namespace: components
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: main-ingress-nginx-ingress-controller-default-backend
      uid: 77c18668-d3c6-4b50-8d47-19dd7dac5788
    resourceVersion: "186892409"
    uid: a2207372-36cd-452a-a052-4ad8663170a3
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/component: default-backend
        app.kubernetes.io/instance: main-ingress
        app.kubernetes.io/name: nginx-ingress-controller
        pod-template-hash: 7cf6bb67d8
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: default-backend
          app.kubernetes.io/instance: main-ingress
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: nginx-ingress-controller
          helm.sh/chart: nginx-ingress-controller-7.6.9
          pod-template-hash: 7cf6bb67d8
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/component: default-backend
                    app.kubernetes.io/instance: main-ingress
                    app.kubernetes.io/name: nginx-ingress-controller
                namespaces:
                - components
                topologyKey: kubernetes.io/hostname
              weight: 1
        containers:
        - image: docker.io/bitnami/nginx:1.19.10-debian-10-r35
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: http
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: default-backend
          ports:
          - containerPort: 8080
            name: http
            protocol: TCP
          readinessProbe:
            failureThreshold: 6
            httpGet:
              path: /healthz
              port: http
              scheme: HTTP
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 5
          resources: {}
          securityContext:
            runAsUser: 1001
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /opt/bitnami/nginx/conf/bitnami/
            name: nginx-config-volume
            readOnly: true
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1001
        serviceAccount: main-ingress-nginx-ingress-controller
        serviceAccountName: main-ingress-nginx-ingress-controller
        terminationGracePeriodSeconds: 60
        volumes:
        - configMap:
            defaultMode: 420
            items:
            - key: defaultBackend.conf
              path: defaultBackend.conf
            name: main-ingress-nginx-ingress-controller-default-backend
          name: nginx-config-volume
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "2"
      meta.helm.sh/release-name: main-ingress
      meta.helm.sh/release-namespace: components
      service.beta.kubernetes.io/azure-load-balancer-internal: "true"
    creationTimestamp: "2022-01-18T22:59:33Z"
    generation: 2
    labels:
      app.kubernetes.io/component: default-backend
      app.kubernetes.io/instance: main-ingress
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: nginx-ingress-controller
      helm.sh/chart: nginx-ingress-controller-8.0.11
      pod-template-hash: b786f65b4
    name: main-ingress-nginx-ingress-controller-default-backend-b786f65b4
    namespace: components
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: main-ingress-nginx-ingress-controller-default-backend
      uid: 77c18668-d3c6-4b50-8d47-19dd7dac5788
    resourceVersion: "186900782"
    uid: 0e67a601-e260-4f81-b073-f29c2d9e9af5
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/component: default-backend
        app.kubernetes.io/instance: main-ingress
        app.kubernetes.io/name: nginx-ingress-controller
        pod-template-hash: b786f65b4
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: default-backend
          app.kubernetes.io/instance: main-ingress
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: nginx-ingress-controller
          helm.sh/chart: nginx-ingress-controller-8.0.11
          pod-template-hash: b786f65b4
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/component: default-backend
                    app.kubernetes.io/instance: main-ingress
                    app.kubernetes.io/name: nginx-ingress-controller
                namespaces:
                - components
                topologyKey: kubernetes.io/hostname
              weight: 1
        containers:
        - image: docker.io/bitnami/nginx:1.19.10-debian-10-r35
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: http
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: default-backend
          ports:
          - containerPort: 8080
            name: http
            protocol: TCP
          readinessProbe:
            failureThreshold: 6
            httpGet:
              path: /healthz
              port: http
              scheme: HTTP
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 5
          resources: {}
          securityContext:
            runAsUser: 1001
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /opt/bitnami/nginx/conf/bitnami/
            name: nginx-config-volume
            readOnly: true
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1001
        serviceAccount: main-ingress-nginx-ingress-controller
        serviceAccountName: main-ingress-nginx-ingress-controller
        terminationGracePeriodSeconds: 60
        volumes:
        - configMap:
            defaultMode: 420
            items:
            - key: defaultBackend.conf
              path: defaultBackend.conf
            name: main-ingress-nginx-ingress-controller-default-backend
          name: nginx-config-volume
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "3"
      field.cattle.io/publicEndpoints: '[{"addresses":["10.1.32.97"],"port":80,"protocol":"TCP","serviceName":"components:main-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.97"],"port":443,"protocol":"TCP","serviceName":"components:main-ingress-nginx-ingress-controller","allNodes":false}]'
      meta.helm.sh/release-name: main-ingress
      meta.helm.sh/release-namespace: components
      service.beta.kubernetes.io/azure-load-balancer-internal: "true"
    creationTimestamp: "2022-01-18T22:59:33Z"
    generation: 2
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: main-ingress
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: nginx-ingress-controller
      helm.sh/chart: nginx-ingress-controller-8.0.11
      pod-template-hash: f86c77767
    name: main-ingress-nginx-ingress-controller-f86c77767
    namespace: components
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: main-ingress-nginx-ingress-controller
      uid: 5b2b2901-ef5b-4d6f-8724-0108a23d91b2
    resourceVersion: "186900446"
    uid: 0de666b1-34fe-483f-8e4e-a73b365a5b24
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: main-ingress
        app.kubernetes.io/name: nginx-ingress-controller
        pod-template-hash: f86c77767
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: controller
          app.kubernetes.io/instance: main-ingress
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: nginx-ingress-controller
          helm.sh/chart: nginx-ingress-controller-8.0.11
          pod-template-hash: f86c77767
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/component: controller
                    app.kubernetes.io/instance: main-ingress
                    app.kubernetes.io/name: nginx-ingress-controller
                namespaces:
                - components
                topologyKey: kubernetes.io/hostname
              weight: 1
        containers:
        - args:
          - /nginx-ingress-controller
          - --default-backend-service=components/main-ingress-nginx-ingress-controller-default-backend
          - --election-id=ingress-controller-leader
          - --controller-class=k8s.io/ingress-nginx
          - --configmap=components/main-ingress-nginx-ingress-controller
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: docker.io/bitnami/nginx-ingress-controller:0.46.0-debian-10-r19
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: controller
          ports:
          - containerPort: 80
            name: http
            protocol: TCP
          - containerPort: 443
            name: https
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          securityContext:
            allowPrivilegeEscalation: true
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            runAsUser: 1001
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1001
        serviceAccount: main-ingress-nginx-ingress-controller
        serviceAccountName: main-ingress-nginx-ingress-controller
        terminationGracePeriodSeconds: 60
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "2"
      deployment.kubernetes.io/max-replicas: "3"
      deployment.kubernetes.io/revision: "26"
      field.cattle.io/publicEndpoints: '[{"addresses":["10.1.32.98"],"port":80,"protocol":"TCP","serviceName":"components:qa-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.98"],"port":443,"protocol":"TCP","serviceName":"components:qa-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.98"],"port":15672,"protocol":"TCP","serviceName":"components:qa-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.98"],"port":1883,"protocol":"TCP","serviceName":"components:qa-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.98"],"port":5432,"protocol":"TCP","serviceName":"components:qa-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.98"],"port":5672,"protocol":"TCP","serviceName":"components:qa-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.98"],"port":9000,"protocol":"TCP","serviceName":"components:qa-ingress-nginx-ingress-controller","allNodes":false}]'
      meta.helm.sh/release-name: qa-ingress
      meta.helm.sh/release-namespace: components
      reloader.stakater.com/auto: "true"
      service.beta.kubernetes.io/azure-load-balancer-internal: "true"
    creationTimestamp: "2022-07-06T18:09:38Z"
    generation: 4
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: qa-ingress
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: nginx-ingress-controller
      helm.sh/chart: nginx-ingress-controller-9.1.0
      pod-template-hash: 565d9c78d8
    name: qa-ingress-nginx-ingress-controller-565d9c78d8
    namespace: components
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: qa-ingress-nginx-ingress-controller
      uid: bc85f606-4a81-45ca-83b7-0ddbcc66ba1b
    resourceVersion: "283630656"
    uid: 8103971d-1715-4c8d-b72b-c56bf59234b9
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: qa-ingress
        app.kubernetes.io/name: nginx-ingress-controller
        pod-template-hash: 565d9c78d8
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/restartedAt: "2022-07-06T15:09:38-03:00"
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: controller
          app.kubernetes.io/instance: qa-ingress
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: nginx-ingress-controller
          helm.sh/chart: nginx-ingress-controller-9.1.0
          pod-template-hash: 565d9c78d8
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/component: controller
                    app.kubernetes.io/instance: qa-ingress
                    app.kubernetes.io/name: nginx-ingress-controller
                namespaces:
                - components
                topologyKey: kubernetes.io/hostname
              weight: 1
        containers:
        - args:
          - /nginx-ingress-controller
          - --default-backend-service=components/qa-ingress-nginx-ingress-controller-default-backend
          - --election-id=ingress-controller-leader
          - --configmap=components/qa-ingress-nginx-ingress-controller
          - --tcp-services-configmap=components/qa-ingress-nginx-ingress-controller-tcp
          - --ingress-class=qa-ingress
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: docker.io/bitnami/nginx-ingress-controller:0.46.0-debian-10-r19
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: controller
          ports:
          - containerPort: 80
            name: http
            protocol: TCP
          - containerPort: 443
            name: https
            protocol: TCP
          - containerPort: 15672
            name: 15672-tcp
            protocol: TCP
          - containerPort: 1883
            name: 1883-tcp
            protocol: TCP
          - containerPort: 5432
            name: 5432-tcp
            protocol: TCP
          - containerPort: 5672
            name: 5672-tcp
            protocol: TCP
          - containerPort: 8883
            name: 8883-tcp
            protocol: TCP
          - containerPort: 9000
            name: 9000-tcp
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          securityContext:
            allowPrivilegeEscalation: true
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            runAsUser: 1001
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1001
        serviceAccount: qa-ingress-nginx-ingress-controller
        serviceAccountName: qa-ingress-nginx-ingress-controller
        terminationGracePeriodSeconds: 60
  status:
    observedGeneration: 4
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "2"
      deployment.kubernetes.io/max-replicas: "3"
      deployment.kubernetes.io/revision: "29"
      field.cattle.io/publicEndpoints: '[{"addresses":["10.1.32.98"],"port":80,"protocol":"TCP","serviceName":"components:qa-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.98"],"port":443,"protocol":"TCP","serviceName":"components:qa-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.98"],"port":15672,"protocol":"TCP","serviceName":"components:qa-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.98"],"port":1883,"protocol":"TCP","serviceName":"components:qa-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.98"],"port":5432,"protocol":"TCP","serviceName":"components:qa-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.98"],"port":5672,"protocol":"TCP","serviceName":"components:qa-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.98"],"port":9000,"protocol":"TCP","serviceName":"components:qa-ingress-nginx-ingress-controller","allNodes":false}]'
      meta.helm.sh/release-name: qa-ingress
      meta.helm.sh/release-namespace: components
      reloader.stakater.com/auto: "true"
      service.beta.kubernetes.io/azure-load-balancer-internal: "true"
    creationTimestamp: "2022-08-01T19:27:18Z"
    generation: 4
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: qa-ingress
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: nginx-ingress-controller
      helm.sh/chart: nginx-ingress-controller-9.1.0
      pod-template-hash: 5986bc75b9
    name: qa-ingress-nginx-ingress-controller-5986bc75b9
    namespace: components
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: qa-ingress-nginx-ingress-controller
      uid: bc85f606-4a81-45ca-83b7-0ddbcc66ba1b
    resourceVersion: "301560384"
    uid: a5a0d006-1f9e-40fb-a689-c7d67da8ca3f
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: qa-ingress
        app.kubernetes.io/name: nginx-ingress-controller
        pod-template-hash: 5986bc75b9
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/restartedAt: "2022-08-01T16:27:18-03:00"
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: controller
          app.kubernetes.io/instance: qa-ingress
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: nginx-ingress-controller
          helm.sh/chart: nginx-ingress-controller-9.1.0
          pod-template-hash: 5986bc75b9
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/component: controller
                    app.kubernetes.io/instance: qa-ingress
                    app.kubernetes.io/name: nginx-ingress-controller
                namespaces:
                - components
                topologyKey: kubernetes.io/hostname
              weight: 1
        containers:
        - args:
          - /nginx-ingress-controller
          - --default-backend-service=components/qa-ingress-nginx-ingress-controller-default-backend
          - --election-id=ingress-controller-leader
          - --configmap=components/qa-ingress-nginx-ingress-controller
          - --tcp-services-configmap=components/qa-ingress-nginx-ingress-controller-tcp
          - --ingress-class=qa-ingress
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: docker.io/bitnami/nginx-ingress-controller:0.46.0-debian-10-r19
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: controller
          ports:
          - containerPort: 80
            name: http
            protocol: TCP
          - containerPort: 443
            name: https
            protocol: TCP
          - containerPort: 15672
            name: 15672-tcp
            protocol: TCP
          - containerPort: 1883
            name: 1883-tcp
            protocol: TCP
          - containerPort: 5432
            name: 5432-tcp
            protocol: TCP
          - containerPort: 5672
            name: 5672-tcp
            protocol: TCP
          - containerPort: 8883
            name: 8883-tcp
            protocol: TCP
          - containerPort: 9000
            name: 9000-tcp
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          securityContext:
            allowPrivilegeEscalation: true
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            runAsUser: 1001
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1001
        serviceAccount: qa-ingress-nginx-ingress-controller
        serviceAccountName: qa-ingress-nginx-ingress-controller
        terminationGracePeriodSeconds: 60
  status:
    observedGeneration: 4
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "2"
      deployment.kubernetes.io/max-replicas: "3"
      deployment.kubernetes.io/revision: "32"
      field.cattle.io/publicEndpoints: '[{"addresses":["10.1.32.98"],"port":80,"protocol":"TCP","serviceName":"components:qa-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.98"],"port":443,"protocol":"TCP","serviceName":"components:qa-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.98"],"port":15672,"protocol":"TCP","serviceName":"components:qa-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.98"],"port":1883,"protocol":"TCP","serviceName":"components:qa-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.98"],"port":5432,"protocol":"TCP","serviceName":"components:qa-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.98"],"port":5671,"protocol":"TCP","serviceName":"components:qa-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.98"],"port":5672,"protocol":"TCP","serviceName":"components:qa-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.98"],"port":6379,"protocol":"TCP","serviceName":"components:qa-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.98"],"port":8883,"protocol":"TCP","serviceName":"components:qa-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.98"],"port":9000,"protocol":"TCP","serviceName":"components:qa-ingress-nginx-ingress-controller","allNodes":false}]'
      meta.helm.sh/release-name: qa-ingress
      meta.helm.sh/release-namespace: components
      reloader.stakater.com/auto: "true"
      service.beta.kubernetes.io/azure-load-balancer-internal: "true"
    creationTimestamp: "2022-12-02T11:57:49Z"
    generation: 4
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: qa-ingress
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: nginx-ingress-controller
      helm.sh/chart: nginx-ingress-controller-9.1.0
      pod-template-hash: 5c84fb6d65
    name: qa-ingress-nginx-ingress-controller-5c84fb6d65
    namespace: components
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: qa-ingress-nginx-ingress-controller
      uid: bc85f606-4a81-45ca-83b7-0ddbcc66ba1b
    resourceVersion: "492098456"
    uid: 308584ef-4e1d-4722-b9b4-0ade9be5ca65
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: qa-ingress
        app.kubernetes.io/name: nginx-ingress-controller
        pod-template-hash: 5c84fb6d65
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/restartedAt: "2022-12-02T08:57:49-03:00"
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: controller
          app.kubernetes.io/instance: qa-ingress
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: nginx-ingress-controller
          helm.sh/chart: nginx-ingress-controller-9.1.0
          pod-template-hash: 5c84fb6d65
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/component: controller
                    app.kubernetes.io/instance: qa-ingress
                    app.kubernetes.io/name: nginx-ingress-controller
                namespaces:
                - components
                topologyKey: kubernetes.io/hostname
              weight: 1
        containers:
        - args:
          - /nginx-ingress-controller
          - --default-backend-service=components/qa-ingress-nginx-ingress-controller-default-backend
          - --election-id=ingress-controller-leader
          - --configmap=components/qa-ingress-nginx-ingress-controller
          - --tcp-services-configmap=components/qa-ingress-nginx-ingress-controller-tcp
          - --ingress-class=qa-ingress
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: docker.io/bitnami/nginx-ingress-controller:0.46.0-debian-10-r19
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: controller
          ports:
          - containerPort: 80
            name: http
            protocol: TCP
          - containerPort: 443
            name: https
            protocol: TCP
          - containerPort: 15672
            name: 15672-tcp
            protocol: TCP
          - containerPort: 1883
            name: 1883-tcp
            protocol: TCP
          - containerPort: 5432
            name: 5432-tcp
            protocol: TCP
          - containerPort: 5671
            name: 5671-tcp
            protocol: TCP
          - containerPort: 5672
            name: 5672-tcp
            protocol: TCP
          - containerPort: 6379
            name: 6379-tcp
            protocol: TCP
          - containerPort: 8883
            name: 8883-tcp
            protocol: TCP
          - containerPort: 9000
            name: 9000-tcp
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          securityContext:
            allowPrivilegeEscalation: true
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            runAsUser: 1001
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1001
        serviceAccount: qa-ingress-nginx-ingress-controller
        serviceAccountName: qa-ingress-nginx-ingress-controller
        terminationGracePeriodSeconds: 60
  status:
    observedGeneration: 4
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "2"
      deployment.kubernetes.io/max-replicas: "3"
      deployment.kubernetes.io/revision: "37"
      field.cattle.io/publicEndpoints: '[{"addresses":["10.1.32.98"],"port":80,"protocol":"TCP","serviceName":"components:qa-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.98"],"port":443,"protocol":"TCP","serviceName":"components:qa-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.98"],"port":15672,"protocol":"TCP","serviceName":"components:qa-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.98"],"port":1883,"protocol":"TCP","serviceName":"components:qa-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.98"],"port":5671,"protocol":"TCP","serviceName":"components:qa-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.98"],"port":5672,"protocol":"TCP","serviceName":"components:qa-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.98"],"port":6379,"protocol":"TCP","serviceName":"components:qa-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.98"],"port":8883,"protocol":"TCP","serviceName":"components:qa-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.98"],"port":9000,"protocol":"TCP","serviceName":"components:qa-ingress-nginx-ingress-controller","allNodes":false}]'
      meta.helm.sh/release-name: qa-ingress
      meta.helm.sh/release-namespace: components
      reloader.stakater.com/auto: "true"
    creationTimestamp: "2022-12-15T18:42:26Z"
    generation: 2
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: qa-ingress
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: nginx-ingress-controller
      helm.sh/chart: nginx-ingress-controller-9.3.22
      pod-template-hash: 69fbc65977
    name: qa-ingress-nginx-ingress-controller-69fbc65977
    namespace: components
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: qa-ingress-nginx-ingress-controller
      uid: bc85f606-4a81-45ca-83b7-0ddbcc66ba1b
    resourceVersion: "564971762"
    uid: 67c24132-bcee-43a2-b7a9-a3080a84123a
  spec:
    replicas: 2
    selector:
      matchLabels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: qa-ingress
        app.kubernetes.io/name: nginx-ingress-controller
        pod-template-hash: 69fbc65977
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/restartedAt: "2022-12-02T10:57:39-03:00"
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: controller
          app.kubernetes.io/instance: qa-ingress
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: nginx-ingress-controller
          helm.sh/chart: nginx-ingress-controller-9.3.22
          pod-template-hash: 69fbc65977
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/component: controller
                    app.kubernetes.io/instance: qa-ingress
                    app.kubernetes.io/name: nginx-ingress-controller
                topologyKey: kubernetes.io/hostname
              weight: 1
        containers:
        - args:
          - /nginx-ingress-controller
          - --default-backend-service=components/qa-ingress-nginx-ingress-controller-default-backend
          - --election-id=ingress-controller-leader
          - --controller-class=k8s.io/ingress-nginx
          - --configmap=components/qa-ingress-nginx-ingress-controller
          - --tcp-services-configmap=components/qa-ingress-nginx-ingress-controller-tcp
          - --ingress-class=qa-ingress
          - --v=1
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: docker.io/bitnami/nginx-ingress-controller:1.5.1-debian-11-r5
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: controller
          ports:
          - containerPort: 80
            name: http
            protocol: TCP
          - containerPort: 443
            name: https
            protocol: TCP
          - containerPort: 15672
            name: 15672-tcp
            protocol: TCP
          - containerPort: 1883
            name: 1883-tcp
            protocol: TCP
          - containerPort: 5671
            name: 5671-tcp
            protocol: TCP
          - containerPort: 5672
            name: 5672-tcp
            protocol: TCP
          - containerPort: 6379
            name: 6379-tcp
            protocol: TCP
          - containerPort: 8883
            name: 8883-tcp
            protocol: TCP
          - containerPort: 9000
            name: 9000-tcp
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          securityContext:
            allowPrivilegeEscalation: true
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            runAsNonRoot: true
            runAsUser: 1001
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1001
        serviceAccount: qa-ingress-nginx-ingress-controller
        serviceAccountName: qa-ingress-nginx-ingress-controller
        terminationGracePeriodSeconds: 60
  status:
    availableReplicas: 2
    fullyLabeledReplicas: 2
    observedGeneration: 2
    readyReplicas: 2
    replicas: 2
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "2"
      deployment.kubernetes.io/max-replicas: "3"
      deployment.kubernetes.io/revision: "33"
      field.cattle.io/publicEndpoints: '[{"addresses":["10.1.32.98"],"port":80,"protocol":"TCP","serviceName":"components:qa-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.98"],"port":443,"protocol":"TCP","serviceName":"components:qa-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.98"],"port":15672,"protocol":"TCP","serviceName":"components:qa-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.98"],"port":1883,"protocol":"TCP","serviceName":"components:qa-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.98"],"port":5671,"protocol":"TCP","serviceName":"components:qa-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.98"],"port":5672,"protocol":"TCP","serviceName":"components:qa-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.98"],"port":6379,"protocol":"TCP","serviceName":"components:qa-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.98"],"port":8883,"protocol":"TCP","serviceName":"components:qa-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.98"],"port":9000,"protocol":"TCP","serviceName":"components:qa-ingress-nginx-ingress-controller","allNodes":false}]'
      meta.helm.sh/release-name: qa-ingress
      meta.helm.sh/release-namespace: components
      reloader.stakater.com/auto: "true"
      service.beta.kubernetes.io/azure-load-balancer-internal: "true"
    creationTimestamp: "2022-12-02T13:57:39Z"
    generation: 4
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: qa-ingress
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: nginx-ingress-controller
      helm.sh/chart: nginx-ingress-controller-9.1.0
      pod-template-hash: 6d6d7d5cff
    name: qa-ingress-nginx-ingress-controller-6d6d7d5cff
    namespace: components
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: qa-ingress-nginx-ingress-controller
      uid: bc85f606-4a81-45ca-83b7-0ddbcc66ba1b
    resourceVersion: "493131861"
    uid: 9611ccef-87f2-4db3-98e6-e53c7b8a5bc6
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: qa-ingress
        app.kubernetes.io/name: nginx-ingress-controller
        pod-template-hash: 6d6d7d5cff
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/restartedAt: "2022-12-02T10:57:39-03:00"
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: controller
          app.kubernetes.io/instance: qa-ingress
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: nginx-ingress-controller
          helm.sh/chart: nginx-ingress-controller-9.1.0
          pod-template-hash: 6d6d7d5cff
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/component: controller
                    app.kubernetes.io/instance: qa-ingress
                    app.kubernetes.io/name: nginx-ingress-controller
                namespaces:
                - components
                topologyKey: kubernetes.io/hostname
              weight: 1
        containers:
        - args:
          - /nginx-ingress-controller
          - --default-backend-service=components/qa-ingress-nginx-ingress-controller-default-backend
          - --election-id=ingress-controller-leader
          - --configmap=components/qa-ingress-nginx-ingress-controller
          - --tcp-services-configmap=components/qa-ingress-nginx-ingress-controller-tcp
          - --ingress-class=qa-ingress
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: docker.io/bitnami/nginx-ingress-controller:0.46.0-debian-10-r19
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: controller
          ports:
          - containerPort: 80
            name: http
            protocol: TCP
          - containerPort: 443
            name: https
            protocol: TCP
          - containerPort: 15672
            name: 15672-tcp
            protocol: TCP
          - containerPort: 1883
            name: 1883-tcp
            protocol: TCP
          - containerPort: 5432
            name: 5432-tcp
            protocol: TCP
          - containerPort: 5671
            name: 5671-tcp
            protocol: TCP
          - containerPort: 5672
            name: 5672-tcp
            protocol: TCP
          - containerPort: 6379
            name: 6379-tcp
            protocol: TCP
          - containerPort: 8883
            name: 8883-tcp
            protocol: TCP
          - containerPort: 9000
            name: 9000-tcp
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          securityContext:
            allowPrivilegeEscalation: true
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            runAsUser: 1001
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1001
        serviceAccount: qa-ingress-nginx-ingress-controller
        serviceAccountName: qa-ingress-nginx-ingress-controller
        terminationGracePeriodSeconds: 60
  status:
    observedGeneration: 4
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "2"
      deployment.kubernetes.io/max-replicas: "3"
      deployment.kubernetes.io/revision: "27"
      field.cattle.io/publicEndpoints: '[{"addresses":["10.1.32.98"],"port":80,"protocol":"TCP","serviceName":"components:qa-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.98"],"port":443,"protocol":"TCP","serviceName":"components:qa-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.98"],"port":15672,"protocol":"TCP","serviceName":"components:qa-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.98"],"port":1883,"protocol":"TCP","serviceName":"components:qa-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.98"],"port":5432,"protocol":"TCP","serviceName":"components:qa-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.98"],"port":5672,"protocol":"TCP","serviceName":"components:qa-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.98"],"port":9000,"protocol":"TCP","serviceName":"components:qa-ingress-nginx-ingress-controller","allNodes":false}]'
      meta.helm.sh/release-name: qa-ingress
      meta.helm.sh/release-namespace: components
      reloader.stakater.com/auto: "true"
      service.beta.kubernetes.io/azure-load-balancer-internal: "true"
    creationTimestamp: "2022-07-11T12:16:05Z"
    generation: 4
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: qa-ingress
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: nginx-ingress-controller
      helm.sh/chart: nginx-ingress-controller-9.1.0
      pod-template-hash: 6fff4589d9
    name: qa-ingress-nginx-ingress-controller-6fff4589d9
    namespace: components
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: qa-ingress-nginx-ingress-controller
      uid: bc85f606-4a81-45ca-83b7-0ddbcc66ba1b
    resourceVersion: "290861681"
    uid: 78c937e1-a614-4aa7-9a3f-2e111d0b793c
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: qa-ingress
        app.kubernetes.io/name: nginx-ingress-controller
        pod-template-hash: 6fff4589d9
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/restartedAt: "2022-07-11T09:16:05-03:00"
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: controller
          app.kubernetes.io/instance: qa-ingress
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: nginx-ingress-controller
          helm.sh/chart: nginx-ingress-controller-9.1.0
          pod-template-hash: 6fff4589d9
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/component: controller
                    app.kubernetes.io/instance: qa-ingress
                    app.kubernetes.io/name: nginx-ingress-controller
                namespaces:
                - components
                topologyKey: kubernetes.io/hostname
              weight: 1
        containers:
        - args:
          - /nginx-ingress-controller
          - --default-backend-service=components/qa-ingress-nginx-ingress-controller-default-backend
          - --election-id=ingress-controller-leader
          - --configmap=components/qa-ingress-nginx-ingress-controller
          - --tcp-services-configmap=components/qa-ingress-nginx-ingress-controller-tcp
          - --ingress-class=qa-ingress
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: docker.io/bitnami/nginx-ingress-controller:0.46.0-debian-10-r19
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: controller
          ports:
          - containerPort: 80
            name: http
            protocol: TCP
          - containerPort: 443
            name: https
            protocol: TCP
          - containerPort: 15672
            name: 15672-tcp
            protocol: TCP
          - containerPort: 1883
            name: 1883-tcp
            protocol: TCP
          - containerPort: 5432
            name: 5432-tcp
            protocol: TCP
          - containerPort: 5672
            name: 5672-tcp
            protocol: TCP
          - containerPort: 8883
            name: 8883-tcp
            protocol: TCP
          - containerPort: 9000
            name: 9000-tcp
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          securityContext:
            allowPrivilegeEscalation: true
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            runAsUser: 1001
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1001
        serviceAccount: qa-ingress-nginx-ingress-controller
        serviceAccountName: qa-ingress-nginx-ingress-controller
        terminationGracePeriodSeconds: 60
  status:
    observedGeneration: 4
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "2"
      deployment.kubernetes.io/max-replicas: "3"
      deployment.kubernetes.io/revision: "35"
      field.cattle.io/publicEndpoints: '[{"addresses":["10.1.32.98"],"port":80,"protocol":"TCP","serviceName":"components:qa-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.98"],"port":443,"protocol":"TCP","serviceName":"components:qa-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.98"],"port":15672,"protocol":"TCP","serviceName":"components:qa-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.98"],"port":1883,"protocol":"TCP","serviceName":"components:qa-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.98"],"port":5671,"protocol":"TCP","serviceName":"components:qa-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.98"],"port":5672,"protocol":"TCP","serviceName":"components:qa-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.98"],"port":6379,"protocol":"TCP","serviceName":"components:qa-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.98"],"port":8883,"protocol":"TCP","serviceName":"components:qa-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.98"],"port":9000,"protocol":"TCP","serviceName":"components:qa-ingress-nginx-ingress-controller","allNodes":false}]'
      meta.helm.sh/release-name: qa-ingress
      meta.helm.sh/release-namespace: components
      reloader.stakater.com/auto: "true"
    creationTimestamp: "2022-12-05T14:42:50Z"
    generation: 4
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: qa-ingress
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: nginx-ingress-controller
      helm.sh/chart: nginx-ingress-controller-9.3.22
      pod-template-hash: 748697f7c5
    name: qa-ingress-nginx-ingress-controller-748697f7c5
    namespace: components
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: qa-ingress-nginx-ingress-controller
      uid: bc85f606-4a81-45ca-83b7-0ddbcc66ba1b
    resourceVersion: "502590980"
    uid: ed63b012-fa04-4598-946f-eac84705d976
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: qa-ingress
        app.kubernetes.io/name: nginx-ingress-controller
        pod-template-hash: 748697f7c5
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/restartedAt: "2022-12-02T10:57:39-03:00"
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: controller
          app.kubernetes.io/instance: qa-ingress
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: nginx-ingress-controller
          helm.sh/chart: nginx-ingress-controller-9.3.22
          pod-template-hash: 748697f7c5
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/component: controller
                    app.kubernetes.io/instance: qa-ingress
                    app.kubernetes.io/name: nginx-ingress-controller
                topologyKey: kubernetes.io/hostname
              weight: 1
        containers:
        - args:
          - /nginx-ingress-controller
          - --default-backend-service=components/qa-ingress-nginx-ingress-controller-default-backend
          - --election-id=ingress-controller-leader
          - --controller-class=k8s.io/ingress-nginx
          - --configmap=components/qa-ingress-nginx-ingress-controller
          - --tcp-services-configmap=components/qa-ingress-nginx-ingress-controller-tcp
          - --ingress-class=qa-ingress
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: docker.io/bitnami/nginx-ingress-controller:1.5.1-debian-11-r5
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: controller
          ports:
          - containerPort: 80
            name: http
            protocol: TCP
          - containerPort: 443
            name: https
            protocol: TCP
          - containerPort: 15672
            name: 15672-tcp
            protocol: TCP
          - containerPort: 1883
            name: 1883-tcp
            protocol: TCP
          - containerPort: 5432
            name: 5432-tcp
            protocol: TCP
          - containerPort: 5671
            name: 5671-tcp
            protocol: TCP
          - containerPort: 5672
            name: 5672-tcp
            protocol: TCP
          - containerPort: 6379
            name: 6379-tcp
            protocol: TCP
          - containerPort: 8883
            name: 8883-tcp
            protocol: TCP
          - containerPort: 9000
            name: 9000-tcp
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          securityContext:
            allowPrivilegeEscalation: true
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            runAsNonRoot: true
            runAsUser: 1001
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1001
        serviceAccount: qa-ingress-nginx-ingress-controller
        serviceAccountName: qa-ingress-nginx-ingress-controller
        terminationGracePeriodSeconds: 60
  status:
    observedGeneration: 4
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "2"
      deployment.kubernetes.io/max-replicas: "3"
      deployment.kubernetes.io/revision: "31"
      field.cattle.io/publicEndpoints: '[{"addresses":["10.1.32.98"],"port":80,"protocol":"TCP","serviceName":"components:qa-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.98"],"port":443,"protocol":"TCP","serviceName":"components:qa-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.98"],"port":15672,"protocol":"TCP","serviceName":"components:qa-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.98"],"port":1883,"protocol":"TCP","serviceName":"components:qa-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.98"],"port":5432,"protocol":"TCP","serviceName":"components:qa-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.98"],"port":5671,"protocol":"TCP","serviceName":"components:qa-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.98"],"port":5672,"protocol":"TCP","serviceName":"components:qa-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.98"],"port":6379,"protocol":"TCP","serviceName":"components:qa-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.98"],"port":8883,"protocol":"TCP","serviceName":"components:qa-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.98"],"port":9000,"protocol":"TCP","serviceName":"components:qa-ingress-nginx-ingress-controller","allNodes":false}]'
      meta.helm.sh/release-name: qa-ingress
      meta.helm.sh/release-namespace: components
      reloader.stakater.com/auto: "true"
      service.beta.kubernetes.io/azure-load-balancer-internal: "true"
    creationTimestamp: "2022-08-17T17:30:45Z"
    generation: 5
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: qa-ingress
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: nginx-ingress-controller
      helm.sh/chart: nginx-ingress-controller-9.1.0
      pod-template-hash: 77dc8d87c7
    name: qa-ingress-nginx-ingress-controller-77dc8d87c7
    namespace: components
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: qa-ingress-nginx-ingress-controller
      uid: bc85f606-4a81-45ca-83b7-0ddbcc66ba1b
    resourceVersion: "492030297"
    uid: b0239171-06ac-444c-b557-54ec48878296
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: qa-ingress
        app.kubernetes.io/name: nginx-ingress-controller
        pod-template-hash: 77dc8d87c7
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/restartedAt: "2022-08-01T16:27:18-03:00"
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: controller
          app.kubernetes.io/instance: qa-ingress
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: nginx-ingress-controller
          helm.sh/chart: nginx-ingress-controller-9.1.0
          pod-template-hash: 77dc8d87c7
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/component: controller
                    app.kubernetes.io/instance: qa-ingress
                    app.kubernetes.io/name: nginx-ingress-controller
                namespaces:
                - components
                topologyKey: kubernetes.io/hostname
              weight: 1
        containers:
        - args:
          - /nginx-ingress-controller
          - --default-backend-service=components/qa-ingress-nginx-ingress-controller-default-backend
          - --election-id=ingress-controller-leader
          - --configmap=components/qa-ingress-nginx-ingress-controller
          - --tcp-services-configmap=components/qa-ingress-nginx-ingress-controller-tcp
          - --ingress-class=qa-ingress
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: docker.io/bitnami/nginx-ingress-controller:0.46.0-debian-10-r19
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: controller
          ports:
          - containerPort: 80
            name: http
            protocol: TCP
          - containerPort: 443
            name: https
            protocol: TCP
          - containerPort: 15672
            name: 15672-tcp
            protocol: TCP
          - containerPort: 1883
            name: 1883-tcp
            protocol: TCP
          - containerPort: 5432
            name: 5432-tcp
            protocol: TCP
          - containerPort: 5671
            name: 5671-tcp
            protocol: TCP
          - containerPort: 5672
            name: 5672-tcp
            protocol: TCP
          - containerPort: 6379
            name: 6379-tcp
            protocol: TCP
          - containerPort: 8883
            name: 8883-tcp
            protocol: TCP
          - containerPort: 9000
            name: 9000-tcp
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          securityContext:
            allowPrivilegeEscalation: true
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            runAsUser: 1001
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1001
        serviceAccount: qa-ingress-nginx-ingress-controller
        serviceAccountName: qa-ingress-nginx-ingress-controller
        terminationGracePeriodSeconds: 60
  status:
    observedGeneration: 5
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "2"
      deployment.kubernetes.io/max-replicas: "3"
      deployment.kubernetes.io/revision: "28"
      field.cattle.io/publicEndpoints: '[{"addresses":["10.1.32.98"],"port":80,"protocol":"TCP","serviceName":"components:qa-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.98"],"port":443,"protocol":"TCP","serviceName":"components:qa-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.98"],"port":15672,"protocol":"TCP","serviceName":"components:qa-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.98"],"port":1883,"protocol":"TCP","serviceName":"components:qa-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.98"],"port":5432,"protocol":"TCP","serviceName":"components:qa-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.98"],"port":5672,"protocol":"TCP","serviceName":"components:qa-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.98"],"port":9000,"protocol":"TCP","serviceName":"components:qa-ingress-nginx-ingress-controller","allNodes":false}]'
      meta.helm.sh/release-name: qa-ingress
      meta.helm.sh/release-namespace: components
      reloader.stakater.com/auto: "true"
      service.beta.kubernetes.io/azure-load-balancer-internal: "true"
    creationTimestamp: "2022-07-26T12:35:37Z"
    generation: 4
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: qa-ingress
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: nginx-ingress-controller
      helm.sh/chart: nginx-ingress-controller-9.1.0
      pod-template-hash: 7849cfbcbb
    name: qa-ingress-nginx-ingress-controller-7849cfbcbb
    namespace: components
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: qa-ingress-nginx-ingress-controller
      uid: bc85f606-4a81-45ca-83b7-0ddbcc66ba1b
    resourceVersion: "293921220"
    uid: e7bd7f7a-8b79-42a0-afbd-3abd8dadf8cf
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: qa-ingress
        app.kubernetes.io/name: nginx-ingress-controller
        pod-template-hash: 7849cfbcbb
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/restartedAt: "2022-07-26T09:35:38-03:00"
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: controller
          app.kubernetes.io/instance: qa-ingress
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: nginx-ingress-controller
          helm.sh/chart: nginx-ingress-controller-9.1.0
          pod-template-hash: 7849cfbcbb
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/component: controller
                    app.kubernetes.io/instance: qa-ingress
                    app.kubernetes.io/name: nginx-ingress-controller
                namespaces:
                - components
                topologyKey: kubernetes.io/hostname
              weight: 1
        containers:
        - args:
          - /nginx-ingress-controller
          - --default-backend-service=components/qa-ingress-nginx-ingress-controller-default-backend
          - --election-id=ingress-controller-leader
          - --configmap=components/qa-ingress-nginx-ingress-controller
          - --tcp-services-configmap=components/qa-ingress-nginx-ingress-controller-tcp
          - --ingress-class=qa-ingress
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: docker.io/bitnami/nginx-ingress-controller:0.46.0-debian-10-r19
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: controller
          ports:
          - containerPort: 80
            name: http
            protocol: TCP
          - containerPort: 443
            name: https
            protocol: TCP
          - containerPort: 15672
            name: 15672-tcp
            protocol: TCP
          - containerPort: 1883
            name: 1883-tcp
            protocol: TCP
          - containerPort: 5432
            name: 5432-tcp
            protocol: TCP
          - containerPort: 5672
            name: 5672-tcp
            protocol: TCP
          - containerPort: 8883
            name: 8883-tcp
            protocol: TCP
          - containerPort: 9000
            name: 9000-tcp
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          securityContext:
            allowPrivilegeEscalation: true
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            runAsUser: 1001
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1001
        serviceAccount: qa-ingress-nginx-ingress-controller
        serviceAccountName: qa-ingress-nginx-ingress-controller
        terminationGracePeriodSeconds: 60
  status:
    observedGeneration: 4
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "2"
      deployment.kubernetes.io/max-replicas: "3"
      deployment.kubernetes.io/revision: "36"
      deployment.kubernetes.io/revision-history: "34"
      field.cattle.io/publicEndpoints: '[{"addresses":["10.1.32.98"],"port":80,"protocol":"TCP","serviceName":"components:qa-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.98"],"port":443,"protocol":"TCP","serviceName":"components:qa-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.98"],"port":15672,"protocol":"TCP","serviceName":"components:qa-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.98"],"port":1883,"protocol":"TCP","serviceName":"components:qa-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.98"],"port":5671,"protocol":"TCP","serviceName":"components:qa-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.98"],"port":5672,"protocol":"TCP","serviceName":"components:qa-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.98"],"port":6379,"protocol":"TCP","serviceName":"components:qa-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.98"],"port":8883,"protocol":"TCP","serviceName":"components:qa-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.98"],"port":9000,"protocol":"TCP","serviceName":"components:qa-ingress-nginx-ingress-controller","allNodes":false}]'
      meta.helm.sh/release-name: qa-ingress
      meta.helm.sh/release-namespace: components
      reloader.stakater.com/auto: "true"
    creationTimestamp: "2022-12-03T19:47:05Z"
    generation: 8
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: qa-ingress
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: nginx-ingress-controller
      helm.sh/chart: nginx-ingress-controller-9.3.22
      pod-template-hash: 7985fbd5d7
    name: qa-ingress-nginx-ingress-controller-7985fbd5d7
    namespace: components
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: qa-ingress-nginx-ingress-controller
      uid: bc85f606-4a81-45ca-83b7-0ddbcc66ba1b
    resourceVersion: "502613156"
    uid: cad9140f-9219-49f0-b877-3fd3353dc1ac
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: qa-ingress
        app.kubernetes.io/name: nginx-ingress-controller
        pod-template-hash: 7985fbd5d7
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/restartedAt: "2022-12-02T10:57:39-03:00"
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: controller
          app.kubernetes.io/instance: qa-ingress
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: nginx-ingress-controller
          helm.sh/chart: nginx-ingress-controller-9.3.22
          pod-template-hash: 7985fbd5d7
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/component: controller
                    app.kubernetes.io/instance: qa-ingress
                    app.kubernetes.io/name: nginx-ingress-controller
                topologyKey: kubernetes.io/hostname
              weight: 1
        containers:
        - args:
          - /nginx-ingress-controller
          - --default-backend-service=components/qa-ingress-nginx-ingress-controller-default-backend
          - --election-id=ingress-controller-leader
          - --controller-class=k8s.io/ingress-nginx
          - --configmap=components/qa-ingress-nginx-ingress-controller
          - --tcp-services-configmap=components/qa-ingress-nginx-ingress-controller-tcp
          - --ingress-class=qa-ingress
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: docker.io/bitnami/nginx-ingress-controller:1.5.1-debian-11-r5
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: controller
          ports:
          - containerPort: 80
            name: http
            protocol: TCP
          - containerPort: 443
            name: https
            protocol: TCP
          - containerPort: 15672
            name: 15672-tcp
            protocol: TCP
          - containerPort: 1883
            name: 1883-tcp
            protocol: TCP
          - containerPort: 5671
            name: 5671-tcp
            protocol: TCP
          - containerPort: 5672
            name: 5672-tcp
            protocol: TCP
          - containerPort: 6379
            name: 6379-tcp
            protocol: TCP
          - containerPort: 8883
            name: 8883-tcp
            protocol: TCP
          - containerPort: 9000
            name: 9000-tcp
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          securityContext:
            allowPrivilegeEscalation: true
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            runAsNonRoot: true
            runAsUser: 1001
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1001
        serviceAccount: qa-ingress-nginx-ingress-controller
        serviceAccountName: qa-ingress-nginx-ingress-controller
        terminationGracePeriodSeconds: 60
  status:
    observedGeneration: 8
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "2"
      deployment.kubernetes.io/max-replicas: "3"
      deployment.kubernetes.io/revision: "30"
      field.cattle.io/publicEndpoints: '[{"addresses":["10.1.32.98"],"port":80,"protocol":"TCP","serviceName":"components:qa-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.98"],"port":443,"protocol":"TCP","serviceName":"components:qa-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.98"],"port":15672,"protocol":"TCP","serviceName":"components:qa-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.98"],"port":1883,"protocol":"TCP","serviceName":"components:qa-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.98"],"port":5432,"protocol":"TCP","serviceName":"components:qa-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.98"],"port":5672,"protocol":"TCP","serviceName":"components:qa-ingress-nginx-ingress-controller","allNodes":false},{"addresses":["10.1.32.98"],"port":9000,"protocol":"TCP","serviceName":"components:qa-ingress-nginx-ingress-controller","allNodes":false}]'
      meta.helm.sh/release-name: qa-ingress
      meta.helm.sh/release-namespace: components
      reloader.stakater.com/auto: "true"
      service.beta.kubernetes.io/azure-load-balancer-internal: "true"
    creationTimestamp: "2022-08-17T17:30:17Z"
    generation: 2
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: qa-ingress
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: nginx-ingress-controller
      helm.sh/chart: nginx-ingress-controller-9.1.0
      pod-template-hash: b9868d94d
    name: qa-ingress-nginx-ingress-controller-b9868d94d
    namespace: components
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: qa-ingress-nginx-ingress-controller
      uid: bc85f606-4a81-45ca-83b7-0ddbcc66ba1b
    resourceVersion: "301560051"
    uid: df847ae7-05fd-415f-a3b5-29f24b3a36b7
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: qa-ingress
        app.kubernetes.io/name: nginx-ingress-controller
        pod-template-hash: b9868d94d
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/restartedAt: "2022-08-01T16:27:18-03:00"
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: controller
          app.kubernetes.io/instance: qa-ingress
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: nginx-ingress-controller
          helm.sh/chart: nginx-ingress-controller-9.1.0
          pod-template-hash: b9868d94d
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/component: controller
                    app.kubernetes.io/instance: qa-ingress
                    app.kubernetes.io/name: nginx-ingress-controller
                namespaces:
                - components
                topologyKey: kubernetes.io/hostname
              weight: 1
        containers:
        - args:
          - /nginx-ingress-controller
          - --default-backend-service=components/qa-ingress-nginx-ingress-controller-default-backend
          - --election-id=ingress-controller-leader
          - --controller-class=k8s.io/ingress-nginx
          - --configmap=components/qa-ingress-nginx-ingress-controller
          - --tcp-services-configmap=components/qa-ingress-nginx-ingress-controller-tcp
          - --ingress-class=qa-ingress
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: docker.io/bitnami/nginx-ingress-controller:0.46.0-debian-10-r19
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: controller
          ports:
          - containerPort: 80
            name: http
            protocol: TCP
          - containerPort: 443
            name: https
            protocol: TCP
          - containerPort: 15672
            name: 15672-tcp
            protocol: TCP
          - containerPort: 1883
            name: 1883-tcp
            protocol: TCP
          - containerPort: 5432
            name: 5432-tcp
            protocol: TCP
          - containerPort: 5671
            name: 5671-tcp
            protocol: TCP
          - containerPort: 5672
            name: 5672-tcp
            protocol: TCP
          - containerPort: 6379
            name: 6379-tcp
            protocol: TCP
          - containerPort: 8883
            name: 8883-tcp
            protocol: TCP
          - containerPort: 9000
            name: 9000-tcp
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          securityContext:
            allowPrivilegeEscalation: true
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            runAsUser: 1001
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1001
        serviceAccount: qa-ingress-nginx-ingress-controller
        serviceAccountName: qa-ingress-nginx-ingress-controller
        terminationGracePeriodSeconds: 60
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "4"
      meta.helm.sh/release-name: qa-ingress
      meta.helm.sh/release-namespace: components
      reloader.stakater.com/auto: "true"
      service.beta.kubernetes.io/azure-load-balancer-internal: "true"
    creationTimestamp: "2022-02-13T14:09:41Z"
    generation: 2
    labels:
      app.kubernetes.io/component: default-backend
      app.kubernetes.io/instance: qa-ingress
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: nginx-ingress-controller
      helm.sh/chart: nginx-ingress-controller-9.1.0
      pod-template-hash: 657c5c4cb6
    name: qa-ingress-nginx-ingress-controller-default-backend-657c5c4cb6
    namespace: components
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: qa-ingress-nginx-ingress-controller-default-backend
      uid: 961c872a-d105-45fa-97f2-cb244485448d
    resourceVersion: "493131413"
    uid: b4b09cd0-ec59-4e21-bbe0-24bf2de95a36
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/component: default-backend
        app.kubernetes.io/instance: qa-ingress
        app.kubernetes.io/name: nginx-ingress-controller
        pod-template-hash: 657c5c4cb6
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/restartedAt: "2022-02-13T11:09:41-03:00"
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: default-backend
          app.kubernetes.io/instance: qa-ingress
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: nginx-ingress-controller
          helm.sh/chart: nginx-ingress-controller-9.1.0
          pod-template-hash: 657c5c4cb6
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/component: default-backend
                    app.kubernetes.io/instance: qa-ingress
                    app.kubernetes.io/name: nginx-ingress-controller
                namespaces:
                - components
                topologyKey: kubernetes.io/hostname
              weight: 1
        containers:
        - image: docker.io/bitnami/nginx:1.19.10-debian-10-r35
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: http
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: default-backend
          ports:
          - containerPort: 8080
            name: http
            protocol: TCP
          readinessProbe:
            failureThreshold: 6
            httpGet:
              path: /healthz
              port: http
              scheme: HTTP
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 5
          resources: {}
          securityContext:
            runAsUser: 1001
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /opt/bitnami/nginx/conf/bitnami/
            name: nginx-config-volume
            readOnly: true
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1001
        serviceAccount: qa-ingress-nginx-ingress-controller
        serviceAccountName: qa-ingress-nginx-ingress-controller
        terminationGracePeriodSeconds: 60
        volumes:
        - configMap:
            defaultMode: 420
            items:
            - key: defaultBackend.conf
              path: defaultBackend.conf
            name: qa-ingress-nginx-ingress-controller-default-backend
          name: nginx-config-volume
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: qa-ingress
      meta.helm.sh/release-namespace: components
      service.beta.kubernetes.io/azure-load-balancer-internal: "true"
    creationTimestamp: "2021-06-07T19:23:10Z"
    generation: 2
    labels:
      app.kubernetes.io/component: default-backend
      app.kubernetes.io/instance: qa-ingress
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: nginx-ingress-controller
      helm.sh/chart: nginx-ingress-controller-7.6.9
      pod-template-hash: 67bcbcdc7c
    name: qa-ingress-nginx-ingress-controller-default-backend-67bcbcdc7c
    namespace: components
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: qa-ingress-nginx-ingress-controller-default-backend
      uid: 961c872a-d105-45fa-97f2-cb244485448d
    resourceVersion: "30479544"
    uid: 7a7b711b-f709-40a3-94ca-e1f0e050aeeb
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/component: default-backend
        app.kubernetes.io/instance: qa-ingress
        app.kubernetes.io/name: nginx-ingress-controller
        pod-template-hash: 67bcbcdc7c
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: default-backend
          app.kubernetes.io/instance: qa-ingress
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: nginx-ingress-controller
          helm.sh/chart: nginx-ingress-controller-7.6.9
          pod-template-hash: 67bcbcdc7c
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/component: default-backend
                    app.kubernetes.io/instance: qa-ingress
                    app.kubernetes.io/name: nginx-ingress-controller
                namespaces:
                - components
                topologyKey: kubernetes.io/hostname
              weight: 1
        containers:
        - image: docker.io/bitnami/nginx:1.19.10-debian-10-r35
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: http
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: default-backend
          ports:
          - containerPort: 8080
            name: http
            protocol: TCP
          readinessProbe:
            failureThreshold: 6
            httpGet:
              path: /healthz
              port: http
              scheme: HTTP
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 5
          resources: {}
          securityContext:
            runAsUser: 1001
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /opt/bitnami/nginx/conf/bitnami/
            name: nginx-config-volume
            readOnly: true
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1001
        serviceAccount: qa-ingress-nginx-ingress-controller
        serviceAccountName: qa-ingress-nginx-ingress-controller
        terminationGracePeriodSeconds: 60
        volumes:
        - configMap:
            defaultMode: 420
            items:
            - key: defaultBackend.conf
              path: defaultBackend.conf
            name: qa-ingress-nginx-ingress-controller-default-backend
          name: nginx-config-volume
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "5"
      meta.helm.sh/release-name: qa-ingress
      meta.helm.sh/release-namespace: components
      reloader.stakater.com/auto: "true"
    creationTimestamp: "2022-12-03T19:47:05Z"
    generation: 1
    labels:
      app.kubernetes.io/component: default-backend
      app.kubernetes.io/instance: qa-ingress
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: nginx-ingress-controller
      helm.sh/chart: nginx-ingress-controller-9.3.22
      pod-template-hash: 6f85b66894
    name: qa-ingress-nginx-ingress-controller-default-backend-6f85b66894
    namespace: components
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: qa-ingress-nginx-ingress-controller-default-backend
      uid: 961c872a-d105-45fa-97f2-cb244485448d
    resourceVersion: "493147979"
    uid: d48c2575-82b6-4c22-bd1b-fab18eaa4315
  spec:
    replicas: 1
    selector:
      matchLabels:
        app.kubernetes.io/component: default-backend
        app.kubernetes.io/instance: qa-ingress
        app.kubernetes.io/name: nginx-ingress-controller
        pod-template-hash: 6f85b66894
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/restartedAt: "2022-02-13T11:09:41-03:00"
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: default-backend
          app.kubernetes.io/instance: qa-ingress
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: nginx-ingress-controller
          helm.sh/chart: nginx-ingress-controller-9.3.22
          pod-template-hash: 6f85b66894
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/component: default-backend
                    app.kubernetes.io/instance: qa-ingress
                    app.kubernetes.io/name: nginx-ingress-controller
                topologyKey: kubernetes.io/hostname
              weight: 1
        containers:
        - image: docker.io/bitnami/nginx:1.22.1-debian-11-r7
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: http
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: default-backend
          ports:
          - containerPort: 8080
            name: http
            protocol: TCP
          readinessProbe:
            failureThreshold: 6
            httpGet:
              path: /healthz
              port: http
              scheme: HTTP
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 5
          resources: {}
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /opt/bitnami/nginx/conf/bitnami/
            name: nginx-config-volume
            readOnly: true
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1001
        serviceAccount: qa-ingress-nginx-ingress-controller
        serviceAccountName: qa-ingress-nginx-ingress-controller
        terminationGracePeriodSeconds: 60
        volumes:
        - configMap:
            defaultMode: 420
            items:
            - key: defaultBackend.conf
              path: defaultBackend.conf
            name: qa-ingress-nginx-ingress-controller-default-backend
          name: nginx-config-volume
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "3"
      meta.helm.sh/release-name: qa-ingress
      meta.helm.sh/release-namespace: components
      reloader.stakater.com/auto: "true"
      service.beta.kubernetes.io/azure-load-balancer-internal: "true"
    creationTimestamp: "2022-02-13T01:02:09Z"
    generation: 2
    labels:
      app.kubernetes.io/component: default-backend
      app.kubernetes.io/instance: qa-ingress
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: nginx-ingress-controller
      helm.sh/chart: nginx-ingress-controller-9.1.0
      pod-template-hash: 6f965bf79
    name: qa-ingress-nginx-ingress-controller-default-backend-6f965bf79
    namespace: components
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: qa-ingress-nginx-ingress-controller-default-backend
      uid: 961c872a-d105-45fa-97f2-cb244485448d
    resourceVersion: "216353725"
    uid: f688df84-a0ac-4427-89b9-b80579874c46
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/component: default-backend
        app.kubernetes.io/instance: qa-ingress
        app.kubernetes.io/name: nginx-ingress-controller
        pod-template-hash: 6f965bf79
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/restartedAt: "2021-07-31T10:15:55-03:00"
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: default-backend
          app.kubernetes.io/instance: qa-ingress
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: nginx-ingress-controller
          helm.sh/chart: nginx-ingress-controller-9.1.0
          pod-template-hash: 6f965bf79
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/component: default-backend
                    app.kubernetes.io/instance: qa-ingress
                    app.kubernetes.io/name: nginx-ingress-controller
                namespaces:
                - components
                topologyKey: kubernetes.io/hostname
              weight: 1
        containers:
        - image: docker.io/bitnami/nginx:1.19.10-debian-10-r35
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: http
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: default-backend
          ports:
          - containerPort: 8080
            name: http
            protocol: TCP
          readinessProbe:
            failureThreshold: 6
            httpGet:
              path: /healthz
              port: http
              scheme: HTTP
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 5
          resources: {}
          securityContext:
            runAsUser: 1001
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /opt/bitnami/nginx/conf/bitnami/
            name: nginx-config-volume
            readOnly: true
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1001
        serviceAccount: qa-ingress-nginx-ingress-controller
        serviceAccountName: qa-ingress-nginx-ingress-controller
        terminationGracePeriodSeconds: 60
        volumes:
        - configMap:
            defaultMode: 420
            items:
            - key: defaultBackend.conf
              path: defaultBackend.conf
            name: qa-ingress-nginx-ingress-controller-default-backend
          name: nginx-config-volume
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "2"
      meta.helm.sh/release-name: qa-ingress
      meta.helm.sh/release-namespace: components
      reloader.stakater.com/auto: "true"
      service.beta.kubernetes.io/azure-load-balancer-internal: "true"
    creationTimestamp: "2021-07-31T13:15:54Z"
    generation: 2
    labels:
      app.kubernetes.io/component: default-backend
      app.kubernetes.io/instance: qa-ingress
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: nginx-ingress-controller
      helm.sh/chart: nginx-ingress-controller-7.6.9
      pod-template-hash: 7d5dc48b47
    name: qa-ingress-nginx-ingress-controller-default-backend-7d5dc48b47
    namespace: components
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: qa-ingress-nginx-ingress-controller-default-backend
      uid: 961c872a-d105-45fa-97f2-cb244485448d
    resourceVersion: "216130124"
    uid: b21b8552-819e-459e-ae37-dffe04125885
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/component: default-backend
        app.kubernetes.io/instance: qa-ingress
        app.kubernetes.io/name: nginx-ingress-controller
        pod-template-hash: 7d5dc48b47
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/restartedAt: "2021-07-31T10:15:55-03:00"
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: default-backend
          app.kubernetes.io/instance: qa-ingress
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: nginx-ingress-controller
          helm.sh/chart: nginx-ingress-controller-7.6.9
          pod-template-hash: 7d5dc48b47
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/component: default-backend
                    app.kubernetes.io/instance: qa-ingress
                    app.kubernetes.io/name: nginx-ingress-controller
                namespaces:
                - components
                topologyKey: kubernetes.io/hostname
              weight: 1
        containers:
        - image: docker.io/bitnami/nginx:1.19.10-debian-10-r35
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: http
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: default-backend
          ports:
          - containerPort: 8080
            name: http
            protocol: TCP
          readinessProbe:
            failureThreshold: 6
            httpGet:
              path: /healthz
              port: http
              scheme: HTTP
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 5
          resources: {}
          securityContext:
            runAsUser: 1001
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /opt/bitnami/nginx/conf/bitnami/
            name: nginx-config-volume
            readOnly: true
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1001
        serviceAccount: qa-ingress-nginx-ingress-controller
        serviceAccountName: qa-ingress-nginx-ingress-controller
        terminationGracePeriodSeconds: 60
        volumes:
        - configMap:
            defaultMode: 420
            items:
            - key: defaultBackend.conf
              path: defaultBackend.conf
            name: qa-ingress-nginx-ingress-controller-default-backend
          name: nginx-config-volume
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: reloader
      meta.helm.sh/release-namespace: components
    creationTimestamp: "2021-08-20T21:20:12Z"
    generation: 1
    labels:
      app: reloader-reloader
      app.kubernetes.io/managed-by: Helm
      chart: reloader-v0.0.87
      group: com.stakater.platform
      heritage: Helm
      pod-template-hash: 67b489c94
      provider: stakater
      release: reloader
      version: v0.0.77
    name: reloader-reloader-67b489c94
    namespace: components
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: reloader-reloader
      uid: 013266be-81f2-451e-88a9-08477c627b28
    resourceVersion: "564971773"
    uid: eaf49036-fda0-4397-ab2f-f26e594a9f1f
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: reloader-reloader
        pod-template-hash: 67b489c94
        release: reloader
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: reloader-reloader
          app.kubernetes.io/managed-by: Helm
          chart: reloader-v0.0.87
          group: com.stakater.platform
          heritage: Helm
          pod-template-hash: 67b489c94
          provider: stakater
          release: reloader
          version: v0.0.77
      spec:
        containers:
        - image: stakater/reloader:v0.0.87
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /metrics
              port: http
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: reloader-reloader
          ports:
          - containerPort: 9090
            name: http
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /metrics
              port: http
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsNonRoot: true
          runAsUser: 65534
        serviceAccount: reloader-reloader
        serviceAccountName: reloader-reloader
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
kind: List
metadata:
  resourceVersion: ""
